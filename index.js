// Generated by purs bundle 0.14.7
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];          
  var discard = function (dict) {
      return dict.discard;
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var discardUnit = {
      discard: function (dictBind) {
          return bind(dictBind);
      }
  };
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorArray = {
      map: $foreign.arrayMap
  };
  exports["map"] = map;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["voidLeft"] = voidLeft;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];                  
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Monad.Rec.Class"] = $PS["Control.Monad.Rec.Class"] || {};
  var exports = $PS["Control.Monad.Rec.Class"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];                
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var monadRecEffect = {
      tailRecM: function (f) {
          return function (a) {
              var fromDone = function (v) {
                  if (v instanceof Done) {
                      return v.value0;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 113, column 30 - line 113, column 44): " + [ v.constructor.name ]);
              };
              return function __do() {
                  var r = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
                  (function () {
                      while (!(function __do() {
                          var v = Effect_Ref.read(r)();
                          if (v instanceof Loop) {
                              var e = f(v.value0)();
                              Effect_Ref.write(e)(r)();
                              return false;
                          };
                          if (v instanceof Done) {
                              return true;
                          };
                          throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 104, column 22 - line 109, column 28): " + [ v.constructor.name ]);
                      })()) {

                      };
                      return {};
                  })();
                  return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(r))();
              };
          };
      },
      Monad0: function () {
          return Effect.monadEffect;
      }
  };
  var forever = function (dictMonadRec) {
      return function (ma) {
          return tailRecM(dictMonadRec)(function (u) {
              return Data_Functor.voidRight((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(new Loop(u))(ma);
          })(Data_Unit.unit);
      };
  };
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["tailRecM"] = tailRecM;
  exports["forever"] = forever;
  exports["monadRecEffect"] = monadRecEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  exports["Left"] = Left;
  exports["Right"] = Right;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];              
  var bimap = function (dict) {
      return dict.bimap;
  };
  var bifunctorEither = {
      bimap: function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Data_Either.Left) {
                      return new Data_Either.Left(v(v2.value0));
                  };
                  if (v2 instanceof Data_Either.Right) {
                      return new Data_Either.Right(v1(v2.value0));
                  };
                  throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      }
  };
  exports["bimap"] = bimap;
  exports["bifunctorEither"] = bifunctorEither;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Exists"] = $PS["Data.Exists"] || {};
  var exports = $PS["Data.Exists"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Monad.Free.Trans"] = $PS["Control.Monad.Free.Trans"] || {};
  var exports = $PS["Control.Monad.Free.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];                      
  var Bound = (function () {
      function Bound(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bound.create = function (value0) {
          return function (value1) {
              return new Bound(value0, value1);
          };
      };
      return Bound;
  })();
  var FreeT = (function () {
      function FreeT(value0) {
          this.value0 = value0;
      };
      FreeT.create = function (value0) {
          return new FreeT(value0);
      };
      return FreeT;
  })();
  var Bind = (function () {
      function Bind(value0) {
          this.value0 = value0;
      };
      Bind.create = function (value0) {
          return new Bind(value0);
      };
      return Bind;
  })();
  var monadTransFreeT = function (dictFunctor) {
      return {
          lift: function (dictMonad) {
              return function (ma) {
                  return new FreeT(function (v) {
                      return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Either.Left.create)(ma);
                  });
              };
          }
      };
  };                       
  var bound = function (m) {
      return function (f) {
          return new Bind(Data_Exists.mkExists(new Bound(m, f)));
      };
  };
  var functorFreeT = function (dictFunctor) {
      return function (dictFunctor1) {
          return {
              map: function (f) {
                  return function (v) {
                      if (v instanceof FreeT) {
                          return new FreeT(function (v1) {
                              return Data_Functor.map(dictFunctor1)(Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither)(f)(Data_Functor.map(dictFunctor)(Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f))))(v.value0(Data_Unit.unit));
                          });
                      };
                      if (v instanceof Bind) {
                          return Data_Exists.runExists(function (v1) {
                              return bound(v1.value0)((function () {
                                  var $123 = Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f);
                                  return function ($124) {
                                      return $123(v1.value1($124));
                                  };
                              })());
                          })(v.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 61, column 1 - line 63, column 71): " + [ f.constructor.name, v.constructor.name ]);
                  };
              }
          };
      };
  };
  var monadFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return {
              Applicative0: function () {
                  return applicativeFreeT(dictFunctor)(dictMonad);
              },
              Bind1: function () {
                  return bindFreeT(dictFunctor)(dictMonad);
              }
          };
      };
  };
  var bindFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return {
              bind: function (v) {
                  return function (f) {
                      if (v instanceof Bind) {
                          return Data_Exists.runExists(function (v1) {
                              return bound(v1.value0)(function (x) {
                                  return bound(function (v2) {
                                      return v1.value1(x);
                                  })(f);
                              });
                          })(v.value0);
                      };
                      return bound(function (v1) {
                          return v;
                      })(f);
                  };
              },
              Apply0: function () {
                  return applyFreeT(dictFunctor)(dictMonad);
              }
          };
      };
  };
  var applyFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return {
              apply: Control_Monad.ap(monadFreeT(dictFunctor)(dictMonad)),
              Functor0: function () {
                  return functorFreeT(dictFunctor)(((dictMonad.Bind1()).Apply0()).Functor0());
              }
          };
      };
  };
  var applicativeFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return {
              pure: function (a) {
                  return new FreeT(function (v) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(a));
                  });
              },
              Apply0: function () {
                  return applyFreeT(dictFunctor)(dictMonad);
              }
          };
      };
  };
  var resume = function (dictFunctor) {
      return function (dictMonadRec) {
          var go = function (v) {
              if (v instanceof FreeT) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(v.value0(Data_Unit.unit));
              };
              if (v instanceof Bind) {
                  return Data_Exists.runExists(function (v1) {
                      var v2 = v1.value0(Data_Unit.unit);
                      if (v2 instanceof FreeT) {
                          return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v2.value0(Data_Unit.unit))(function (v3) {
                              if (v3 instanceof Data_Either.Left) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(v1.value1(v3.value0)));
                              };
                              if (v3 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(new Data_Either.Right(Data_Functor.map(dictFunctor)(function (h) {
                                      return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(h)(v1.value1);
                                  })(v3.value0))));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 56, column 20 - line 58, column 67): " + [ v3.constructor.name ]);
                          });
                      };
                      if (v2 instanceof Bind) {
                          return Data_Exists.runExists(function (v3) {
                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value0(Data_Unit.unit))(function (z) {
                                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value1(z))(v1.value1);
                              })));
                          })(v2.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 54, column 5 - line 59, column 98): " + [ v2.constructor.name ]);
                  })(v.value0);
              };
              throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 51, column 3 - line 51, column 75): " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  var runFreeT = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (interp) {
              var go = function (v) {
                  if (v instanceof Data_Either.Left) {
                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(v.value0));
                  };
                  if (v instanceof Data_Either.Right) {
                      return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(interp(v.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 143, column 3 - line 143, column 63): " + [ v.constructor.name ]);
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(Control_Bind.composeKleisliFlipped((dictMonadRec.Monad0()).Bind1())(go)(resume(dictFunctor)(dictMonadRec)));
          };
      };
  };
  var monadRecFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return {
              tailRecM: function (f) {
                  var go = function (s) {
                      return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonad))(f(s))(function (v) {
                          if (v instanceof Control_Monad_Rec_Class.Loop) {
                              return go(v.value0);
                          };
                          if (v instanceof Control_Monad_Rec_Class.Done) {
                              return Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(v.value0);
                          };
                          throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 84, column 15 - line 86, column 25): " + [ v.constructor.name ]);
                      });
                  };
                  return go;
              },
              Monad0: function () {
                  return monadFreeT(dictFunctor)(dictMonad);
              }
          };
      };
  };
  exports["runFreeT"] = runFreeT;
  exports["monadTransFreeT"] = monadTransFreeT;
  exports["monadRecFreeT"] = monadRecFreeT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var semigroupUnit = {
      append: function (v) {
          return function (v1) {
              return Data_Unit.unit;
          };
      }
  };
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupUnit"] = semigroupUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                  
  var monoidUnit = {
      mempty: Data_Unit.unit,
      Semigroup0: function () {
          return Data_Semigroup.semigroupUnit;
      }
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
  exports["monoidUnit"] = monoidUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function (dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
      }
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var functorIdentity = {
      map: function (f) {
          return function (m) {
              return f(m);
          };
      }
  };
  exports["functorIdentity"] = functorIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function () {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var unwrap = Safe_Coerce.coerce;
  exports["unwrap"] = unwrap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Safely"] = $PS["Control.Safely"] || {};
  var exports = $PS["Control.Safely"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Free_Trans = $PS["Control.Monad.Free.Trans"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Unit = $PS["Data.Unit"];                
  var safely = function (dictMonadRec) {
      return function (f) {
          var lower = function (dictMonadRec1) {
              return Control_Monad_Free_Trans.runFreeT(Data_Identity.functorIdentity)(dictMonadRec1)((function () {
                  var $17 = Control_Applicative.pure((dictMonadRec1.Monad0()).Applicative0());
                  var $18 = Data_Newtype.unwrap();
                  return function ($19) {
                      return $17($18($19));
                  };
              })());
          };
          return lower(dictMonadRec)(f(Control_Monad_Free_Trans.monadRecFreeT(Data_Identity.functorIdentity)(dictMonadRec.Monad0()))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Data_Identity.functorIdentity))(dictMonadRec.Monad0()))(lower(dictMonadRec)));
      };
  };
  var traverse_ = function (dictFoldable) {
      return function (dictMonadRec) {
          return function (f) {
              return function (xs) {
                  return safely(dictMonadRec)(function (dictMonadRec1) {
                      return function (lift) {
                          return function (v) {
                              return Data_Foldable.traverse_((dictMonadRec1.Monad0()).Applicative0())(dictFoldable)(function ($20) {
                                  return lift(f($20));
                              })(xs);
                          };
                      };
                  });
              };
          };
      };
  };
  var replicateM_ = function (dictMonadRec) {
      return function (n) {
          return function (x) {
              var step = function (v) {
                  if (v === 0) {
                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit));
                  };
                  return Data_Functor.voidLeft((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(x)(new Control_Monad_Rec_Class.Loop(v - 1 | 0));
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(step)(n);
          };
      };
  };
  var for_ = function (dictFoldable) {
      return function (dictMonadRec) {
          return Data_Function.flip(traverse_(dictFoldable)(dictMonadRec));
      };
  };
  exports["replicateM_"] = replicateM_;
  exports["for_"] = for_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var monadEffectEffect = {
      liftEffect: Control_Category.identity(Control_Category.categoryFn),
      Monad0: function () {
          return Effect.monadEffect;
      }
  };
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.random = Math.random;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Random"] = $PS["Effect.Random"] || {};
  var exports = $PS["Effect.Random"];
  var $foreign = $PS["Effect.Random"];       
  var randomRange = function (min) {
      return function (max) {
          return function __do() {
              var n = $foreign.random();
              return n * (max - min) + min;
          };
      };
  };
  exports["randomRange"] = randomRange;
  exports["random"] = $foreign.random;
})(PS);
(function(exports) {
  "use strict";            

  exports.cos = Math.cos;    

  exports.sin = Math.sin;      

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["cos"] = $foreign.cos;
  exports["sin"] = $foreign.sin;
  exports["pi"] = $foreign.pi;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Data.Complex"] = $PS["Graphics.Glapple.Data.Complex"] || {};
  var exports = $PS["Graphics.Glapple.Data.Complex"];
  var $$Math = $PS["Math"];                                                       
  var semiringComplex = {
      add: function (v) {
          return function (v1) {
              return {
                  real: v.real + v1.real,
                  image: v.image + v1.image
              };
          };
      },
      zero: {
          real: 0.0,
          image: 0.0
      },
      one: {
          real: 1.0,
          image: 0.0
      },
      mul: function (v) {
          return function (v1) {
              return {
                  real: v.real * v1.real - v.image * v1.image,
                  image: v.real * v1.image + v1.real * v.image
              };
          };
      }
  };
  var ringComplex = {
      sub: function (v) {
          return function (v1) {
              return {
                  real: v.real - v1.real,
                  image: v.image - v1.image
              };
          };
      },
      Semiring0: function () {
          return semiringComplex;
      }
  };
  var rotateComplex = function (theta) {
      return {
          real: $$Math.cos(theta),
          image: $$Math.sin(theta)
      };
  };
  var real = function (v) {
      return v.real;
  };
  var multiplyScalar = function (x) {
      return function (v) {
          return {
              real: v.real * x,
              image: v.image * x
          };
      };
  };
  var magnitudeSqr = function (v) {
      return v.real * v.real + v.image * v.image;
  };
  var image = function (v) {
      return v.image;
  };
  var complex = function (x) {
      return function (y) {
          return {
              real: x,
              image: y
          };
      };
  };
  exports["complex"] = complex;
  exports["magnitudeSqr"] = magnitudeSqr;
  exports["multiplyScalar"] = multiplyScalar;
  exports["real"] = real;
  exports["image"] = image;
  exports["rotateComplex"] = rotateComplex;
  exports["semiringComplex"] = semiringComplex;
  exports["ringComplex"] = ringComplex;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Monad.Reader.Trans"] = $PS["Control.Monad.Reader.Trans"] || {};
  var exports = $PS["Control.Monad.Reader.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect_Class = $PS["Effect.Class"];                
  var ReaderT = function (x) {
      return x;
  };
  var runReaderT = function (v) {
      return v;
  };
  var monadTransReaderT = {
      lift: function (dictMonad) {
          return function ($64) {
              return ReaderT(Data_Function["const"]($64));
          };
      }
  };
  var mapReaderT = function (f) {
      return function (v) {
          return function ($65) {
              return f(v($65));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return {
          map: (function () {
              var $66 = Data_Functor.map(dictFunctor);
              return function ($67) {
                  return mapReaderT($66($67));
              };
          })()
      };
  };
  var applyReaderT = function (dictApply) {
      return {
          apply: function (v) {
              return function (v1) {
                  return function (r) {
                      return Control_Apply.apply(dictApply)(v(r))(v1(r));
                  };
              };
          },
          Functor0: function () {
              return functorReaderT(dictApply.Functor0());
          }
      };
  };
  var bindReaderT = function (dictBind) {
      return {
          bind: function (v) {
              return function (k) {
                  return function (r) {
                      return Control_Bind.bind(dictBind)(v(r))(function (a) {
                          var v1 = k(a);
                          return v1(r);
                      });
                  };
              };
          },
          Apply0: function () {
              return applyReaderT(dictBind.Apply0());
          }
      };
  };
  var applicativeReaderT = function (dictApplicative) {
      return {
          pure: (function () {
              var $71 = Control_Applicative.pure(dictApplicative);
              return function ($72) {
                  return ReaderT(Data_Function["const"]($71($72)));
              };
          })(),
          Apply0: function () {
              return applyReaderT(dictApplicative.Apply0());
          }
      };
  };
  var monadReaderT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeReaderT(dictMonad.Applicative0());
          },
          Bind1: function () {
              return bindReaderT(dictMonad.Bind1());
          }
      };
  };
  var monadAskReaderT = function (dictMonad) {
      return {
          ask: Control_Applicative.pure(dictMonad.Applicative0()),
          Monad0: function () {
              return monadReaderT(dictMonad);
          }
      };
  };
  var monadEffectReader = function (dictMonadEffect) {
      return {
          liftEffect: (function () {
              var $74 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadEffect.Monad0());
              var $75 = Effect_Class.liftEffect(dictMonadEffect);
              return function ($76) {
                  return $74($75($76));
              };
          })(),
          Monad0: function () {
              return monadReaderT(dictMonadEffect.Monad0());
          }
      };
  };
  var monadRecReaderT = function (dictMonadRec) {
      return {
          tailRecM: function (k) {
              return function (a) {
                  var k$prime = function (r) {
                      return function (a$prime) {
                          var v = k(a$prime);
                          return Control_Bind.bindFlipped((dictMonadRec.Monad0()).Bind1())(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0()))(v(r));
                      };
                  };
                  return function (r) {
                      return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(a);
                  };
              };
          },
          Monad0: function () {
              return monadReaderT(dictMonadRec.Monad0());
          }
      };
  };
  exports["runReaderT"] = runReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadEffectReader"] = monadEffectReader;
  exports["monadAskReaderT"] = monadAskReaderT;
  exports["monadRecReaderT"] = monadRecReaderT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Data.Hooks"] = $PS["Graphics.Glapple.Data.Hooks"] || {};
  var exports = $PS["Graphics.Glapple.Data.Hooks"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var monadRecHooks = Control_Monad_Reader_Trans.monadRecReaderT(Control_Monad_Rec_Class.monadRecEffect);
  var monadEffectHooks = Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect);
  var monadAskInternalHooks = Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect);
  var bindHooks = Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect);   
  var applicativeHooks = Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect);
  var runHooks = function (emitter) {
      return function (v) {
          return Control_Monad_Reader_Trans.runReaderT(v)(emitter);
      };
  };
  exports["runHooks"] = runHooks;
  exports["applicativeHooks"] = applicativeHooks;
  exports["bindHooks"] = bindHooks;
  exports["monadAskInternalHooks"] = monadAskInternalHooks;
  exports["monadEffectHooks"] = monadEffectHooks;
  exports["monadRecHooks"] = monadRecHooks;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                     
  exports.ordNumberImpl = unsafeCompareImpl;
  exports.ordStringImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                        
  exports.eqNumberImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var eqUnit = {
      eq: function (v) {
          return function (v1) {
              return true;
          };
      }
  };
  var eqString = {
      eq: $foreign.eqStringImpl
  };
  var eqNumber = {
      eq: $foreign.eqNumberImpl
  };
  var eq = function (dict) {
      return dict.eq;
  };
  exports["eq"] = eq;
  exports["eqNumber"] = eqNumber;
  exports["eqString"] = eqString;
  exports["eqUnit"] = eqUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var ordUnit = {
      compare: function (v) {
          return function (v1) {
              return Data_Ordering.EQ.value;
          };
      },
      Eq0: function () {
          return Data_Eq.eqUnit;
      }
  };
  var ordString = {
      compare: $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqString;
      }
  };
  var ordNumber = {
      compare: $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqNumber;
      }
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["compare"] = compare;
  exports["min"] = min;
  exports["max"] = max;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordUnit"] = ordUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var zero = function (dict) {
      return dict.zero;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["add"] = add;
  exports["zero"] = zero;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var sub = function (dict) {
      return dict.sub;
  };
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["negate"] = negate;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.canvasElementToImageSource = function(e) {
      return e;
  };

  exports.tryLoadImageImpl = function (src) {
    return function(e) {
          return function(f) {
              return function () {
                  var img = new Image();
                  img.src = src;
                  img.addEventListener("load", function() {
                      f(img)();
                  }, false);
                  img.addEventListener("error", function(error) {
                      e();
                  }, false);
              }
          }
      };
  };

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setCanvasWidth = function(canvas) {
      return function(width) {
          return function() {
              canvas.width = width;
          };
      };
  };

  exports.setCanvasHeight = function(canvas) {
      return function(height) {
          return function() {
              canvas.height = height;
          };
      };
  };

  exports.setGlobalAlpha = function(ctx) {
      return function(alpha) {
          return function() {
              ctx.globalAlpha = alpha;
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.scale = function(ctx) {
      return function(t) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
          };
      };
  };

  exports.translate = function(ctx) {
      return function(t) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
          };
      };
  };

  exports.transform = function(ctx) {
      return function(t) {
          return function() {
              ctx.transform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
      };
  };

  exports.drawImage = function(ctx) {
      return function(image_source) {
          return function(dx) {
              return function(dy) {
                  return function() {
                      ctx.drawImage(image_source, dx, dy);
                  };
              };
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  var Data_Maybe = $PS["Data.Maybe"];
  var tryLoadImage = function (path) {
      return function (k) {
          return $foreign.tryLoadImageImpl(path)(k(Data_Maybe.Nothing.value))(function ($46) {
              return k(Data_Maybe.Just.create($46));
          });
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["tryLoadImage"] = tryLoadImage;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["setCanvasWidth"] = $foreign.setCanvasWidth;
  exports["setCanvasHeight"] = $foreign.setCanvasHeight;
  exports["setGlobalAlpha"] = $foreign.setGlobalAlpha;
  exports["clearRect"] = $foreign.clearRect;
  exports["scale"] = $foreign.scale;
  exports["translate"] = $foreign.translate;
  exports["transform"] = $foreign.transform;
  exports["save"] = $foreign.save;
  exports["restore"] = $foreign.restore;
  exports["canvasElementToImageSource"] = $foreign.canvasElementToImageSource;
  exports["drawImage"] = $foreign.drawImage;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Data.Transform"] = $PS["Graphics.Glapple.Data.Transform"] || {};
  var exports = $PS["Graphics.Glapple.Data.Transform"];
  var $$Math = $PS["Math"];
  var unitTransform = {
      translate: {
          x: 0.0,
          y: 0.0
      },
      rotate: 0.0
  };
  var translate = function (v) {
      return {
          real: v.translate.x,
          image: v.translate.y
      };
  };
  var transform = function (v) {
      return function (v1) {
          return {
              real: (v1.real * $$Math.cos(v.rotate) - v1.image * $$Math.sin(v.rotate)) + v.translate.x,
              image: v1.real * $$Math.sin(v.rotate) + v1.image * $$Math.cos(v.rotate) + v.translate.y
          };
      };
  };
  var toCanvasTransform = function (v) {
      return {
          m11: $$Math.cos(v.rotate),
          m12: $$Math.sin(v.rotate),
          m21: -$$Math.sin(v.rotate),
          m22: $$Math.cos(v.rotate),
          m31: v.translate.x,
          m32: v.translate.y
      };
  };
  var rotate = function (v) {
      return v.rotate;
  };
  var modifyTranslate = function (v) {
      return function (v1) {
          return {
              translate: {
                  x: v.real,
                  y: v.image
              },
              rotate: v1.rotate
          };
      };
  };
  var modifyRotate = function (rt) {
      return function (v) {
          return {
              translate: v.translate,
              rotate: rt
          };
      };
  };
  var inverseTransform = function (v) {
      return {
          translate: {
              x: -v.translate.x * $$Math.cos(v.rotate) - v.translate.y * $$Math.sin(v.rotate),
              y: v.translate.x * $$Math.sin(v.rotate) - v.translate.y * $$Math.cos(v.rotate)
          },
          rotate: -v.rotate
      };
  };
  var computeChildTransform = function (v) {
      return function (v1) {
          return {
              translate: {
                  x: (v.translate.x + v1.translate.x * $$Math.cos(v.rotate)) - v1.translate.y * $$Math.sin(v.rotate),
                  y: v.translate.y + v1.translate.y * $$Math.cos(v.rotate) + v1.translate.x * $$Math.sin(v.rotate)
              },
              rotate: v.rotate + v1.rotate
          };
      };
  };
  exports["unitTransform"] = unitTransform;
  exports["toCanvasTransform"] = toCanvasTransform;
  exports["computeChildTransform"] = computeChildTransform;
  exports["transform"] = transform;
  exports["modifyTranslate"] = modifyTranslate;
  exports["modifyRotate"] = modifyRotate;
  exports["translate"] = translate;
  exports["rotate"] = rotate;
  exports["inverseTransform"] = inverseTransform;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Data.Picture"] = $PS["Graphics.Glapple.Data.Picture"] || {};
  var exports = $PS["Graphics.Glapple.Data.Picture"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Graphics_Glapple_Data_Complex = $PS["Graphics.Glapple.Data.Complex"];
  var Graphics_Glapple_Data_Transform = $PS["Graphics.Glapple.Data.Transform"];
  var sprite = function (spr) {
      return function (ctx) {
          return function (canvasImageSources) {
              return Effect_Class.liftEffect(Effect_Class.monadEffectEffect)((function () {
                  var v = canvasImageSources(spr);
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Graphics_Canvas.drawImage(ctx)(v.value0)(0.0)(0.0);
                  };
                  throw new Error("Failed pattern match at Graphics.Glapple.Data.Picture (line 325, column 3 - line 328, column 30): " + [ v.constructor.name ]);
              })());
          };
      };
  };
  var saveAndRestore = function (dictMonadEffect) {
      return function (ctx) {
          return function (f) {
              return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Graphics_Canvas.save(ctx)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(f)(function () {
                      return Effect_Class.liftEffect(dictMonadEffect)(Graphics_Canvas.restore(ctx));
                  });
              });
          };
      };
  };
  var drawPicture = function (ctx) {
      return function (canvasImageSources) {
          return function (v) {
              return v(ctx)(canvasImageSources);
          };
      };
  };
  var operate = function (f) {
      return function (p) {
          return function (ctx) {
              return function (img) {
                  return saveAndRestore(Effect_Class.monadEffectEffect)(ctx)(function __do() {
                      Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(f(ctx))();
                      return drawPicture(ctx)(img)(p)();
                  });
              };
          };
      };
  };
  var opacity = function (o) {
      return operate(Data_Function.flip(Graphics_Canvas.setGlobalAlpha)(Data_Ord.min(Data_Ord.ordNumber)(1.0)(Data_Ord.max(Data_Ord.ordNumber)(0.0)(o))));
  };
  var scale = function (cmp) {
      return operate(Data_Function.flip(Graphics_Canvas.scale)({
          scaleX: Graphics_Glapple_Data_Complex.real(cmp),
          scaleY: Graphics_Glapple_Data_Complex.image(cmp)
      }));
  };
  var transform = function (t) {
      return operate(Data_Function.flip(Graphics_Canvas.transform)(Graphics_Glapple_Data_Transform.toCanvasTransform(t)));
  };
  var translate = function (cmp) {
      return operate(Data_Function.flip(Graphics_Canvas.translate)({
          translateX: Graphics_Glapple_Data_Complex.real(cmp),
          translateY: Graphics_Glapple_Data_Complex.image(cmp)
      }));
  };
  var setOrigin = function (comp) {
      return translate(Data_Ring.negate(Graphics_Glapple_Data_Complex.ringComplex)(comp));
  };
  exports["drawPicture"] = drawPicture;
  exports["opacity"] = opacity;
  exports["scale"] = scale;
  exports["setOrigin"] = setOrigin;
  exports["sprite"] = sprite;
  exports["transform"] = transform;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Monad.Reader.Class"] = $PS["Control.Monad.Reader.Class"] || {};
  var exports = $PS["Control.Monad.Reader.Class"];
  var ask = function (dict) {
      return dict.ask;
  };
  exports["ask"] = ask;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = {
      map: listMap
  };                                                                   
  var foldableList = {
      foldr: function (f) {
          return function (b) {
              var rev = (function () {
                  var go = function ($copy_acc) {
                      return function ($copy_v) {
                          var $tco_var_acc = $copy_acc;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(acc, v) {
                              if (v instanceof Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Cons) {
                                  $tco_var_acc = new Cons(v.value0, acc);
                                  $copy_v = v.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_acc, $copy_v);
                          };
                          return $tco_result;
                      };
                  };
                  return go(Nil.value);
              })();
              var $205 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
              return function ($206) {
                  return $205(rev($206));
              };
          };
      },
      foldl: function (f) {
          var go = function ($copy_b) {
              return function ($copy_v) {
                  var $tco_var_b = $copy_b;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(b, v) {
                      if (v instanceof Nil) {
                          $tco_done1 = true;
                          return b;
                      };
                      if (v instanceof Cons) {
                          $tco_var_b = f(b)(v.value0);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_b, $copy_v);
                  };
                  return $tco_result;
              };
          };
          return go;
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return Data_Foldable.foldl(foldableList)(function (acc) {
                  var $207 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                  return function ($208) {
                      return $207(f($208));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      }
  };
  var semigroupList = {
      append: function (xs) {
          return function (ys) {
              return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
          };
      }
  };
  var applyList = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
              };
              throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorList;
      }
  };
  var applicativeList = {
      pure: function (a) {
          return new Cons(a, Nil.value);
      },
      Apply0: function () {
          return applyList;
      }
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["semigroupList"] = semigroupList;
  exports["foldableList"] = foldableList;
  exports["applicativeList"] = applicativeList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return {
              eq: function (x) {
                  return function (y) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
                  };
              }
          };
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return {
              compare: function (x) {
                  return function (y) {
                      var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                      if (v instanceof Data_Ordering.LT) {
                          return Data_Ordering.LT.value;
                      };
                      if (v instanceof Data_Ordering.GT) {
                          return Data_Ordering.GT.value;
                      };
                      return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
                  };
              },
              Eq0: function () {
                  return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
              }
          };
      };
  };
  exports["Tuple"] = Tuple;
  exports["snd"] = snd;
  exports["ordTuple"] = ordTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                          
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 626, column 1 - line 626, column 40): " + [ v.constructor.name ]);
  };
  var size = function (v) {
      if (v instanceof Leaf) {
          return 0;
      };
      if (v instanceof Two) {
          return (1 + size(v.value0) | 0) + size(v.value3) | 0;
      };
      if (v instanceof Three) {
          return ((2 + size(v.value0) | 0) + size(v.value3) | 0) + size(v.value6) | 0;
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 676, column 1 - line 676, column 35): " + [ v.constructor.name ]);
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done1 = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 9 - line 542, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 522, column 5 - line 542, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done1 = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done1 = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 554, column 5 - line 558, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done2 = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 545, column 33 - line 549, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done2) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done3 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done3 = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 34 - line 518, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done3) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = {
      foldl: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
              };
          };
      },
      foldr: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return function (m) {
                  return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
              };
          };
      }
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["delete"] = $$delete;
  exports["size"] = size;
  exports["foldableMap"] = foldableMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Data.Emitter"] = $PS["Graphics.Glapple.Data.Emitter"] || {};
  var exports = $PS["Graphics.Glapple.Data.Emitter"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Safely = $PS["Control.Safely"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Random = $PS["Effect.Random"];
  var Effect_Ref = $PS["Effect.Ref"];                
  var Emitter = function (x) {
      return x;
  };
  var size = function (dictMonadEffect) {
      return function (v) {
          return Effect_Class.liftEffect(dictMonadEffect)(function __do() {
              var s = Effect_Ref.read(v)();
              return Data_Map_Internal.size(s);
          });
      };
  };
  var newEmitter = function (dictMonadEffect) {
      return Data_Functor.map((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0())(Emitter)(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Map_Internal.empty)));
  };
  var emit = function (dictMonadEffect) {
      return function (dictMonadRec) {
          return function (v) {
              return function (event) {
                  return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(v)))(function (emitter) {
                      return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](true)))(function (isContinueRef) {
                          var prevent = Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(false)(isContinueRef));
                          return Control_Safely.for_(Data_Map_Internal.foldableMap)(dictMonadRec)(emitter)(function (listener) {
                              return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(isContinueRef)))(function (isContinue) {
                                  if (isContinue) {
                                      return listener(event)(prevent);
                                  };
                                  return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
                              });
                          });
                      });
                  });
              };
          };
      };
  };
  var addListener_ = function (dictMonadEffect) {
      return function (v) {
          return function (priority) {
              return function (listenerTemp) {
                  return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Random.random))(function (key) {
                      var listener = function (event) {
                          return function (v1) {
                              return listenerTemp(event);
                          };
                      };
                      return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.modify_(Data_Map_Internal.insert(Data_Tuple.ordTuple(Data_Ord.ordNumber)(Data_Ord.ordNumber))(new Data_Tuple.Tuple(-priority, key))(listener))(v)))(function () {
                          return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.modify_(Data_Map_Internal["delete"](Data_Tuple.ordTuple(Data_Ord.ordNumber)(Data_Ord.ordNumber))(new Data_Tuple.Tuple(-priority, key)))(v)));
                      });
                  });
              };
          };
      };
  };
  var addListener = function (dictMonadEffect) {
      return function (v) {
          return function (priority) {
              return function (listener) {
                  return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Random.random))(function (key) {
                      return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.modify_(Data_Map_Internal.insert(Data_Tuple.ordTuple(Data_Ord.ordNumber)(Data_Ord.ordNumber))(new Data_Tuple.Tuple(-priority, key))(listener))(v)))(function () {
                          return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.modify_(Data_Map_Internal["delete"](Data_Tuple.ordTuple(Data_Ord.ordNumber)(Data_Ord.ordNumber))(new Data_Tuple.Tuple(-priority, key)))(v)));
                      });
                  });
              };
          };
      };
  };
  exports["addListener"] = addListener;
  exports["addListener_"] = addListener_;
  exports["emit"] = emit;
  exports["newEmitter"] = newEmitter;
  exports["size"] = size;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Hooks.UseDestroy"] = $PS["Graphics.Glapple.Hooks.UseDestroy"] || {};
  var exports = $PS["Graphics.Glapple.Hooks.UseDestroy"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Graphics_Glapple_Data_Emitter = $PS["Graphics.Glapple.Data.Emitter"];
  var Graphics_Glapple_Data_Hooks = $PS["Graphics.Glapple.Data.Hooks"];                
  var useDestroy = Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Control_Monad_Reader_Class.ask(Graphics_Glapple_Data_Hooks.monadAskInternalHooks))(function (v) {
      var destroy = Control_Apply.applySecond(Effect.applyEffect)(Graphics_Glapple_Data_Emitter.emit(Effect_Class.monadEffectEffect)(Control_Monad_Rec_Class.monadRecEffect)(v.finalizeEmitter)(Data_Unit.unit))(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
      return Control_Applicative.pure(Graphics_Glapple_Data_Hooks.applicativeHooks)(destroy);
  });
  var useDestroyNow = Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(useDestroy)(function (destroy) {
      return Effect_Class.liftEffect(Graphics_Glapple_Data_Hooks.monadEffectHooks)(destroy);
  });
  exports["useDestroy"] = useDestroy;
  exports["useDestroyNow"] = useDestroyNow;
})(PS);
(function(exports) {
  "use strict";

  exports.createCanvasElement = () => document.createElement("canvas");
})(PS["Graphics.Glapple.Util"] = PS["Graphics.Glapple.Util"] || {});
(function(exports) {
  // global exports
  "use strict";

  exports.now = function() {
    return new Date();
  };

  exports.dateMethod = function(method, date) {
    return date[method]();
  };
})(PS["Data.JSDate"] = PS["Data.JSDate"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.JSDate"] = $PS["Data.JSDate"] || {};
  var exports = $PS["Data.JSDate"];
  var $foreign = $PS["Data.JSDate"];
  var getTime = function (dt) {
      return $foreign.dateMethod("getTime", dt);
  };
  exports["getTime"] = getTime;
  exports["now"] = $foreign.now;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Util"] = $PS["Graphics.Glapple.Util"] || {};
  var exports = $PS["Graphics.Glapple.Util"];
  var $foreign = $PS["Graphics.Glapple.Util"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_JSDate = $PS["Data.JSDate"];
  var Effect = $PS["Effect"];                                       
  var getNowTime = Data_Functor.map(Effect.functorEffect)(function ($1) {
      return (function (v) {
          return v / 1000.0;
      })(Data_JSDate.getTime($1));
  })(Data_JSDate.now);
  exports["getNowTime"] = getNowTime;
  exports["createCanvasElement"] = $foreign.createCanvasElement;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Hooks.UseLocalTime"] = $PS["Graphics.Glapple.Hooks.UseLocalTime"] || {};
  var exports = $PS["Graphics.Glapple.Hooks.UseLocalTime"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Effect_Class = $PS["Effect.Class"];
  var Graphics_Glapple_Data_Hooks = $PS["Graphics.Glapple.Data.Hooks"];
  var Graphics_Glapple_Util = $PS["Graphics.Glapple.Util"];                
  var useLocalTime = Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Effect_Class.liftEffect(Graphics_Glapple_Data_Hooks.monadEffectHooks)(Graphics_Glapple_Util.getNowTime))(function (initTime) {
      var getLocalTime = function __do() {
          var time = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Graphics_Glapple_Util.getNowTime)();
          return time - initTime;
      };
      return Control_Applicative.pure(Graphics_Glapple_Data_Hooks.applicativeHooks)(getLocalTime);
  });
  exports["useLocalTime"] = useLocalTime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Hooks.UseFinalize"] = $PS["Graphics.Glapple.Hooks.UseFinalize"] || {};
  var exports = $PS["Graphics.Glapple.Hooks.UseFinalize"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];
  var Graphics_Glapple_Data_Emitter = $PS["Graphics.Glapple.Data.Emitter"];
  var Graphics_Glapple_Data_Hooks = $PS["Graphics.Glapple.Data.Hooks"];                
  var useFinalize = function (listener) {
      return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Control_Monad_Reader_Class.ask(Graphics_Glapple_Data_Hooks.monadAskInternalHooks))(function (v) {
          return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Effect_Class.liftEffect(Graphics_Glapple_Data_Hooks.monadEffectHooks)(Graphics_Glapple_Data_Emitter.addListener_(Effect_Class.monadEffectEffect)(v.finalizeEmitter)(0.0)(function (v1) {
              return listener;
          })))(function () {
              return Control_Applicative.pure(Graphics_Glapple_Data_Hooks.applicativeHooks)(Data_Unit.unit);
          });
      });
  };
  exports["useFinalize"] = useFinalize;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Hooks.UseTransform"] = $PS["Graphics.Glapple.Hooks.UseTransform"] || {};
  var exports = $PS["Graphics.Glapple.Hooks.UseTransform"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Graphics_Glapple_Data_Hooks = $PS["Graphics.Glapple.Data.Hooks"];
  var Graphics_Glapple_Data_Transform = $PS["Graphics.Glapple.Data.Transform"];                
  var useTranslate = Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Control_Monad_Reader_Class.ask(Graphics_Glapple_Data_Hooks.monadAskInternalHooks))(function (v) {
      return Control_Applicative.pure(Graphics_Glapple_Data_Hooks.applicativeHooks)(new Data_Tuple.Tuple(Data_Functor.map(Effect.functorEffect)(Graphics_Glapple_Data_Transform.translate)(Effect_Ref.read(v.componentTransform)), function (cm) {
          return Effect_Ref.modify_(Graphics_Glapple_Data_Transform.modifyTranslate(cm))(v.componentTransform);
      }));
  });
  var useTranslateNow = function (trans) {
      return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(useTranslate)(function (v) {
          return Effect_Class.liftEffect(Graphics_Glapple_Data_Hooks.monadEffectHooks)(v.value1(trans));
      });
  }; 
  var useRotate = Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Control_Monad_Reader_Class.ask(Graphics_Glapple_Data_Hooks.monadAskInternalHooks))(function (v) {
      return Control_Applicative.pure(Graphics_Glapple_Data_Hooks.applicativeHooks)(new Data_Tuple.Tuple(Data_Functor.map(Effect.functorEffect)(Graphics_Glapple_Data_Transform.rotate)(Effect_Ref.read(v.componentTransform)), function (cm) {
          return Effect_Ref.modify_(Graphics_Glapple_Data_Transform.modifyRotate(cm))(v.componentTransform);
      }));
  });
  var useRotateNow = function (rot) {
      return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(useRotate)(function (v) {
          return Effect_Class.liftEffect(Graphics_Glapple_Data_Hooks.monadEffectHooks)(v.value1(rot));
      });
  };
  var useGlobalTransform = Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Control_Monad_Reader_Class.ask(Graphics_Glapple_Data_Hooks.monadAskInternalHooks))(function (v) {
      return Control_Applicative.pure(Graphics_Glapple_Data_Hooks.applicativeHooks)(function __do() {
          var comTrans0 = v.parentTransform();
          var comTrans1 = Effect_Ref.read(v.componentTransform)();
          return Graphics_Glapple_Data_Transform.computeChildTransform(comTrans0)(comTrans1);
      });
  });
  exports["useTranslate"] = useTranslate;
  exports["useTranslateNow"] = useTranslateNow;
  exports["useRotateNow"] = useRotateNow;
  exports["useGlobalTransform"] = useGlobalTransform;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Hooks.UseRenderer"] = $PS["Graphics.Glapple.Hooks.UseRenderer"] || {};
  var exports = $PS["Graphics.Glapple.Hooks.UseRenderer"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Graphics_Glapple_Data_Emitter = $PS["Graphics.Glapple.Data.Emitter"];
  var Graphics_Glapple_Data_Hooks = $PS["Graphics.Glapple.Data.Hooks"];
  var Graphics_Glapple_Data_Picture = $PS["Graphics.Glapple.Data.Picture"];
  var Graphics_Glapple_Hooks_UseFinalize = $PS["Graphics.Glapple.Hooks.UseFinalize"];
  var Graphics_Glapple_Hooks_UseTransform = $PS["Graphics.Glapple.Hooks.UseTransform"];                
  var useRenderer = function (layer) {
      return function (picture) {
          return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseTransform.useGlobalTransform)(function (getTransform) {
              return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Control_Monad_Reader_Class.ask(Graphics_Glapple_Data_Hooks.monadAskInternalHooks))(function (v) {
                  return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Effect_Class.liftEffect(Graphics_Glapple_Data_Hooks.monadEffectHooks)(Graphics_Glapple_Data_Emitter.addListener_(Effect_Class.monadEffectEffect)(v.rendererEmitter)(layer)(function (v1) {
                      return function __do() {
                          var trans = getTransform();
                          var pic = picture();
                          return Graphics_Glapple_Data_Picture.drawPicture(v1.ctx)(v1.canvasImageSources)(Graphics_Glapple_Data_Picture.transform(trans)(pic))();
                      };
                  })))(function (remove) {
                      return Graphics_Glapple_Hooks_UseFinalize.useFinalize(remove);
                  });
              });
          });
      };
  };
  exports["useRenderer"] = useRenderer;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Hooks.UseRunner"] = $PS["Graphics.Glapple.Hooks.UseRunner"] || {};
  var exports = $PS["Graphics.Glapple.Hooks.UseRunner"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Graphics_Glapple_Data_Emitter = $PS["Graphics.Glapple.Data.Emitter"];
  var Graphics_Glapple_Data_Hooks = $PS["Graphics.Glapple.Data.Hooks"];
  var Graphics_Glapple_Data_Transform = $PS["Graphics.Glapple.Data.Transform"];
  var Graphics_Glapple_Hooks_UseTransform = $PS["Graphics.Glapple.Hooks.UseTransform"];
  var useChildRunner = function (v) {
      return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Effect_Class.liftEffect(Graphics_Glapple_Data_Hooks.monadEffectHooks)(Graphics_Glapple_Data_Emitter.newEmitter(Effect_Class.monadEffectEffect)))(function (allFinalizeEmitter) {
          return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseTransform.useGlobalTransform)(function (getGlobalTransform) {
              return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Control_Monad_Reader_Class.ask(Graphics_Glapple_Data_Hooks.monadAskInternalHooks))(function (v1) {
                  var size$prime = Graphics_Glapple_Data_Emitter.size(Effect_Class.monadEffectEffect)(allFinalizeEmitter);
                  var run = function (props) {
                      return function __do() {
                          var finalizeEmitter = Graphics_Glapple_Data_Emitter.newEmitter(Effect_Class.monadEffectEffect)();
                          var componentTransform = Effect_Ref["new"](Graphics_Glapple_Data_Transform.unitTransform)();
                          Graphics_Glapple_Data_Emitter.addListener_(Effect_Class.monadEffectEffect)(allFinalizeEmitter)(0.0)(function (v2) {
                              return Control_Apply.applySecond(Effect.applyEffect)(Graphics_Glapple_Data_Emitter.emit(Effect_Class.monadEffectEffect)(Control_Monad_Rec_Class.monadRecEffect)(finalizeEmitter)(Data_Unit.unit))(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
                          })();
                          return Graphics_Glapple_Data_Hooks.runHooks({
                              rendererEmitter: v1.rendererEmitter,
                              hoverEmitter: v1.hoverEmitter,
                              finalizeEmitter: finalizeEmitter,
                              keyEmitter: v1.keyEmitter,
                              keyStateRef: v1.keyStateRef,
                              componentTransform: componentTransform,
                              mouseStateRef: v1.mouseStateRef,
                              parentTransform: getGlobalTransform
                          })(v(props))();
                      };
                  };
                  var destroy = Control_Apply.applySecond(Effect.applyEffect)(Graphics_Glapple_Data_Emitter.emit(Effect_Class.monadEffectEffect)(Control_Monad_Rec_Class.monadRecEffect)(allFinalizeEmitter)(Data_Unit.unit))(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
                  return Control_Applicative.pure(Graphics_Glapple_Data_Hooks.applicativeHooks)({
                      run: run,
                      destroy: destroy,
                      size: size$prime
                  });
              });
          });
      });
  };
  var useChildRunnerNow = function (component) {
      return function (props) {
          return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(useChildRunner(component))(function (v) {
              return Effect_Class.liftEffect(Graphics_Glapple_Data_Hooks.monadEffectHooks)(v.run(props));
          });
      };
  };
  exports["useChildRunner"] = useChildRunner;
  exports["useChildRunnerNow"] = useChildRunnerNow;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Hooks.UseState"] = $PS["Graphics.Glapple.Hooks.UseState"] || {};
  var exports = $PS["Graphics.Glapple.Hooks.UseState"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Graphics_Glapple_Data_Hooks = $PS["Graphics.Glapple.Data.Hooks"];                
  var useState = function (a) {
      return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Effect_Class.liftEffect(Graphics_Glapple_Data_Hooks.monadEffectHooks)(Effect_Ref["new"](a)))(function (ref) {
          return Control_Applicative.pure(Graphics_Glapple_Data_Hooks.applicativeHooks)(new Data_Tuple.Tuple(Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Ref.read(ref)), (function () {
              var $0 = Effect_Class.liftEffect(Effect_Class.monadEffectEffect);
              var $1 = Data_Function.flip(Effect_Ref.write)(ref);
              return function ($2) {
                  return $0($1($2));
              };
          })()));
      });
  };
  exports["useState"] = useState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Hooks.UseUpdate"] = $PS["Graphics.Glapple.Hooks.UseUpdate"] || {};
  var exports = $PS["Graphics.Glapple.Hooks.UseUpdate"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Graphics_Glapple_Data_Emitter = $PS["Graphics.Glapple.Data.Emitter"];
  var Graphics_Glapple_Data_Hooks = $PS["Graphics.Glapple.Data.Hooks"];
  var Graphics_Glapple_Hooks_UseFinalize = $PS["Graphics.Glapple.Hooks.UseFinalize"];                
  var useUpdate = function (listener) {
      return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Control_Monad_Reader_Class.ask(Graphics_Glapple_Data_Hooks.monadAskInternalHooks))(function (v) {
          return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Effect_Class.liftEffect(Graphics_Glapple_Data_Hooks.monadEffectHooks)(Graphics_Glapple_Data_Emitter.addListener_(Effect_Class.monadEffectEffect)(v.rendererEmitter)(0.0)(function (v1) {
              return Control_Apply.applySecond(Effect.applyEffect)(listener({
                  deltaTime: v1.deltaTime
              }))(Control_Applicative.pure(Effect.applicativeEffect)(Data_Monoid.mempty(Data_Monoid.monoidUnit)));
          })))(function (remove) {
              return Graphics_Glapple_Hooks_UseFinalize.useFinalize(remove);
          });
      });
  };
  exports["useUpdate"] = useUpdate;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Hooks.UseTimeout"] = $PS["Graphics.Glapple.Hooks.UseTimeout"] || {};
  var exports = $PS["Graphics.Glapple.Hooks.UseTimeout"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Effect = $PS["Effect"];
  var Graphics_Glapple_Data_Hooks = $PS["Graphics.Glapple.Data.Hooks"];
  var Graphics_Glapple_Hooks_UseLocalTime = $PS["Graphics.Glapple.Hooks.UseLocalTime"];
  var Graphics_Glapple_Hooks_UseState = $PS["Graphics.Glapple.Hooks.UseState"];
  var Graphics_Glapple_Hooks_UseUpdate = $PS["Graphics.Glapple.Hooks.UseUpdate"];                
  var useTimeout = function (time) {
      return function (callback) {
          return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseLocalTime.useLocalTime)(function (getTime) {
              return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseState.useState(false))(function (v) {
                  return Graphics_Glapple_Hooks_UseUpdate.useUpdate(function (v1) {
                      return function __do() {
                          var currentTime = getTime();
                          var fired = v.value0();
                          return Control_Applicative.when(Effect.applicativeEffect)(currentTime >= time && !fired)(function __do() {
                              callback();
                              return v.value1(true)();
                          })();
                      };
                  });
              });
          });
      };
  };
  exports["useTimeout"] = useTimeout;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Hooks.UseVelocity"] = $PS["Graphics.Glapple.Hooks.UseVelocity"] || {};
  var exports = $PS["Graphics.Glapple.Hooks.UseVelocity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Class = $PS["Effect.Class"];
  var Graphics_Glapple_Data_Complex = $PS["Graphics.Glapple.Data.Complex"];
  var Graphics_Glapple_Data_Hooks = $PS["Graphics.Glapple.Data.Hooks"];
  var Graphics_Glapple_Hooks_UseState = $PS["Graphics.Glapple.Hooks.UseState"];
  var Graphics_Glapple_Hooks_UseTransform = $PS["Graphics.Glapple.Hooks.UseTransform"];
  var Graphics_Glapple_Hooks_UseUpdate = $PS["Graphics.Glapple.Hooks.UseUpdate"];                
  var useVelocity = Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseState.useState(Data_Semiring.zero(Graphics_Glapple_Data_Complex.semiringComplex)))(function (v) {
      return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseTransform.useTranslate)(function (v1) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseUpdate.useUpdate(function (v2) {
              return function __do() {
                  var vel = v.value0();
                  var trans = v1.value0();
                  var trans$prime = Data_Semiring.add(Graphics_Glapple_Data_Complex.semiringComplex)(Graphics_Glapple_Data_Complex.multiplyScalar(v2.deltaTime)(vel))(trans);
                  return v1.value1(trans$prime)();
              };
          }))(function () {
              return Control_Applicative.pure(Graphics_Glapple_Data_Hooks.applicativeHooks)(new Data_Tuple.Tuple(v.value0, v.value1));
          });
      });
  });
  var useVelocityNow = function (vel) {
      return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(useVelocity)(function (v) {
          return Effect_Class.liftEffect(Graphics_Glapple_Data_Hooks.monadEffectHooks)(v.value1(vel));
      });
  };
  exports["useVelocity"] = useVelocity;
  exports["useVelocityNow"] = useVelocityNow;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];            
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = {
      traverse: function (dictApplicative) {
          return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
      },
      sequence: function (dictApplicative) {
          return sequenceDefault(traversableArray)(dictApplicative);
      },
      Functor0: function () {
          return Data_Functor.functorArray;
      },
      Foldable1: function () {
          return Data_Foldable.foldableArray;
      }
  };
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["for"] = $$for;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };

  exports._delay = function () {
    function setDelay(n, k) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k);
      } else {
        return setTimeout(k, n);
      }
    }

    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }

    return function (right, ms) {
      return Aff.Async(function (cb) {
        return function () {
          var timer = setDelay(ms, cb(right()));
          return function () {
            return Aff.Sync(function () {
              return right(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Parallel.Class"] = $PS["Control.Parallel.Class"] || {};
  var exports = $PS["Control.Parallel.Class"];
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Parallel"] = $PS["Control.Parallel"] || {};
  var exports = $PS["Control.Parallel"];
  var Control_Category = $PS["Control.Category"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Foldable = $PS["Data.Foldable"];                      
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              var $17 = Control_Parallel_Class.sequential(dictParallel);
              var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)((function () {
                  var $20 = Control_Parallel_Class.parallel(dictParallel);
                  return function ($21) {
                      return $20(f($21));
                  };
              })());
              return function ($19) {
                  return $17($18($19));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["parSequence_"] = parSequence_;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function () {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function () {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var functorParAff = {
      map: $foreign["_parAffMap"]
  };
  var functorAff = {
      map: $foreign["_map"]
  };                                    
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $40 = Data_Functor["void"](Effect.functorEffect);
      return function ($41) {
          return $40(launchAff($41));
      };
  })();                              
  var delay = function (v) {
      return $foreign["_delay"](Data_Either.Right.create, v);
  };
  var applyParAff = {
      apply: $foreign["_parAffApply"],
      Functor0: function () {
          return functorParAff;
      }
  };
  var monadAff = {
      Applicative0: function () {
          return applicativeAff;
      },
      Bind1: function () {
          return bindAff;
      }
  };
  var bindAff = {
      bind: $foreign["_bind"],
      Apply0: function () {
          return applyAff;
      }
  };
  var applyAff = {
      apply: Control_Monad.ap(monadAff),
      Functor0: function () {
          return functorAff;
      }
  };
  var applicativeAff = {
      pure: $foreign["_pure"],
      Apply0: function () {
          return applyAff;
      }
  };
  var monadEffectAff = {
      liftEffect: $foreign["_liftEffect"],
      Monad0: function () {
          return monadAff;
      }
  };
  var parallelAff = {
      parallel: Unsafe_Coerce.unsafeCoerce,
      sequential: $foreign["_sequential"],
      Monad0: function () {
          return monadAff;
      },
      Applicative1: function () {
          return applicativeParAff;
      }
  };
  var applicativeParAff = {
      pure: (function () {
          var $50 = Control_Parallel_Class.parallel(parallelAff);
          var $51 = Control_Applicative.pure(applicativeAff);
          return function ($52) {
              return $50($51($52));
          };
      })(),
      Apply0: function () {
          return applyParAff;
      }
  };
  var semigroupCanceler = {
      append: function (v) {
          return function (v1) {
              return function (err) {
                  return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ v(err), v1(err) ]);
              };
          };
      }
  };
  var monadRecAff = {
      tailRecM: function (k) {
          var go = function (a) {
              return Control_Bind.bind(bindAff)(k(a))(function (res) {
                  if (res instanceof Control_Monad_Rec_Class.Done) {
                      return Control_Applicative.pure(applicativeAff)(res.value0);
                  };
                  if (res instanceof Control_Monad_Rec_Class.Loop) {
                      return go(res.value0);
                  };
                  throw new Error("Failed pattern match at Effect.Aff (line 102, column 7 - line 104, column 22): " + [ res.constructor.name ]);
              });
          };
          return go;
      },
      Monad0: function () {
          return monadAff;
      }
  };
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  var monoidCanceler = {
      mempty: nonCanceler,
      Semigroup0: function () {
          return semigroupCanceler;
      }
  };
  exports["launchAff_"] = launchAff_;
  exports["delay"] = delay;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadRecAff"] = monadRecAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["monoidCanceler"] = monoidCanceler;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var $$throw = function ($2) {
      return $foreign.throwException($foreign.error($2));
  };
  exports["throw"] = $$throw;
  exports["error"] = $foreign.error;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Data.Sprite"] = $PS["Graphics.Glapple.Data.Sprite"] || {};
  var exports = $PS["Graphics.Glapple.Data.Sprite"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];                
  var Source = (function () {
      function Source(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Source.create = function (value0) {
          return function (value1) {
              return new Source(value0, value1);
          };
      };
      return Source;
  })();
  var tryLoadImageAff = function (src) {
      return Effect_Aff.makeAff(function (f) {
          return function __do() {
              Graphics_Canvas.tryLoadImage(src)(function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return f(new Data_Either.Left(Effect_Exception.error("Fail to load image")));
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return f(new Data_Either.Right(v.value0));
                  };
                  throw new Error("Failed pattern match at Graphics.Glapple.Data.Sprite (line 21, column 22 - line 23, column 30): " + [ v.constructor.name ]);
              })();
              return Data_Monoid.mempty(Effect_Aff.monoidCanceler);
          };
      });
  };
  var loadSprites = function (dictOrd) {
      return function (xs) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Traversable["for"](Effect_Aff.applicativeAff)(Data_Traversable.traversableArray)(xs)(function (v) {
              return Control_Bind.bind(Effect_Aff.bindAff)(tryLoadImageAff(v.value1))(function (img) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(v.value0, img));
              });
          }))(function (ys) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Map_Internal.fromFoldable(dictOrd)(Data_Foldable.foldableArray)(ys));
          });
      };
  };
  exports["Source"] = Source;
  exports["loadSprites"] = loadSprites;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Sprites"] = $PS["Sprites"] || {};
  var exports = $PS["Sprites"];
  var Data_Unit = $PS["Data.Unit"];
  var Graphics_Glapple_Data_Complex = $PS["Graphics.Glapple.Data.Complex"];
  var Graphics_Glapple_Data_Picture = $PS["Graphics.Glapple.Data.Picture"];
  var Graphics_Glapple_Data_Sprite = $PS["Graphics.Glapple.Data.Sprite"];                
  var sprites = [ new Graphics_Glapple_Data_Sprite.Source(Data_Unit.unit, "./images/apple.png") ];
  var apple = Graphics_Glapple_Data_Picture.setOrigin(Graphics_Glapple_Data_Complex.complex(16.0)(16.0))(Graphics_Glapple_Data_Picture.sprite(Data_Unit.unit));
  exports["sprites"] = sprites;
  exports["apple"] = apple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Components.Particle"] = $PS["Components.Particle"] || {};
  var exports = $PS["Components.Particle"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Safely = $PS["Control.Safely"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Random = $PS["Effect.Random"];
  var Graphics_Glapple_Data_Complex = $PS["Graphics.Glapple.Data.Complex"];
  var Graphics_Glapple_Data_Hooks = $PS["Graphics.Glapple.Data.Hooks"];
  var Graphics_Glapple_Data_Picture = $PS["Graphics.Glapple.Data.Picture"];
  var Graphics_Glapple_Hooks_UseDestroy = $PS["Graphics.Glapple.Hooks.UseDestroy"];
  var Graphics_Glapple_Hooks_UseLocalTime = $PS["Graphics.Glapple.Hooks.UseLocalTime"];
  var Graphics_Glapple_Hooks_UseRenderer = $PS["Graphics.Glapple.Hooks.UseRenderer"];
  var Graphics_Glapple_Hooks_UseRunner = $PS["Graphics.Glapple.Hooks.UseRunner"];
  var Graphics_Glapple_Hooks_UseTimeout = $PS["Graphics.Glapple.Hooks.UseTimeout"];
  var Graphics_Glapple_Hooks_UseTransform = $PS["Graphics.Glapple.Hooks.UseTransform"];
  var Graphics_Glapple_Hooks_UseVelocity = $PS["Graphics.Glapple.Hooks.UseVelocity"];
  var $$Math = $PS["Math"];
  var Sprites = $PS["Sprites"];                
  var particle = function (v) {
      var particleChild = function (v1) {
          return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseLocalTime.useLocalTime)(function (getTime) {
              return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseDestroy.useDestroy)(function (destroy) {
                  return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Effect_Class.liftEffect(Graphics_Glapple_Data_Hooks.monadEffectHooks)(Effect_Random.randomRange(20.0)(60.0)))(function (randomVelocity) {
                      return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Effect_Class.liftEffect(Graphics_Glapple_Data_Hooks.monadEffectHooks)(Effect_Random.randomRange(0.0)(2.0 * $$Math.pi)))(function (randomRot2) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseVelocity.useVelocityNow(Graphics_Glapple_Data_Complex.multiplyScalar(randomVelocity)(Graphics_Glapple_Data_Complex.rotateComplex(randomRot2))))(function () {
                              return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Effect_Class.liftEffect(Graphics_Glapple_Data_Hooks.monadEffectHooks)(Effect_Random.randomRange(0.0)(2.0 * $$Math.pi)))(function (randomRot) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseTransform.useRotateNow(randomRot))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseRenderer.useRenderer(0.0)(function __do() {
                                          var time = getTime();
                                          return Graphics_Glapple_Data_Picture.opacity(1.0 - time / v.lifeTime)(Graphics_Glapple_Data_Picture.scale(Graphics_Glapple_Data_Complex.complex(0.2)(0.2))(Sprites.apple));
                                      }))(function () {
                                          return Graphics_Glapple_Hooks_UseTimeout.useTimeout(v.lifeTime)(destroy);
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      };
      return Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_Data_Hooks.bindHooks)(Control_Safely.replicateM_(Graphics_Glapple_Data_Hooks.monadRecHooks)(10)(Graphics_Glapple_Hooks_UseRunner.useChildRunnerNow(particleChild)(Data_Unit.unit)))(function () {
          return Graphics_Glapple_Hooks_UseDestroy.useDestroyNow;
      });
  };
  exports["particle"] = particle;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Data.Collider"] = $PS["Graphics.Glapple.Data.Collider"] || {};
  var exports = $PS["Graphics.Glapple.Data.Collider"];
  var Graphics_Glapple_Data_Complex = $PS["Graphics.Glapple.Data.Complex"];
  var Graphics_Glapple_Data_Transform = $PS["Graphics.Glapple.Data.Transform"];
  var ColliderAppend = (function () {
      function ColliderAppend(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ColliderAppend.create = function (value0) {
          return function (value1) {
              return new ColliderAppend(value0, value1);
          };
      };
      return ColliderAppend;
  })();
  var ColliderRect = (function () {
      function ColliderRect(value0) {
          this.value0 = value0;
      };
      ColliderRect.create = function (value0) {
          return new ColliderRect(value0);
      };
      return ColliderRect;
  })();
  var ColliderCircle = (function () {
      function ColliderCircle(value0) {
          this.value0 = value0;
      };
      ColliderCircle.create = function (value0) {
          return new ColliderCircle(value0);
      };
      return ColliderCircle;
  })();
  var ColliderTransform = (function () {
      function ColliderTransform(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ColliderTransform.create = function (value0) {
          return function (value1) {
              return new ColliderTransform(value0, value1);
          };
      };
      return ColliderTransform;
  })();
  var ColliderEmpty = (function () {
      function ColliderEmpty() {

      };
      ColliderEmpty.value = new ColliderEmpty();
      return ColliderEmpty;
  })();
  var isCollidePosition = function (comp) {
      return function (v) {
          if (v instanceof ColliderAppend) {
              return isCollidePosition(comp)(v.value0) || isCollidePosition(comp)(v.value1);
          };
          if (v instanceof ColliderRect) {
              return 0.0 <= Graphics_Glapple_Data_Complex.real(comp) && (Graphics_Glapple_Data_Complex.real(comp) <= Graphics_Glapple_Data_Complex.real(v.value0) && (0.0 <= Graphics_Glapple_Data_Complex.image(comp) && Graphics_Glapple_Data_Complex.image(comp) <= Graphics_Glapple_Data_Complex.image(v.value0)));
          };
          if (v instanceof ColliderCircle) {
              return Graphics_Glapple_Data_Complex.magnitudeSqr(comp) <= v.value0 * v.value0;
          };
          if (v instanceof ColliderTransform) {
              return isCollidePosition(Graphics_Glapple_Data_Transform.transform(Graphics_Glapple_Data_Transform.inverseTransform(v.value0))(comp))(v.value1);
          };
          if (v instanceof ColliderEmpty) {
              return false;
          };
          throw new Error("Failed pattern match at Graphics.Glapple.Data.Collider (line 25, column 26 - line 35, column 25): " + [ v.constructor.name ]);
      };
  };
  exports["ColliderCircle"] = ColliderCircle;
  exports["ColliderTransform"] = ColliderTransform;
  exports["isCollidePosition"] = isCollidePosition;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Data.KeyEvent"] = $PS["Graphics.Glapple.Data.KeyEvent"] || {};
  var exports = $PS["Graphics.Glapple.Data.KeyEvent"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];                
  var Left = (function () {
      function Left() {

      };
      Left.value = new Left();
      return Left;
  })();
  var Middle = (function () {
      function Middle() {

      };
      Middle.value = new Middle();
      return Middle;
  })();
  var Right = (function () {
      function Right() {

      };
      Right.value = new Right();
      return Right;
  })();
  var Keyboard = (function () {
      function Keyboard(value0) {
          this.value0 = value0;
      };
      Keyboard.create = function (value0) {
          return new Keyboard(value0);
      };
      return Keyboard;
  })();
  var Mouse = (function () {
      function Mouse(value0) {
          this.value0 = value0;
      };
      Mouse.create = function (value0) {
          return new Mouse(value0);
      };
      return Mouse;
  })();
  var KeyDown = (function () {
      function KeyDown(value0) {
          this.value0 = value0;
      };
      KeyDown.create = function (value0) {
          return new KeyDown(value0);
      };
      return KeyDown;
  })();
  var KeyUp = (function () {
      function KeyUp(value0) {
          this.value0 = value0;
      };
      KeyUp.create = function (value0) {
          return new KeyUp(value0);
      };
      return KeyUp;
  })();
  var eqMouseButton = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Left && y instanceof Left) {
                  return true;
              };
              if (x instanceof Middle && y instanceof Middle) {
                  return true;
              };
              if (x instanceof Right && y instanceof Right) {
                  return true;
              };
              return false;
          };
      }
  };
  var ordMouseButton = {
      compare: function (x) {
          return function (y) {
              if (x instanceof Left && y instanceof Left) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Left) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Left) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Middle && y instanceof Middle) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Middle) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Middle) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Right && y instanceof Right) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Graphics.Glapple.Data.KeyEvent (line 8, column 1 - line 8, column 32): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqMouseButton;
      }
  };
  var eqKeyCode = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Keyboard && y instanceof Keyboard) {
                  return x.value0 === y.value0;
              };
              if (x instanceof Mouse && y instanceof Mouse) {
                  return Data_Eq.eq(eqMouseButton)(x.value0)(y.value0);
              };
              return false;
          };
      }
  };
  var eqKeyEvent = {
      eq: function (x) {
          return function (y) {
              if (x instanceof KeyDown && y instanceof KeyDown) {
                  return Data_Eq.eq(eqKeyCode)(x.value0)(y.value0);
              };
              if (x instanceof KeyUp && y instanceof KeyUp) {
                  return Data_Eq.eq(eqKeyCode)(x.value0)(y.value0);
              };
              return false;
          };
      }
  };
  var ordKeyCode = {
      compare: function (x) {
          return function (y) {
              if (x instanceof Keyboard && y instanceof Keyboard) {
                  return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              };
              if (x instanceof Keyboard) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Keyboard) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Mouse && y instanceof Mouse) {
                  return Data_Ord.compare(ordMouseButton)(x.value0)(y.value0);
              };
              throw new Error("Failed pattern match at Graphics.Glapple.Data.KeyEvent (line 13, column 1 - line 13, column 28): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqKeyCode;
      }
  };
  exports["Left"] = Left;
  exports["Middle"] = Middle;
  exports["Right"] = Right;
  exports["Keyboard"] = Keyboard;
  exports["Mouse"] = Mouse;
  exports["KeyDown"] = KeyDown;
  exports["KeyUp"] = KeyUp;
  exports["ordKeyCode"] = ordKeyCode;
  exports["eqKeyEvent"] = eqKeyEvent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Hooks.UseHover"] = $PS["Graphics.Glapple.Hooks.UseHover"] || {};
  var exports = $PS["Graphics.Glapple.Hooks.UseHover"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Graphics_Glapple_Data_Collider = $PS["Graphics.Glapple.Data.Collider"];
  var Graphics_Glapple_Data_Emitter = $PS["Graphics.Glapple.Data.Emitter"];
  var Graphics_Glapple_Data_Hooks = $PS["Graphics.Glapple.Data.Hooks"];
  var Graphics_Glapple_Hooks_UseFinalize = $PS["Graphics.Glapple.Hooks.UseFinalize"];
  var Graphics_Glapple_Hooks_UseState = $PS["Graphics.Glapple.Hooks.UseState"];
  var Graphics_Glapple_Hooks_UseTransform = $PS["Graphics.Glapple.Hooks.UseTransform"];                
  var useHover = function (layer) {
      return function (collider) {
          return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseTransform.useGlobalTransform)(function (getTransform) {
              return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Control_Monad_Reader_Class.ask(Graphics_Glapple_Data_Hooks.monadAskInternalHooks))(function (v) {
                  return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseState.useState(false))(function (v1) {
                      return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Effect_Class.liftEffect(Graphics_Glapple_Data_Hooks.monadEffectHooks)(Graphics_Glapple_Data_Emitter.addListener(Effect_Class.monadEffectEffect)(v.hoverEmitter)(-layer)(function (comp) {
                          return function (prevent) {
                              return function __do() {
                                  var trans = getTransform();
                                  var $4 = Graphics_Glapple_Data_Collider.isCollidePosition(comp)(new Graphics_Glapple_Data_Collider.ColliderTransform(trans, collider));
                                  if ($4) {
                                      v1.value1(true)();
                                      return prevent();
                                  };
                                  return v1.value1(false)();
                              };
                          };
                      })))(function (remover) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseFinalize.useFinalize(remover))(function () {
                              return Control_Applicative.pure(Graphics_Glapple_Data_Hooks.applicativeHooks)(v1.value0);
                          });
                      });
                  });
              });
          });
      };
  };
  exports["useHover"] = useHover;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Hooks.UseKeyEvent"] = $PS["Graphics.Glapple.Hooks.UseKeyEvent"] || {};
  var exports = $PS["Graphics.Glapple.Hooks.UseKeyEvent"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Graphics_Glapple_Data_Emitter = $PS["Graphics.Glapple.Data.Emitter"];
  var Graphics_Glapple_Data_Hooks = $PS["Graphics.Glapple.Data.Hooks"];
  var Graphics_Glapple_Hooks_UseFinalize = $PS["Graphics.Glapple.Hooks.UseFinalize"];                
  var useKeyEvent = function (listener) {
      return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Control_Monad_Reader_Class.ask(Graphics_Glapple_Data_Hooks.monadAskInternalHooks))(function (v) {
          return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Effect_Class.liftEffect(Graphics_Glapple_Data_Hooks.monadEffectHooks)(Graphics_Glapple_Data_Emitter.addListener_(Effect_Class.monadEffectEffect)(v.keyEmitter)(0.0)(listener)))(function (remove) {
              return Graphics_Glapple_Hooks_UseFinalize.useFinalize(remove);
          });
      });
  };
  exports["useKeyEvent"] = useKeyEvent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Hooks.UseClick"] = $PS["Graphics.Glapple.Hooks.UseClick"] || {};
  var exports = $PS["Graphics.Glapple.Hooks.UseClick"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Eq = $PS["Data.Eq"];
  var Effect = $PS["Effect"];
  var Graphics_Glapple_Data_Hooks = $PS["Graphics.Glapple.Data.Hooks"];
  var Graphics_Glapple_Data_KeyEvent = $PS["Graphics.Glapple.Data.KeyEvent"];
  var Graphics_Glapple_Hooks_UseHover = $PS["Graphics.Glapple.Hooks.UseHover"];
  var Graphics_Glapple_Hooks_UseKeyEvent = $PS["Graphics.Glapple.Hooks.UseKeyEvent"];                
  var useClick = function (layer) {
      return function (collider) {
          return function (listener) {
              return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseHover.useHover(layer)(collider))(function (getIsHover) {
                  return Graphics_Glapple_Hooks_UseKeyEvent.useKeyEvent(function (key) {
                      return function __do() {
                          var res = getIsHover();
                          return Control_Applicative.when(Effect.applicativeEffect)(res && Data_Eq.eq(Graphics_Glapple_Data_KeyEvent.eqKeyEvent)(key)(new Graphics_Glapple_Data_KeyEvent.KeyDown(new Graphics_Glapple_Data_KeyEvent.Mouse(Graphics_Glapple_Data_KeyEvent.Left.value))))(listener)();
                      };
                  });
              });
          };
      };
  };
  exports["useClick"] = useClick;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Components.ThrownApple"] = $PS["Components.ThrownApple"] || {};
  var exports = $PS["Components.ThrownApple"];
  var Components_Particle = $PS["Components.Particle"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Graphics_Glapple_Data_Collider = $PS["Graphics.Glapple.Data.Collider"];
  var Graphics_Glapple_Data_Complex = $PS["Graphics.Glapple.Data.Complex"];
  var Graphics_Glapple_Data_Hooks = $PS["Graphics.Glapple.Data.Hooks"];
  var Graphics_Glapple_Hooks_UseClick = $PS["Graphics.Glapple.Hooks.UseClick"];
  var Graphics_Glapple_Hooks_UseDestroy = $PS["Graphics.Glapple.Hooks.UseDestroy"];
  var Graphics_Glapple_Hooks_UseFinalize = $PS["Graphics.Glapple.Hooks.UseFinalize"];
  var Graphics_Glapple_Hooks_UseRenderer = $PS["Graphics.Glapple.Hooks.UseRenderer"];
  var Graphics_Glapple_Hooks_UseRunner = $PS["Graphics.Glapple.Hooks.UseRunner"];
  var Graphics_Glapple_Hooks_UseTransform = $PS["Graphics.Glapple.Hooks.UseTransform"];
  var Graphics_Glapple_Hooks_UseUpdate = $PS["Graphics.Glapple.Hooks.UseUpdate"];
  var Graphics_Glapple_Hooks_UseVelocity = $PS["Graphics.Glapple.Hooks.UseVelocity"];
  var Sprites = $PS["Sprites"];                
  var thrownApple = function (dictDiscard) {
      return function (v) {
          return Control_Bind.discard(dictDiscard)(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseTransform.useTranslateNow(v.initTranslate))(function () {
              return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseVelocity.useVelocity)(function (v1) {
                  return Control_Bind.discard(dictDiscard)(Graphics_Glapple_Data_Hooks.bindHooks)(Effect_Class.liftEffect(Graphics_Glapple_Data_Hooks.monadEffectHooks)(v1.value1(v.initVelocity)))(function () {
                      return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseDestroy.useDestroy)(function (destroy) {
                          return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseTransform.useTranslate)(function (v2) {
                              return Control_Bind.discard(dictDiscard)(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseUpdate.useUpdate(function (v3) {
                                  return function __do() {
                                      var trans = v2.value0();
                                      return Control_Applicative.when(Effect.applicativeEffect)(Graphics_Glapple_Data_Complex.image(trans) > 400.0)(destroy)();
                                  };
                              }))(function () {
                                  return Control_Bind.discard(dictDiscard)(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseRenderer.useRenderer(0.0)(Control_Applicative.pure(Effect.applicativeEffect)(Sprites.apple)))(function () {
                                      return Control_Bind.discard(dictDiscard)(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseClick.useClick(0.0)(new Graphics_Glapple_Data_Collider.ColliderCircle(32.0))(destroy))(function () {
                                          return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseRunner.useChildRunner(Components_Particle.particle))(function (particleRunner) {
                                              return Graphics_Glapple_Hooks_UseFinalize.useFinalize(Control_Bind.discard(dictDiscard)(Effect.bindEffect)(v.onDestroy)(function () {
                                                  return particleRunner.run({
                                                      lifeTime: 1.0
                                                  });
                                              }));
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      };
  };
  exports["thrownApple"] = thrownApple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Components.Root"] = $PS["Components.Root"] || {};
  var exports = $PS["Components.Root"];
  var Components_ThrownApple = $PS["Components.ThrownApple"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Graphics_Glapple_Data_Complex = $PS["Graphics.Glapple.Data.Complex"];
  var Graphics_Glapple_Data_Hooks = $PS["Graphics.Glapple.Data.Hooks"];
  var Graphics_Glapple_Hooks_UseRunner = $PS["Graphics.Glapple.Hooks.UseRunner"];
  var Graphics_Glapple_Hooks_UseState = $PS["Graphics.Glapple.Hooks.UseState"];
  var Graphics_Glapple_Hooks_UseUpdate = $PS["Graphics.Glapple.Hooks.UseUpdate"];
  var root = function (v) {
      return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseRunner.useChildRunner(Components_ThrownApple.thrownApple(Control_Bind.discardUnit)))(function (appleRunner) {
          return Control_Bind.bind(Graphics_Glapple_Data_Hooks.bindHooks)(Graphics_Glapple_Hooks_UseState.useState(false))(function (v1) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_Data_Hooks.bindHooks)(Effect_Class.liftEffect(Graphics_Glapple_Data_Hooks.monadEffectHooks)(appleRunner.run({
                  initTranslate: Graphics_Glapple_Data_Complex.complex(250.0)(250.0),
                  initVelocity: Graphics_Glapple_Data_Complex.complex(100.0)(100.0),
                  onDestroy: v1.value1(true)
              })))(function () {
                  return Graphics_Glapple_Hooks_UseUpdate.useUpdate(function (v2) {
                      return function __do() {
                          var isDestroy = v1.value0();
                          Control_Applicative.when(Effect.applicativeEffect)(isDestroy)(appleRunner.run({
                              initTranslate: Graphics_Glapple_Data_Complex.complex(250.0)(250.0),
                              initVelocity: Graphics_Glapple_Data_Complex.complex(100.0)(100.0),
                              onDestroy: v1.value1(true)
                          }))();
                          return v1.value1(false)();
                      };
                  });
              });
          });
      });
  };
  exports["root"] = root;
})(PS);
(function(exports) {
  "use strict";

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Unit = $PS["Data.Unit"];
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  };
  var empty = Data_Map_Internal.empty;
  var $$delete = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal["delete"](dictOrd)(a)(v);
          };
      };
  };
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["delete"] = $$delete;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Aff.Class"] = $PS["Effect.Aff.Class"] || {};
  var exports = $PS["Effect.Aff.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var monadAffAff = {
      liftAff: Control_Category.identity(Control_Category.categoryFn),
      MonadEffect0: function () {
          return Effect_Aff.monadEffectAff;
      }
  };
  var liftAff = function (dict) {
      return dict.liftAff;
  };
  exports["liftAff"] = liftAff;
  exports["monadAffAff"] = monadAffAff;
})(PS);
(function(exports) {
  "use strict";

  exports.clientWidth = function (el) {
    return function () {
      return el.clientWidth;
    };
  };

  exports.clientHeight = function (el) {
    return function () {
      return el.clientHeight;
    };
  };
})(PS["Web.DOM.Element"] = PS["Web.DOM.Element"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.DOM.Element"] = $PS["Web.DOM.Element"] || {};
  var exports = $PS["Web.DOM.Element"];
  var $foreign = $PS["Web.DOM.Element"];
  exports["clientWidth"] = $foreign.clientWidth;
  exports["clientHeight"] = $foreign.clientHeight;
})(PS);
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.HTML.HTMLCanvasElement"] = $PS["Web.HTML.HTMLCanvasElement"] || {};
  var exports = $PS["Web.HTML.HTMLCanvasElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
})(PS);
(function(exports) {
  "use strict";

  // - CSSOM ---------------------------------------------------------------------

  exports.getBoundingClientRect = function (el) {
    return function () {
      var rect = el.getBoundingClientRect();
      return {
        top: rect.top,
        right: rect.right,
        bottom: rect.bottom,
        left: rect.left,
        width: rect.width,
        height: rect.height
      };
    };
  };
})(PS["Web.HTML.HTMLElement"] = PS["Web.HTML.HTMLElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var $foreign = $PS["Web.HTML.HTMLElement"];
  exports["getBoundingClientRect"] = $foreign.getBoundingClientRect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports.code = function (e) {
    return e.code;
  };

  exports.repeat = function (e) {
    return e.repeat;
  };
})(PS["Web.UIEvent.KeyboardEvent"] = PS["Web.UIEvent.KeyboardEvent"] || {});
(function(exports) {
  "use strict";

  exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
    if (typeof window !== "undefined") {
      var ty = window[name];
      if (ty != null && value instanceof ty) {
        return just(value);
      }
    }
    var obj = value;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name) {
        return just(value);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  };
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.Internal.FFI"] = $PS["Web.Internal.FFI"] || {};
  var exports = $PS["Web.Internal.FFI"];
  var $foreign = $PS["Web.Internal.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var unsafeReadProtoTagged = function (name) {
      return function (value) {
          return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
      };
  };
  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.UIEvent.KeyboardEvent"] = $PS["Web.UIEvent.KeyboardEvent"] || {};
  var exports = $PS["Web.UIEvent.KeyboardEvent"];
  var $foreign = $PS["Web.UIEvent.KeyboardEvent"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                           
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("KeyboardEvent");
  exports["fromEvent"] = fromEvent;
  exports["code"] = $foreign.code;
  exports["repeat"] = $foreign.repeat;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.UIEvent.KeyboardEvent.EventTypes"] = $PS["Web.UIEvent.KeyboardEvent.EventTypes"] || {};
  var exports = $PS["Web.UIEvent.KeyboardEvent.EventTypes"];
  var keyup = "keyup";
  var keydown = "keydown";
  exports["keydown"] = keydown;
  exports["keyup"] = keyup;
})(PS);
(function(exports) {
  "use strict";

  exports.clientX = function (e) {
    return e.clientX;
  };

  exports.clientY = function (e) {
    return e.clientY;
  };

  exports.button = function (e) {
    return e.button;
  };
})(PS["Web.UIEvent.MouseEvent"] = PS["Web.UIEvent.MouseEvent"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.UIEvent.MouseEvent"] = $PS["Web.UIEvent.MouseEvent"] || {};
  var exports = $PS["Web.UIEvent.MouseEvent"];
  var $foreign = $PS["Web.UIEvent.MouseEvent"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                        
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("MouseEvent");
  exports["fromEvent"] = fromEvent;
  exports["clientX"] = $foreign.clientX;
  exports["clientY"] = $foreign.clientY;
  exports["button"] = $foreign.button;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.UIEvent.MouseEvent.EventTypes"] = $PS["Web.UIEvent.MouseEvent.EventTypes"] || {};
  var exports = $PS["Web.UIEvent.MouseEvent.EventTypes"];
  var mouseup = "mouseup";  
  var mousemove = "mousemove";  
  var mousedown = "mousedown";
  exports["mousedown"] = mousedown;
  exports["mousemove"] = mousemove;
  exports["mouseup"] = mouseup;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Glapple.Runner"] = $PS["Graphics.Glapple.Runner"] || {};
  var exports = $PS["Graphics.Glapple.Runner"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Set = $PS["Data.Set"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Graphics_Glapple_Data_Complex = $PS["Graphics.Glapple.Data.Complex"];
  var Graphics_Glapple_Data_Emitter = $PS["Graphics.Glapple.Data.Emitter"];
  var Graphics_Glapple_Data_Hooks = $PS["Graphics.Glapple.Data.Hooks"];
  var Graphics_Glapple_Data_KeyEvent = $PS["Graphics.Glapple.Data.KeyEvent"];
  var Graphics_Glapple_Data_Sprite = $PS["Graphics.Glapple.Data.Sprite"];
  var Graphics_Glapple_Data_Transform = $PS["Graphics.Glapple.Data.Transform"];
  var Graphics_Glapple_Util = $PS["Graphics.Glapple.Util"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLCanvasElement = $PS["Web.HTML.HTMLCanvasElement"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var Web_UIEvent_KeyboardEvent = $PS["Web.UIEvent.KeyboardEvent"];
  var Web_UIEvent_KeyboardEvent_EventTypes = $PS["Web.UIEvent.KeyboardEvent.EventTypes"];
  var Web_UIEvent_MouseEvent = $PS["Web.UIEvent.MouseEvent"];
  var Web_UIEvent_MouseEvent_EventTypes = $PS["Web.UIEvent.MouseEvent.EventTypes"];                
  var runGame = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return function (props) {
                  return function __do() {
                      var rendererEmitter = Graphics_Glapple_Data_Emitter.newEmitter(Effect_Class.monadEffectEffect)();
                      var hoverEmitter = Graphics_Glapple_Data_Emitter.newEmitter(Effect_Class.monadEffectEffect)();
                      var finalizeEmitter = Graphics_Glapple_Data_Emitter.newEmitter(Effect_Class.monadEffectEffect)();
                      var keyEmitter = Graphics_Glapple_Data_Emitter.newEmitter(Effect_Class.monadEffectEffect)();
                      var keyStateRef = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Ref["new"](Data_Set.empty))();
                      var mouseStateRef = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Ref["new"](v.initMousePosition))();
                      var componentTransform = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Ref["new"](Graphics_Glapple_Data_Transform.unitTransform))();
                      Graphics_Glapple_Data_Hooks.runHooks({
                          rendererEmitter: rendererEmitter,
                          finalizeEmitter: finalizeEmitter,
                          hoverEmitter: hoverEmitter,
                          keyEmitter: keyEmitter,
                          keyStateRef: keyStateRef,
                          mouseStateRef: mouseStateRef,
                          componentTransform: componentTransform,
                          parentTransform: Control_Applicative.pure(Effect.applicativeEffect)(Graphics_Glapple_Data_Transform.unitTransform)
                      })(v1(props))();
                      var subCanvas = Graphics_Glapple_Util.createCanvasElement();
                      var ctx = Graphics_Canvas.getContext2D(v.canvas)();
                      var subCtx = Graphics_Canvas.getContext2D(subCanvas)();
                      Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(function __do() {
                          Graphics_Canvas.setCanvasHeight(v.canvas)(v.height)();
                          Graphics_Canvas.setCanvasWidth(v.canvas)(v.width)();
                          Graphics_Canvas.setCanvasHeight(subCanvas)(v.height)();
                          return Graphics_Canvas.setCanvasWidth(subCanvas)(v.width)();
                      })();
                      var win = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
                      var keyDownHandler = Web_Event_EventTarget.eventListener(function (e) {
                          var v2 = Web_UIEvent_KeyboardEvent.fromEvent(e);
                          if (v2 instanceof Data_Maybe.Just && !Web_UIEvent_KeyboardEvent.repeat(v2.value0)) {
                              return function __do() {
                                  Graphics_Glapple_Data_Emitter.emit(Effect_Class.monadEffectEffect)(Control_Monad_Rec_Class.monadRecEffect)(keyEmitter)(new Graphics_Glapple_Data_KeyEvent.KeyDown(new Graphics_Glapple_Data_KeyEvent.Keyboard(Web_UIEvent_KeyboardEvent.code(v2.value0))))();
                                  return Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Ref.modify_(Data_Set.insert(Graphics_Glapple_Data_KeyEvent.ordKeyCode)(new Graphics_Glapple_Data_KeyEvent.Keyboard(Web_UIEvent_KeyboardEvent.code(v2.value0))))(keyStateRef))();
                              };
                          };
                          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                      })();
                      Web_Event_EventTarget.addEventListener(Web_UIEvent_KeyboardEvent_EventTypes.keydown)(keyDownHandler)(false)(win)();
                      var keyUpHandler = Web_Event_EventTarget.eventListener(function (e) {
                          var v2 = Web_UIEvent_KeyboardEvent.fromEvent(e);
                          if (v2 instanceof Data_Maybe.Just && !Web_UIEvent_KeyboardEvent.repeat(v2.value0)) {
                              return function __do() {
                                  Graphics_Glapple_Data_Emitter.emit(Effect_Class.monadEffectEffect)(Control_Monad_Rec_Class.monadRecEffect)(keyEmitter)(new Graphics_Glapple_Data_KeyEvent.KeyUp(new Graphics_Glapple_Data_KeyEvent.Keyboard(Web_UIEvent_KeyboardEvent.code(v2.value0))))();
                                  return Effect_Ref.modify_(Data_Set["delete"](Graphics_Glapple_Data_KeyEvent.ordKeyCode)(new Graphics_Glapple_Data_KeyEvent.Keyboard(Web_UIEvent_KeyboardEvent.code(v2.value0))))(keyStateRef)();
                              };
                          };
                          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                      })();
                      Web_Event_EventTarget.addEventListener(Web_UIEvent_KeyboardEvent_EventTypes.keyup)(keyUpHandler)(false)(win)();
                      var element = Web_HTML_HTMLCanvasElement.toElement(v.canvas);
                      var mouseDownHandler = Web_Event_EventTarget.eventListener(function (e) {
                          var v2 = Web_UIEvent_MouseEvent.fromEvent(e);
                          if (v2 instanceof Data_Maybe.Just) {
                              var button = (function () {
                                  var v3 = Web_UIEvent_MouseEvent.button(v2.value0);
                                  if (v3 === 0) {
                                      return new Data_Maybe.Just(Graphics_Glapple_Data_KeyEvent.Left.value);
                                  };
                                  if (v3 === 1) {
                                      return new Data_Maybe.Just(Graphics_Glapple_Data_KeyEvent.Middle.value);
                                  };
                                  if (v3 === 2) {
                                      return new Data_Maybe.Just(Graphics_Glapple_Data_KeyEvent.Right.value);
                                  };
                                  return Data_Maybe.Nothing.value;
                              })();
                              if (button instanceof Data_Maybe.Just) {
                                  return function __do() {
                                      Graphics_Glapple_Data_Emitter.emit(Effect_Class.monadEffectEffect)(Control_Monad_Rec_Class.monadRecEffect)(keyEmitter)(new Graphics_Glapple_Data_KeyEvent.KeyDown(new Graphics_Glapple_Data_KeyEvent.Mouse(button.value0)))();
                                      return Effect_Ref.modify_(Data_Set.insert(Graphics_Glapple_Data_KeyEvent.ordKeyCode)(new Graphics_Glapple_Data_KeyEvent.Mouse(button.value0)))(keyStateRef)();
                                  };
                              };
                              if (button instanceof Data_Maybe.Nothing) {
                                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                              };
                              throw new Error("Failed pattern match at Graphics.Glapple.Runner (line 118, column 9 - line 122, column 31): " + [ button.constructor.name ]);
                          };
                          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                      })();
                      Web_Event_EventTarget.addEventListener(Web_UIEvent_MouseEvent_EventTypes.mousedown)(mouseDownHandler)(false)(win)();
                      var mouseUpHandler = Web_Event_EventTarget.eventListener(function (e) {
                          var v2 = Web_UIEvent_MouseEvent.fromEvent(e);
                          if (v2 instanceof Data_Maybe.Just) {
                              var button = (function () {
                                  var v3 = Web_UIEvent_MouseEvent.button(v2.value0);
                                  if (v3 === 0) {
                                      return new Data_Maybe.Just(Graphics_Glapple_Data_KeyEvent.Left.value);
                                  };
                                  if (v3 === 1) {
                                      return new Data_Maybe.Just(Graphics_Glapple_Data_KeyEvent.Middle.value);
                                  };
                                  if (v3 === 2) {
                                      return new Data_Maybe.Just(Graphics_Glapple_Data_KeyEvent.Right.value);
                                  };
                                  return Data_Maybe.Nothing.value;
                              })();
                              if (button instanceof Data_Maybe.Just) {
                                  return function __do() {
                                      Graphics_Glapple_Data_Emitter.emit(Effect_Class.monadEffectEffect)(Control_Monad_Rec_Class.monadRecEffect)(keyEmitter)(new Graphics_Glapple_Data_KeyEvent.KeyUp(new Graphics_Glapple_Data_KeyEvent.Mouse(button.value0)))();
                                      return Effect_Ref.modify_(Data_Set["delete"](Graphics_Glapple_Data_KeyEvent.ordKeyCode)(new Graphics_Glapple_Data_KeyEvent.Mouse(button.value0)))(keyStateRef)();
                                  };
                              };
                              if (button instanceof Data_Maybe.Nothing) {
                                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                              };
                              throw new Error("Failed pattern match at Graphics.Glapple.Runner (line 134, column 9 - line 138, column 31): " + [ button.constructor.name ]);
                          };
                          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                      })();
                      Web_Event_EventTarget.addEventListener(Web_UIEvent_MouseEvent_EventTypes.mouseup)(mouseUpHandler)(false)(win)();
                      var mouseMoveHandler = Web_Event_EventTarget.eventListener(function (e) {
                          var v2 = Web_UIEvent_MouseEvent.fromEvent(e);
                          if (v2 instanceof Data_Maybe.Just) {
                              return function __do() {
                                  var v3 = Web_HTML_HTMLElement.getBoundingClientRect(Web_HTML_HTMLCanvasElement.toHTMLElement(v.canvas))();
                                  var mouseY = Data_Int.toNumber(Web_UIEvent_MouseEvent.clientY(v2.value0)) - v3.top;
                                  var mouseX = Data_Int.toNumber(Web_UIEvent_MouseEvent.clientX(v2.value0)) - v3.left;
                                  var h = Web_DOM_Element.clientHeight(element)();
                                  var w = Web_DOM_Element.clientWidth(element)();
                                  var scaleW = w / v.width;
                                  var x = mouseX / scaleW;
                                  var scaleH = h / v.height;
                                  var y = mouseY / scaleH;
                                  return Effect_Ref.write(Graphics_Glapple_Data_Complex.complex(x)(y))(mouseStateRef)();
                              };
                          };
                          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                      })();
                      Web_Event_EventTarget.addEventListener(Web_UIEvent_MouseEvent_EventTypes.mousemove)(mouseMoveHandler)(false)(win)();
                      return Effect_Aff.launchAff_(Control_Bind.bind(Effect_Aff.bindAff)(Graphics_Glapple_Data_Sprite.loadSprites(dictOrd)(v.sprites))(function (spriteMap) {
                          var images = function (key) {
                              return Data_Map_Internal.lookup(dictOrd)(key)(spriteMap);
                          };
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(Graphics_Glapple_Util.getNowTime)))(function (deltaTimeRef) {
                              return Control_Monad_Rec_Class.forever(Effect_Aff.monadRecAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Graphics_Glapple_Util.getNowTime))(function (procStart) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(deltaTimeRef)))(function (prevTime) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write(procStart)(deltaTimeRef)))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Graphics_Canvas.clearRect(subCtx)({
                                              x: 0.0,
                                              y: 0.0,
                                              height: v.height,
                                              width: v.width
                                          })))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Graphics_Glapple_Data_Emitter.emit(Effect_Class.monadEffectEffect)(Control_Monad_Rec_Class.monadRecEffect)(rendererEmitter)({
                                                  deltaTime: procStart - prevTime,
                                                  ctx: subCtx,
                                                  canvasImageSources: images
                                              })))(function () {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Graphics_Canvas.clearRect(ctx)({
                                                      x: 0.0,
                                                      y: 0.0,
                                                      height: v.height,
                                                      width: v.width
                                                  })))(function () {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Graphics_Canvas.drawImage(ctx)(Graphics_Canvas.canvasElementToImageSource(subCanvas))(0.0)(0.0)))(function () {
                                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(mouseStateRef)))(function (mousePos) {
                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Graphics_Glapple_Data_Emitter.emit(Effect_Class.monadEffectEffect)(Control_Monad_Rec_Class.monadRecEffect)(hoverEmitter)(mousePos)))(function () {
                                                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Graphics_Glapple_Util.getNowTime))(function (procEnd) {
                                                                      return Effect_Aff_Class.liftAff(Effect_Aff_Class.monadAffAff)(Effect_Aff.delay(Data_Ord.max(Data_Ord.ordNumber)(0.0)(1000.0 * ((1.0 / v.fps - procEnd) + procStart))));
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              }));
                          });
                      }))();
                  };
              };
          };
      };
  };
  exports["runGame"] = runGame;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Components_Root = $PS["Components.Root"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Graphics_Glapple_Data_Complex = $PS["Graphics.Glapple.Data.Complex"];
  var Graphics_Glapple_Runner = $PS["Graphics.Glapple.Runner"];
  var Sprites = $PS["Sprites"];                
  var main = function __do() {
      var canvas = Control_Bind.bindFlipped(Effect.bindEffect)(Data_Maybe.maybe(Effect_Exception["throw"]("Can not find canvas element"))(Control_Applicative.pure(Effect.applicativeEffect)))(Graphics_Canvas.getCanvasElementById("canvas"))();
      return Graphics_Glapple_Runner.runGame(Data_Ord.ordUnit)({
          canvas: canvas,
          height: 500.0,
          width: 500.0,
          fps: 60.0,
          sprites: Sprites.sprites,
          initMousePosition: Graphics_Glapple_Data_Complex.complex(0.0)(0.0)
      })(Components_Root.root)({})();
  };
  exports["main"] = main;
})(PS);
PS["Main"].main();