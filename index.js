// Generated by purs bundle 0.14.5
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
  exports.ordStringImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var eqUnit = {
      eq: function (v) {
          return function (v1) {
              return true;
          };
      }
  };
  var eqString = {
      eq: $foreign.eqStringImpl
  };
  var eqNumber = {
      eq: $foreign.eqNumberImpl
  };
  var eqInt = {
      eq: $foreign.eqIntImpl
  };
  var eq = function (dict) {
      return dict.eq;
  };
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqString"] = eqString;
  exports["eqUnit"] = eqUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var ordString = {
      compare: $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqString;
      }
  };
  var ordNumber = {
      compare: $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqNumber;
      }
  };
  var ordInt = {
      compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqInt;
      }
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  exports["compare"] = compare;
  exports["min"] = min;
  exports["max"] = max;
  exports["clamp"] = clamp;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var top = function (dict) {
      return dict.top;
  };
  var boundedInt = {
      top: $foreign.topInt,
      bottom: $foreign.bottomInt,
      Ord0: function () {
          return Data_Ord.ordInt;
      }
  };
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                         
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Just) {
                  return new Just(v(v1.value0));
              };
              return Nothing.value;
          };
      }
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var eqMaybe = function (dictEq) {
      return {
          eq: function (x) {
              return function (y) {
                  if (x instanceof Nothing && y instanceof Nothing) {
                      return true;
                  };
                  if (x instanceof Just && y instanceof Just) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                  };
                  return false;
              };
          }
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.isFinite = isFinite;
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.floor = Math.floor;

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };

  exports.round = Math.round;  

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["floor"] = $foreign.floor;
  exports["round"] = $foreign.round;
  exports["remainder"] = $foreign.remainder;
  exports["pi"] = $foreign.pi;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];         
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["floor"] = floor;
  exports["round"] = round;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var showNumber = {
      show: $foreign.showNumberImpl
  };
  var showInt = {
      show: $foreign.showIntImpl
  };
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Color"] = $PS["Color"] || {};
  var exports = $PS["Color"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Int = $PS["Data.Int"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var $$Math = $PS["Math"];
  var HSLA = (function () {
      function HSLA(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      HSLA.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new HSLA(value0, value1, value2, value3);
                  };
              };
          };
      };
      return HSLA;
  })();
  var modPos = function (x) {
      return function (y) {
          return $$Math.remainder($$Math.remainder(x)(y) + y)(y);
      };
  };
  var rgba = function (red$prime) {
      return function (green$prime) {
          return function (blue$prime) {
              return function (alpha) {
                  var red = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(red$prime);
                  var r = Data_Int.toNumber(red) / 255.0;
                  var green = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(green$prime);
                  var g = Data_Int.toNumber(green) / 255.0;
                  var blue = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(blue$prime);
                  var maxChroma = Data_Ord.max(Data_Ord.ordInt)(Data_Ord.max(Data_Ord.ordInt)(red)(green))(blue);
                  var minChroma = Data_Ord.min(Data_Ord.ordInt)(Data_Ord.min(Data_Ord.ordInt)(red)(green))(blue);
                  var chroma = maxChroma - minChroma | 0;
                  var chroma$prime = Data_Int.toNumber(chroma) / 255.0;
                  var lightness = Data_Int.toNumber(maxChroma + minChroma | 0) / (255.0 * 2.0);
                  var saturation = (function () {
                      if (chroma === 0) {
                          return 0.0;
                      };
                      if (Data_Boolean.otherwise) {
                          return chroma$prime / (1.0 - $$Math.abs(2.0 * lightness - 1.0));
                      };
                      throw new Error("Failed pattern match at Color (line 157, column 5 - line 158, column 75): " + [  ]);
                  })();
                  var b = Data_Int.toNumber(blue) / 255.0;
                  var hue$prime = function (v) {
                      if (v === 0) {
                          return 0.0;
                      };
                      if (maxChroma === red) {
                          return modPos((g - b) / chroma$prime)(6.0);
                      };
                      if (maxChroma === green) {
                          return (b - r) / chroma$prime + 2.0;
                      };
                      if (Data_Boolean.otherwise) {
                          return (r - g) / chroma$prime + 4.0;
                      };
                      throw new Error("Failed pattern match at Color (line 148, column 5 - line 148, column 17): " + [ v.constructor.name ]);
                  };
                  var hue = 60.0 * hue$prime(chroma);
                  return new HSLA(hue, saturation, lightness, alpha);
              };
          };
      };
  };
  var rgba$prime = function (r) {
      return function (g) {
          return function (b) {
              return function (a) {
                  return rgba(Data_Int.round(r * 255.0))(Data_Int.round(g * 255.0))(Data_Int.round(b * 255.0))(a);
              };
          };
      };
  };
  var rgb$prime = function (r) {
      return function (g) {
          return function (b) {
              return rgba$prime(r)(g)(b)(1.0);
          };
      };
  };                                   
  var clipHue = function (v) {
      var $65 = 360.0 === v;
      if ($65) {
          return v;
      };
      return modPos(v)(360.0);
  };
  var toRGBA$prime = function (v) {
      var h$prime = clipHue(v.value0) / 60.0;
      var chr = (1.0 - $$Math.abs(2.0 * v.value2 - 1.0)) * v.value1;
      var m = v.value2 - chr / 2.0;
      var x = chr * (1.0 - $$Math.abs($$Math.remainder(h$prime)(2.0) - 1.0));
      var col = (function () {
          if (h$prime < 1.0) {
              return {
                  r: chr,
                  g: x,
                  b: 0.0
              };
          };
          if (1.0 <= h$prime && h$prime < 2.0) {
              return {
                  r: x,
                  g: chr,
                  b: 0.0
              };
          };
          if (2.0 <= h$prime && h$prime < 3.0) {
              return {
                  r: 0.0,
                  g: chr,
                  b: x
              };
          };
          if (3.0 <= h$prime && h$prime < 4.0) {
              return {
                  r: 0.0,
                  g: x,
                  b: chr
              };
          };
          if (4.0 <= h$prime && h$prime < 5.0) {
              return {
                  r: x,
                  g: 0.0,
                  b: chr
              };
          };
          if (Data_Boolean.otherwise) {
              return {
                  r: chr,
                  g: 0.0,
                  b: x
              };
          };
          throw new Error("Failed pattern match at Color (line 342, column 5 - line 347, column 61): " + [  ]);
      })();
      return {
          r: col.r + m,
          g: col.g + m,
          b: col.b + m,
          a: v.value3
      };
  };
  var toRGBA = function (col) {
      var c = toRGBA$prime(col);
      var g = Data_Int.round(255.0 * c.g);
      var r = Data_Int.round(255.0 * c.r);
      var b = Data_Int.round(255.0 * c.b);
      return {
          r: r,
          g: g,
          b: b,
          a: c.a
      };
  };
  var cssStringRGBA = function (col) {
      var c = toRGBA(col);
      var green = Data_Show.show(Data_Show.showInt)(c.g);
      var red = Data_Show.show(Data_Show.showInt)(c.r);
      var blue = Data_Show.show(Data_Show.showInt)(c.b);
      var alpha = Data_Show.show(Data_Show.showNumber)(c.a);
      var $92 = c.a === 1.0;
      if ($92) {
          return "rgb(" + (red + (", " + (green + (", " + (blue + ")")))));
      };
      return "rgba(" + (red + (", " + (green + (", " + (blue + (", " + (alpha + ")")))))));
  };
  exports["rgba'"] = rgba$prime;
  exports["rgb'"] = rgb$prime;
  exports["cssStringRGBA"] = cssStringRGBA;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorArray = {
      map: $foreign.arrayMap
  };
  exports["map"] = map;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var applyArray = {
      apply: $foreign.arrayApply,
      Functor0: function () {
          return Data_Functor.functorArray;
      }
  };
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var applicativeArray = {
      pure: function (x) {
          return [ x ];
      },
      Apply0: function () {
          return Control_Apply.applyArray;
      }
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];          
  var discard = function (dict) {
      return dict.discard;
  };
  var bindArray = {
      bind: $foreign.arrayBind,
      Apply0: function () {
          return Control_Apply.applyArray;
      }
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var discardUnit = {
      discard: function (dictBind) {
          return bind(dictBind);
      }
  };
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var liftM1 = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(f(a$prime));
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["liftM1"] = liftM1;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  exports["Left"] = Left;
  exports["Right"] = Right;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $21 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($22) {
                  return $21(Data_Either.Left.create($22));
              };
          })());
      };
  };
  exports["try"] = $$try;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];                  
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Rec.Class"] = $PS["Control.Monad.Rec.Class"] || {};
  var exports = $PS["Control.Monad.Rec.Class"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];                
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var monadRecEffect = {
      tailRecM: function (f) {
          return function (a) {
              var fromDone = function (v) {
                  if (v instanceof Done) {
                      return v.value0;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 113, column 30 - line 113, column 44): " + [ v.constructor.name ]);
              };
              return function __do() {
                  var r = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
                  (function () {
                      while (!(function __do() {
                          var v = Effect_Ref.read(r)();
                          if (v instanceof Loop) {
                              var e = f(v.value0)();
                              Effect_Ref.write(e)(r)();
                              return false;
                          };
                          if (v instanceof Done) {
                              return true;
                          };
                          throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 104, column 22 - line 109, column 28): " + [ v.constructor.name ]);
                      })()) {

                      };
                      return {};
                  })();
                  return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(r))();
              };
          };
      },
      Monad0: function () {
          return Effect.monadEffect;
      }
  };
  var forever = function (dictMonadRec) {
      return function (ma) {
          return tailRecM(dictMonadRec)(function (u) {
              return Data_Functor.voidRight((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(new Loop(u))(ma);
          })(Data_Unit.unit);
      };
  };
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["tailRecM"] = tailRecM;
  exports["forever"] = forever;
  exports["monadRecEffect"] = monadRecEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];              
  var bimap = function (dict) {
      return dict.bimap;
  };
  var bifunctorEither = {
      bimap: function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Data_Either.Left) {
                      return new Data_Either.Left(v(v2.value0));
                  };
                  if (v2 instanceof Data_Either.Right) {
                      return new Data_Either.Right(v1(v2.value0));
                  };
                  throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      }
  };
  exports["bimap"] = bimap;
  exports["bifunctorEither"] = bifunctorEither;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Exists"] = $PS["Data.Exists"] || {};
  var exports = $PS["Data.Exists"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Free.Trans"] = $PS["Control.Monad.Free.Trans"] || {};
  var exports = $PS["Control.Monad.Free.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];                      
  var Bound = (function () {
      function Bound(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bound.create = function (value0) {
          return function (value1) {
              return new Bound(value0, value1);
          };
      };
      return Bound;
  })();
  var FreeT = (function () {
      function FreeT(value0) {
          this.value0 = value0;
      };
      FreeT.create = function (value0) {
          return new FreeT(value0);
      };
      return FreeT;
  })();
  var Bind = (function () {
      function Bind(value0) {
          this.value0 = value0;
      };
      Bind.create = function (value0) {
          return new Bind(value0);
      };
      return Bind;
  })();
  var monadTransFreeT = function (dictFunctor) {
      return {
          lift: function (dictMonad) {
              return function (ma) {
                  return new FreeT(function (v) {
                      return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Either.Left.create)(ma);
                  });
              };
          }
      };
  };                       
  var bound = function (m) {
      return function (f) {
          return new Bind(Data_Exists.mkExists(new Bound(m, f)));
      };
  };
  var functorFreeT = function (dictFunctor) {
      return function (dictFunctor1) {
          return {
              map: function (f) {
                  return function (v) {
                      if (v instanceof FreeT) {
                          return new FreeT(function (v1) {
                              return Data_Functor.map(dictFunctor1)(Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither)(f)(Data_Functor.map(dictFunctor)(Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f))))(v.value0(Data_Unit.unit));
                          });
                      };
                      if (v instanceof Bind) {
                          return Data_Exists.runExists(function (v1) {
                              return bound(v1.value0)((function () {
                                  var $123 = Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f);
                                  return function ($124) {
                                      return $123(v1.value1($124));
                                  };
                              })());
                          })(v.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 61, column 1 - line 63, column 71): " + [ f.constructor.name, v.constructor.name ]);
                  };
              }
          };
      };
  };
  var monadFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return {
              Applicative0: function () {
                  return applicativeFreeT(dictFunctor)(dictMonad);
              },
              Bind1: function () {
                  return bindFreeT(dictFunctor)(dictMonad);
              }
          };
      };
  };
  var bindFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return {
              bind: function (v) {
                  return function (f) {
                      if (v instanceof Bind) {
                          return Data_Exists.runExists(function (v1) {
                              return bound(v1.value0)(function (x) {
                                  return bound(function (v2) {
                                      return v1.value1(x);
                                  })(f);
                              });
                          })(v.value0);
                      };
                      return bound(function (v1) {
                          return v;
                      })(f);
                  };
              },
              Apply0: function () {
                  return applyFreeT(dictFunctor)(dictMonad);
              }
          };
      };
  };
  var applyFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return {
              apply: Control_Monad.ap(monadFreeT(dictFunctor)(dictMonad)),
              Functor0: function () {
                  return functorFreeT(dictFunctor)(((dictMonad.Bind1()).Apply0()).Functor0());
              }
          };
      };
  };
  var applicativeFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return {
              pure: function (a) {
                  return new FreeT(function (v) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(a));
                  });
              },
              Apply0: function () {
                  return applyFreeT(dictFunctor)(dictMonad);
              }
          };
      };
  };
  var resume = function (dictFunctor) {
      return function (dictMonadRec) {
          var go = function (v) {
              if (v instanceof FreeT) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(v.value0(Data_Unit.unit));
              };
              if (v instanceof Bind) {
                  return Data_Exists.runExists(function (v1) {
                      var v2 = v1.value0(Data_Unit.unit);
                      if (v2 instanceof FreeT) {
                          return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v2.value0(Data_Unit.unit))(function (v3) {
                              if (v3 instanceof Data_Either.Left) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(v1.value1(v3.value0)));
                              };
                              if (v3 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(new Data_Either.Right(Data_Functor.map(dictFunctor)(function (h) {
                                      return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(h)(v1.value1);
                                  })(v3.value0))));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 56, column 20 - line 58, column 67): " + [ v3.constructor.name ]);
                          });
                      };
                      if (v2 instanceof Bind) {
                          return Data_Exists.runExists(function (v3) {
                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value0(Data_Unit.unit))(function (z) {
                                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value1(z))(v1.value1);
                              })));
                          })(v2.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 54, column 5 - line 59, column 98): " + [ v2.constructor.name ]);
                  })(v.value0);
              };
              throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 51, column 3 - line 51, column 75): " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  var runFreeT = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (interp) {
              var go = function (v) {
                  if (v instanceof Data_Either.Left) {
                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(v.value0));
                  };
                  if (v instanceof Data_Either.Right) {
                      return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(interp(v.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 143, column 3 - line 143, column 63): " + [ v.constructor.name ]);
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(Control_Bind.composeKleisliFlipped((dictMonadRec.Monad0()).Bind1())(go)(resume(dictFunctor)(dictMonadRec)));
          };
      };
  };
  var monadRecFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return {
              tailRecM: function (f) {
                  var go = function (s) {
                      return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonad))(f(s))(function (v) {
                          if (v instanceof Control_Monad_Rec_Class.Loop) {
                              return go(v.value0);
                          };
                          if (v instanceof Control_Monad_Rec_Class.Done) {
                              return Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(v.value0);
                          };
                          throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 84, column 15 - line 86, column 25): " + [ v.constructor.name ]);
                      });
                  };
                  return go;
              },
              Monad0: function () {
                  return monadFreeT(dictFunctor)(dictMonad);
              }
          };
      };
  };
  exports["runFreeT"] = runFreeT;
  exports["monadTransFreeT"] = monadTransFreeT;
  exports["monadRecFreeT"] = monadRecFreeT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Maybe.Trans"] = $PS["Control.Monad.Maybe.Trans"] || {};
  var exports = $PS["Control.Monad.Maybe.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];                    
  var MaybeT = function (x) {
      return x;
  };
  var runMaybeT = function (v) {
      return v;
  };
  var monadTransMaybeT = {
      lift: function (dictMonad) {
          var $72 = Control_Monad.liftM1(dictMonad)(Data_Maybe.Just.create);
          return function ($73) {
              return MaybeT($72($73));
          };
      }
  };
  var functorMaybeT = function (dictFunctor) {
      return {
          map: function (f) {
              return function (v) {
                  return Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v);
              };
          }
      };
  };
  var monadMaybeT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeMaybeT(dictMonad);
          },
          Bind1: function () {
              return bindMaybeT(dictMonad);
          }
      };
  };
  var bindMaybeT = function (dictMonad) {
      return {
          bind: function (v) {
              return function (f) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          var v2 = f(v1.value0);
                          return v2;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 55, column 11 - line 57, column 42): " + [ v1.constructor.name ]);
                  });
              };
          },
          Apply0: function () {
              return applyMaybeT(dictMonad);
          }
      };
  };
  var applyMaybeT = function (dictMonad) {
      return {
          apply: Control_Monad.ap(monadMaybeT(dictMonad)),
          Functor0: function () {
              return functorMaybeT(((dictMonad.Bind1()).Apply0()).Functor0());
          }
      };
  };
  var applicativeMaybeT = function (dictMonad) {
      return {
          pure: (function () {
              var $74 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($75) {
                  return MaybeT($74(Data_Maybe.Just.create($75)));
              };
          })(),
          Apply0: function () {
              return applyMaybeT(dictMonad);
          }
      };
  };
  exports["MaybeT"] = MaybeT;
  exports["runMaybeT"] = runMaybeT;
  exports["applicativeMaybeT"] = applicativeMaybeT;
  exports["bindMaybeT"] = bindMaybeT;
  exports["monadMaybeT"] = monadMaybeT;
  exports["monadTransMaybeT"] = monadTransMaybeT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Reader.Class"] = $PS["Control.Monad.Reader.Class"] || {};
  var exports = $PS["Control.Monad.Reader.Class"];
  var ask = function (dict) {
      return dict.ask;
  };
  exports["ask"] = ask;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Reader.Trans"] = $PS["Control.Monad.Reader.Trans"] || {};
  var exports = $PS["Control.Monad.Reader.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var ReaderT = function (x) {
      return x;
  };
  var runReaderT = function (v) {
      return v;
  };
  var monadTransReaderT = {
      lift: function (dictMonad) {
          return function ($64) {
              return ReaderT(Data_Function["const"]($64));
          };
      }
  };
  var mapReaderT = function (f) {
      return function (v) {
          return function ($65) {
              return f(v($65));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return {
          map: (function () {
              var $66 = Data_Functor.map(dictFunctor);
              return function ($67) {
                  return mapReaderT($66($67));
              };
          })()
      };
  };
  var applyReaderT = function (dictApply) {
      return {
          apply: function (v) {
              return function (v1) {
                  return function (r) {
                      return Control_Apply.apply(dictApply)(v(r))(v1(r));
                  };
              };
          },
          Functor0: function () {
              return functorReaderT(dictApply.Functor0());
          }
      };
  };
  var bindReaderT = function (dictBind) {
      return {
          bind: function (v) {
              return function (k) {
                  return function (r) {
                      return Control_Bind.bind(dictBind)(v(r))(function (a) {
                          var v1 = k(a);
                          return v1(r);
                      });
                  };
              };
          },
          Apply0: function () {
              return applyReaderT(dictBind.Apply0());
          }
      };
  };
  var applicativeReaderT = function (dictApplicative) {
      return {
          pure: (function () {
              var $71 = Control_Applicative.pure(dictApplicative);
              return function ($72) {
                  return ReaderT(Data_Function["const"]($71($72)));
              };
          })(),
          Apply0: function () {
              return applyReaderT(dictApplicative.Apply0());
          }
      };
  };
  var monadReaderT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeReaderT(dictMonad.Applicative0());
          },
          Bind1: function () {
              return bindReaderT(dictMonad.Bind1());
          }
      };
  };
  var monadAskReaderT = function (dictMonad) {
      return {
          ask: Control_Applicative.pure(dictMonad.Applicative0()),
          Monad0: function () {
              return monadReaderT(dictMonad);
          }
      };
  };
  exports["runReaderT"] = runReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadReaderT"] = monadReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadAskReaderT"] = monadAskReaderT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Parallel.Class"] = $PS["Control.Parallel.Class"] || {};
  var exports = $PS["Control.Parallel.Class"];
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function (dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
      }
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Parallel"] = $PS["Control.Parallel"] || {};
  var exports = $PS["Control.Parallel"];
  var Control_Category = $PS["Control.Category"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Foldable = $PS["Data.Foldable"];                      
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              var $17 = Control_Parallel_Class.sequential(dictParallel);
              var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)((function () {
                  var $20 = Control_Parallel_Class.parallel(dictParallel);
                  return function ($21) {
                      return $20(f($21));
                  };
              })());
              return function ($19) {
                  return $17($18($19));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["parSequence_"] = parSequence_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var functorIdentity = {
      map: function (f) {
          return function (m) {
              return f(m);
          };
      }
  };
  exports["functorIdentity"] = functorIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var over = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return Safe_Coerce.coerce();
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["over"] = over;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Safely"] = $PS["Control.Safely"] || {};
  var exports = $PS["Control.Safely"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Free_Trans = $PS["Control.Monad.Free.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var safely = function (dictMonadRec) {
      return function (f) {
          var lower = function (dictMonadRec1) {
              return Control_Monad_Free_Trans.runFreeT(Data_Identity.functorIdentity)(dictMonadRec1)((function () {
                  var $17 = Control_Applicative.pure((dictMonadRec1.Monad0()).Applicative0());
                  var $18 = Data_Newtype.unwrap();
                  return function ($19) {
                      return $17($18($19));
                  };
              })());
          };
          return lower(dictMonadRec)(f(Control_Monad_Free_Trans.monadRecFreeT(Data_Identity.functorIdentity)(dictMonadRec.Monad0()))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Data_Identity.functorIdentity))(dictMonadRec.Monad0()))(lower(dictMonadRec)));
      };
  };
  var traverse_ = function (dictFoldable) {
      return function (dictMonadRec) {
          return function (f) {
              return function (xs) {
                  return safely(dictMonadRec)(function (dictMonadRec1) {
                      return function (lift) {
                          return function (v) {
                              return Data_Foldable.traverse_((dictMonadRec1.Monad0()).Applicative0())(dictFoldable)(function ($20) {
                                  return lift(f($20));
                              })(xs);
                          };
                      };
                  });
              };
          };
      };
  };
  var for_ = function (dictFoldable) {
      return function (dictMonadRec) {
          return Data_Function.flip(traverse_(dictFoldable)(dictMonadRec));
      };
  };
  exports["for_"] = for_;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unconsImpl = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var uncons = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var singleton = function (a) {
      return [ a ];
  };
  var fold = function (dictMonoid) {
      return Data_Foldable.fold(Data_Foldable.foldableArray)(dictMonoid);
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $109 = Data_Maybe.maybe([  ])(singleton);
          return function ($110) {
              return $109(f($110));
          };
      })());
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["uncons"] = uncons;
  exports["catMaybes"] = catMaybes;
  exports["fold"] = fold;
  exports["range"] = $foreign.range;
})(PS);
(function(exports) {
  "use strict";

  var createDate = function (y, m, d) {
    var date = new Date(Date.UTC(y, m, d));
    if (y >= 0 && y < 100) {
      date.setUTCFullYear(y);
    }
    return date;
  };

  exports.canonicalDateImpl = function (ctor, y, m, d) {
    var date = createDate(y, m - 1, d);
    return ctor(date.getUTCFullYear())(date.getUTCMonth() + 1)(date.getUTCDate());
  };
})(PS["Data.Date"] = PS["Data.Date"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Date.Component"] = $PS["Data.Date.Component"] || {};
  var exports = $PS["Data.Date.Component"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ordering = $PS["Data.Ordering"];
  var January = (function () {
      function January() {

      };
      January.value = new January();
      return January;
  })();
  var February = (function () {
      function February() {

      };
      February.value = new February();
      return February;
  })();
  var March = (function () {
      function March() {

      };
      March.value = new March();
      return March;
  })();
  var April = (function () {
      function April() {

      };
      April.value = new April();
      return April;
  })();
  var May = (function () {
      function May() {

      };
      May.value = new May();
      return May;
  })();
  var June = (function () {
      function June() {

      };
      June.value = new June();
      return June;
  })();
  var July = (function () {
      function July() {

      };
      July.value = new July();
      return July;
  })();
  var August = (function () {
      function August() {

      };
      August.value = new August();
      return August;
  })();
  var September = (function () {
      function September() {

      };
      September.value = new September();
      return September;
  })();
  var October = (function () {
      function October() {

      };
      October.value = new October();
      return October;
  })();
  var November = (function () {
      function November() {

      };
      November.value = new November();
      return November;
  })();
  var December = (function () {
      function December() {

      };
      December.value = new December();
      return December;
  })();
  var eqMonth = {
      eq: function (x) {
          return function (y) {
              if (x instanceof January && y instanceof January) {
                  return true;
              };
              if (x instanceof February && y instanceof February) {
                  return true;
              };
              if (x instanceof March && y instanceof March) {
                  return true;
              };
              if (x instanceof April && y instanceof April) {
                  return true;
              };
              if (x instanceof May && y instanceof May) {
                  return true;
              };
              if (x instanceof June && y instanceof June) {
                  return true;
              };
              if (x instanceof July && y instanceof July) {
                  return true;
              };
              if (x instanceof August && y instanceof August) {
                  return true;
              };
              if (x instanceof September && y instanceof September) {
                  return true;
              };
              if (x instanceof October && y instanceof October) {
                  return true;
              };
              if (x instanceof November && y instanceof November) {
                  return true;
              };
              if (x instanceof December && y instanceof December) {
                  return true;
              };
              return false;
          };
      }
  };
  var ordMonth = {
      compare: function (x) {
          return function (y) {
              if (x instanceof January && y instanceof January) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof January) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof January) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof February && y instanceof February) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof February) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof February) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof March && y instanceof March) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof March) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof March) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof April && y instanceof April) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof April) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof April) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof May && y instanceof May) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof May) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof May) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof June && y instanceof June) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof June) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof June) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof July && y instanceof July) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof July) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof July) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof August && y instanceof August) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof August) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof August) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof September && y instanceof September) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof September) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof September) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof October && y instanceof October) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof October) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof October) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof November && y instanceof November) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof November) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof November) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof December && y instanceof December) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Data.Date.Component (line 61, column 1 - line 61, column 38): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqMonth;
      }
  };
  var boundedMonth = {
      bottom: January.value,
      top: December.value,
      Ord0: function () {
          return ordMonth;
      }
  };
  var boundedEnumMonth = {
      cardinality: 12,
      toEnum: function (v) {
          if (v === 1) {
              return new Data_Maybe.Just(January.value);
          };
          if (v === 2) {
              return new Data_Maybe.Just(February.value);
          };
          if (v === 3) {
              return new Data_Maybe.Just(March.value);
          };
          if (v === 4) {
              return new Data_Maybe.Just(April.value);
          };
          if (v === 5) {
              return new Data_Maybe.Just(May.value);
          };
          if (v === 6) {
              return new Data_Maybe.Just(June.value);
          };
          if (v === 7) {
              return new Data_Maybe.Just(July.value);
          };
          if (v === 8) {
              return new Data_Maybe.Just(August.value);
          };
          if (v === 9) {
              return new Data_Maybe.Just(September.value);
          };
          if (v === 10) {
              return new Data_Maybe.Just(October.value);
          };
          if (v === 11) {
              return new Data_Maybe.Just(November.value);
          };
          if (v === 12) {
              return new Data_Maybe.Just(December.value);
          };
          return Data_Maybe.Nothing.value;
      },
      fromEnum: function (v) {
          if (v instanceof January) {
              return 1;
          };
          if (v instanceof February) {
              return 2;
          };
          if (v instanceof March) {
              return 3;
          };
          if (v instanceof April) {
              return 4;
          };
          if (v instanceof May) {
              return 5;
          };
          if (v instanceof June) {
              return 6;
          };
          if (v instanceof July) {
              return 7;
          };
          if (v instanceof August) {
              return 8;
          };
          if (v instanceof September) {
              return 9;
          };
          if (v instanceof October) {
              return 10;
          };
          if (v instanceof November) {
              return 11;
          };
          if (v instanceof December) {
              return 12;
          };
          throw new Error("Failed pattern match at Data.Date.Component (line 87, column 14 - line 99, column 19): " + [ v.constructor.name ]);
      },
      Bounded0: function () {
          return boundedMonth;
      },
      Enum1: function () {
          return enumMonth;
      }
  };
  var enumMonth = {
      succ: (function () {
          var $58 = Data_Enum.toEnum(boundedEnumMonth);
          var $59 = Data_Enum.fromEnum(boundedEnumMonth);
          return function ($60) {
              return $58((function (v) {
                  return v + 1 | 0;
              })($59($60)));
          };
      })(),
      pred: (function () {
          var $61 = Data_Enum.toEnum(boundedEnumMonth);
          var $62 = Data_Enum.fromEnum(boundedEnumMonth);
          return function ($63) {
              return $61((function (v) {
                  return v - 1 | 0;
              })($62($63)));
          };
      })(),
      Ord0: function () {
          return ordMonth;
      }
  };
  exports["boundedEnumMonth"] = boundedEnumMonth;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Date"] = $PS["Data.Date"] || {};
  var exports = $PS["Data.Date"];
  var $foreign = $PS["Data.Date"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Maybe = $PS["Data.Maybe"];                                
  var $$Date = (function () {
      function $$Date(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      $$Date.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new $$Date(value0, value1, value2);
              };
          };
      };
      return $$Date;
  })();
  var canonicalDate = function (y) {
      return function (m) {
          return function (d) {
              var mkDate = function (y$prime) {
                  return function (m$prime) {
                      return function (d$prime) {
                          return new $$Date(y$prime, Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(m$prime)), d$prime);
                      };
                  };
              };
              return $foreign.canonicalDateImpl(mkDate, y, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(m), d);
          };
      };
  };
  exports["canonicalDate"] = canonicalDate;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.DateTime"] = $PS["Data.DateTime"] || {};
  var exports = $PS["Data.DateTime"];                                
  var DateTime = (function () {
      function DateTime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DateTime.create = function (value0) {
          return function (value1) {
              return new DateTime(value0, value1);
          };
      };
      return DateTime;
  })();
  var time = function (v) {
      return v.value1;
  };
  exports["DateTime"] = DateTime;
  exports["time"] = time;
})(PS);
(function(exports) {
  "use strict";

  exports.toDateTimeImpl = function (ctor) {
    return function (instant) {
      var dt = new Date(instant);
      return ctor (dt.getUTCFullYear())(dt.getUTCMonth() + 1)(dt.getUTCDate())(dt.getUTCHours())(dt.getUTCMinutes())(dt.getUTCSeconds())(dt.getUTCMilliseconds());
    };
  };
})(PS["Data.DateTime.Instant"] = PS["Data.DateTime.Instant"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Time.Component"] = $PS["Data.Time.Component"] || {};
  var exports = $PS["Data.Time.Component"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var ordSecond = Data_Ord.ordInt;
  var ordMinute = Data_Ord.ordInt;
  var ordMillisecond = Data_Ord.ordInt;
  var ordHour = Data_Ord.ordInt;
  var boundedSecond = {
      bottom: 0,
      top: 59,
      Ord0: function () {
          return ordSecond;
      }
  };
  var boundedMinute = {
      bottom: 0,
      top: 59,
      Ord0: function () {
          return ordMinute;
      }
  };
  var boundedMillisecond = {
      bottom: 0,
      top: 999,
      Ord0: function () {
          return ordMillisecond;
      }
  };
  var boundedHour = {
      bottom: 0,
      top: 23,
      Ord0: function () {
          return ordHour;
      }
  };
  var boundedEnumSecond = {
      cardinality: 60,
      toEnum: function (n) {
          if (n >= 0 && n <= 59) {
              return new Data_Maybe.Just(n);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Time.Component (line 90, column 1 - line 95, column 26): " + [ n.constructor.name ]);
      },
      fromEnum: function (v) {
          return v;
      },
      Bounded0: function () {
          return boundedSecond;
      },
      Enum1: function () {
          return enumSecond;
      }
  };
  var enumSecond = {
      succ: (function () {
          var $28 = Data_Enum.toEnum(boundedEnumSecond);
          var $29 = Data_Enum.fromEnum(boundedEnumSecond);
          return function ($30) {
              return $28((function (v) {
                  return v + 1 | 0;
              })($29($30)));
          };
      })(),
      pred: (function () {
          var $31 = Data_Enum.toEnum(boundedEnumSecond);
          var $32 = Data_Enum.fromEnum(boundedEnumSecond);
          return function ($33) {
              return $31((function (v) {
                  return v - 1 | 0;
              })($32($33)));
          };
      })(),
      Ord0: function () {
          return ordSecond;
      }
  };
  var boundedEnumMinute = {
      cardinality: 60,
      toEnum: function (n) {
          if (n >= 0 && n <= 59) {
              return new Data_Maybe.Just(n);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Time.Component (line 61, column 1 - line 66, column 26): " + [ n.constructor.name ]);
      },
      fromEnum: function (v) {
          return v;
      },
      Bounded0: function () {
          return boundedMinute;
      },
      Enum1: function () {
          return enumMinute;
      }
  };
  var enumMinute = {
      succ: (function () {
          var $34 = Data_Enum.toEnum(boundedEnumMinute);
          var $35 = Data_Enum.fromEnum(boundedEnumMinute);
          return function ($36) {
              return $34((function (v) {
                  return v + 1 | 0;
              })($35($36)));
          };
      })(),
      pred: (function () {
          var $37 = Data_Enum.toEnum(boundedEnumMinute);
          var $38 = Data_Enum.fromEnum(boundedEnumMinute);
          return function ($39) {
              return $37((function (v) {
                  return v - 1 | 0;
              })($38($39)));
          };
      })(),
      Ord0: function () {
          return ordMinute;
      }
  };
  var boundedEnumMillisecond = {
      cardinality: 1000,
      toEnum: function (n) {
          if (n >= 0 && n <= 999) {
              return new Data_Maybe.Just(n);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Time.Component (line 120, column 1 - line 125, column 31): " + [ n.constructor.name ]);
      },
      fromEnum: function (v) {
          return v;
      },
      Bounded0: function () {
          return boundedMillisecond;
      },
      Enum1: function () {
          return enumMillisecond;
      }
  };
  var enumMillisecond = {
      succ: (function () {
          var $40 = Data_Enum.toEnum(boundedEnumMillisecond);
          var $41 = Data_Enum.fromEnum(boundedEnumMillisecond);
          return function ($42) {
              return $40((function (v) {
                  return v + 1 | 0;
              })($41($42)));
          };
      })(),
      pred: (function () {
          var $43 = Data_Enum.toEnum(boundedEnumMillisecond);
          var $44 = Data_Enum.fromEnum(boundedEnumMillisecond);
          return function ($45) {
              return $43((function (v) {
                  return v - 1 | 0;
              })($44($45)));
          };
      })(),
      Ord0: function () {
          return ordMillisecond;
      }
  };
  var boundedEnumHour = {
      cardinality: 24,
      toEnum: function (n) {
          if (n >= 0 && n <= 23) {
              return new Data_Maybe.Just(n);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Time.Component (line 32, column 1 - line 37, column 24): " + [ n.constructor.name ]);
      },
      fromEnum: function (v) {
          return v;
      },
      Bounded0: function () {
          return boundedHour;
      },
      Enum1: function () {
          return enumHour;
      }
  };
  var enumHour = {
      succ: (function () {
          var $46 = Data_Enum.toEnum(boundedEnumHour);
          var $47 = Data_Enum.fromEnum(boundedEnumHour);
          return function ($48) {
              return $46((function (v) {
                  return v + 1 | 0;
              })($47($48)));
          };
      })(),
      pred: (function () {
          var $49 = Data_Enum.toEnum(boundedEnumHour);
          var $50 = Data_Enum.fromEnum(boundedEnumHour);
          return function ($51) {
              return $49((function (v) {
                  return v - 1 | 0;
              })($50($51)));
          };
      })(),
      Ord0: function () {
          return ordHour;
      }
  };
  exports["boundedEnumHour"] = boundedEnumHour;
  exports["boundedEnumMinute"] = boundedEnumMinute;
  exports["boundedEnumSecond"] = boundedEnumSecond;
  exports["boundedEnumMillisecond"] = boundedEnumMillisecond;
})(PS);
(function(exports) {
  "use strict";

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var zero = function (dict) {
      return dict.zero;
  };
  var semiringNumber = {
      add: $foreign.numAdd,
      zero: 0.0,
      mul: $foreign.numMul,
      one: 1.0
  };
  exports["zero"] = zero;
  exports["semiringNumber"] = semiringNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var sub = function (dict) {
      return dict.sub;
  };
  var ringNumber = {
      sub: $foreign.numSub,
      Semiring0: function () {
          return Data_Semiring.semiringNumber;
      }
  };
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["negate"] = negate;
  exports["ringNumber"] = ringNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Time.Duration"] = $PS["Data.Time.Duration"] || {};
  var exports = $PS["Data.Time.Duration"];
  var Control_Category = $PS["Control.Category"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ring = $PS["Data.Ring"];
  var Milliseconds = function (x) {
      return x;
  };
  var toDuration = function (dict) {
      return dict.toDuration;
  };
  var semigroupMilliseconds = {
      append: function (v) {
          return function (v1) {
              return v + v1;
          };
      }
  };
  var fromDuration = function (dict) {
      return dict.fromDuration;
  };
  var negateDuration = function (dictDuration) {
      var $43 = toDuration(dictDuration);
      var $44 = Data_Newtype.over()()(Milliseconds)(Data_Ring.negate(Data_Ring.ringNumber));
      var $45 = fromDuration(dictDuration);
      return function ($46) {
          return $43($44($45($46)));
      };
  };
  var durationMilliseconds = {
      fromDuration: Control_Category.identity(Control_Category.categoryFn),
      toDuration: Control_Category.identity(Control_Category.categoryFn)
  };
  exports["toDuration"] = toDuration;
  exports["Milliseconds"] = Milliseconds;
  exports["negateDuration"] = negateDuration;
  exports["semigroupMilliseconds"] = semigroupMilliseconds;
  exports["durationMilliseconds"] = durationMilliseconds;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Time"] = $PS["Data.Time"] || {};
  var exports = $PS["Data.Time"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Int = $PS["Data.Int"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Time_Component = $PS["Data.Time.Component"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var Time = (function () {
      function Time(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Time.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Time(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Time;
  })();
  var second = function (v) {
      return v.value2;
  };
  var minute = function (v) {
      return v.value1;
  };
  var millisecond = function (v) {
      return v.value3;
  };
  var hour = function (v) {
      return v.value0;
  };
  var timeToMillis = function (t) {
      return Data_Time_Duration.Milliseconds(3600000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(hour(t))) + 60000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(minute(t))) + 1000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(second(t))) + Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(millisecond(t))));
  };
  var diff = function (dictDuration) {
      return function (t1) {
          return function (t2) {
              return Data_Time_Duration.toDuration(dictDuration)(Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(timeToMillis(t1))(Data_Time_Duration.negateDuration(Data_Time_Duration.durationMilliseconds)(timeToMillis(t2))));
          };
      };
  };
  exports["Time"] = Time;
  exports["diff"] = diff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.DateTime.Instant"] = $PS["Data.DateTime.Instant"] || {};
  var exports = $PS["Data.DateTime.Instant"];
  var $foreign = $PS["Data.DateTime.Instant"];
  var Data_Date = $PS["Data.Date"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_DateTime = $PS["Data.DateTime"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Time = $PS["Data.Time"];
  var toDateTime = (function () {
      var mkDateTime = function (y) {
          return function (mo) {
              return function (d) {
                  return function (h) {
                      return function (mi) {
                          return function (s) {
                              return function (ms) {
                                  return new Data_DateTime.DateTime(Data_Date.canonicalDate(y)(Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(mo)))(d), new Data_Time.Time(h, mi, s, ms));
                              };
                          };
                      };
                  };
              };
          };
      };
      return $foreign.toDateTimeImpl(mkDateTime);
  })();
  exports["toDateTime"] = toDateTime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = {
      map: listMap
  };                                                                   
  var foldableList = {
      foldr: function (f) {
          return function (b) {
              var rev = (function () {
                  var go = function ($copy_acc) {
                      return function ($copy_v) {
                          var $tco_var_acc = $copy_acc;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(acc, v) {
                              if (v instanceof Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Cons) {
                                  $tco_var_acc = new Cons(v.value0, acc);
                                  $copy_v = v.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_acc, $copy_v);
                          };
                          return $tco_result;
                      };
                  };
                  return go(Nil.value);
              })();
              var $205 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
              return function ($206) {
                  return $205(rev($206));
              };
          };
      },
      foldl: function (f) {
          var go = function ($copy_b) {
              return function ($copy_v) {
                  var $tco_var_b = $copy_b;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(b, v) {
                      if (v instanceof Nil) {
                          $tco_done1 = true;
                          return b;
                      };
                      if (v instanceof Cons) {
                          $tco_var_b = f(b)(v.value0);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_b, $copy_v);
                  };
                  return $tco_result;
              };
          };
          return go;
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return Data_Foldable.foldl(foldableList)(function (acc) {
                  var $207 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                  return function ($208) {
                      return $207(f($208));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      }
  };
  var semigroupList = {
      append: function (xs) {
          return function (ys) {
              return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
          };
      }
  };
  var unfoldable1List = {
      unfoldr1: function (f) {
          return function (b) {
              var go = function ($copy_source) {
                  return function ($copy_memo) {
                      var $tco_var_source = $copy_source;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(source, memo) {
                          var v = f(source);
                          if (v.value1 instanceof Data_Maybe.Just) {
                              $tco_var_source = v.value1.value0;
                              $copy_memo = new Cons(v.value0, memo);
                              return;
                          };
                          if (v.value1 instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 136, column 22 - line 138, column 61): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_source, $copy_memo);
                      };
                      return $tco_result;
                  };
              };
              return go(b)(Nil.value);
          };
      }
  };
  var unfoldableList = {
      unfoldr: function (f) {
          return function (b) {
              var go = function ($copy_source) {
                  return function ($copy_memo) {
                      var $tco_var_source = $copy_source;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(source, memo) {
                          var v = f(source);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_source = v.value0.value1;
                              $copy_memo = new Cons(v.value0.value0, memo);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 143, column 22 - line 145, column 52): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_source, $copy_memo);
                      };
                      return $tco_result;
                  };
              };
              return go(b)(Nil.value);
          };
      },
      Unfoldable10: function () {
          return unfoldable1List;
      }
  };
  var applyList = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
              };
              throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorList;
      }
  };
  var applicativeList = {
      pure: function (a) {
          return new Cons(a, Nil.value);
      },
      Apply0: function () {
          return applyList;
      }
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["semigroupList"] = semigroupList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["applicativeList"] = applicativeList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };
  exports["Tuple"] = Tuple;
  exports["snd"] = snd;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];            
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  exports["unfoldr"] = unfoldr;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 626, column 1 - line 626, column 40): " + [ v.constructor.name ]);
  };
  var size = function (v) {
      if (v instanceof Leaf) {
          return 0;
      };
      if (v instanceof Two) {
          return (1 + size(v.value0) | 0) + size(v.value3) | 0;
      };
      if (v instanceof Three) {
          return ((2 + size(v.value0) | 0) + size(v.value3) | 0) + size(v.value6) | 0;
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 676, column 1 - line 676, column 35): " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 591, column 18 - line 600, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 590, column 3 - line 590, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done1 = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 9 - line 542, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 522, column 5 - line 542, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done1 = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done1 = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 554, column 5 - line 558, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done2 = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 545, column 33 - line 549, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done2) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done3 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done3 = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 34 - line 518, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done3) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = {
      foldl: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
              };
          };
      },
      foldr: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return function (m) {
                  return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
              };
          };
      }
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 563, column 15 - line 565, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)((function () {
                              var $777 = Data_Maybe.maybe(v.value1)(f(v.value1));
                              return function ($778) {
                                  return Data_Maybe.Just.create($777($778));
                              };
                          })())(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["delete"] = $$delete;
  exports["member"] = member;
  exports["union"] = union;
  exports["size"] = size;
  exports["foldableMap"] = foldableMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Unit = $PS["Data.Unit"];
  var union = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return Data_Map_Internal.union(dictOrd)(v)(v1);
          };
      };
  };
  var semigroupSet = function (dictOrd) {
      return {
          append: union(dictOrd)
      };
  };
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.member(dictOrd)(a)(v);
          };
      };
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  };
  var empty = Data_Map_Internal.empty;
  var monoidSet = function (dictOrd) {
      return {
          mempty: empty,
          Semigroup0: function () {
              return semigroupSet(dictOrd);
          }
      };
  };
  var $$delete = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal["delete"](dictOrd)(a)(v);
          };
      };
  };
  exports["insert"] = insert;
  exports["member"] = member;
  exports["delete"] = $$delete;
  exports["monoidSet"] = monoidSet;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];            
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = {
      traverse: function (dictApplicative) {
          return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
      },
      sequence: function (dictApplicative) {
          return sequenceDefault(traversableArray)(dictApplicative);
      },
      Functor0: function () {
          return Data_Functor.functorArray;
      },
      Foldable1: function () {
          return Data_Foldable.foldableArray;
      }
  };
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["traverse"] = traverse;
  exports["for"] = $$for;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };

  exports._delay = function () {
    function setDelay(n, k) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k);
      } else {
        return setTimeout(k, n);
      }
    }

    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }

    return function (right, ms) {
      return Aff.Async(function (cb) {
        return function () {
          var timer = setDelay(ms, cb(right()));
          return function () {
            return Aff.Sync(function () {
              return right(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var monadEffectEffect = {
      liftEffect: Control_Category.identity(Control_Category.categoryFn),
      Monad0: function () {
          return Effect.monadEffect;
      }
  };
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var functorParAff = {
      map: $foreign["_parAffMap"]
  };
  var functorAff = {
      map: $foreign["_map"]
  };                                    
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $40 = Data_Functor["void"](Effect.functorEffect);
      return function ($41) {
          return $40(launchAff($41));
      };
  })();                              
  var delay = function (v) {
      return $foreign["_delay"](Data_Either.Right.create, v);
  };
  var applyParAff = {
      apply: $foreign["_parAffApply"],
      Functor0: function () {
          return functorParAff;
      }
  };
  var monadAff = {
      Applicative0: function () {
          return applicativeAff;
      },
      Bind1: function () {
          return bindAff;
      }
  };
  var bindAff = {
      bind: $foreign["_bind"],
      Apply0: function () {
          return applyAff;
      }
  };
  var applyAff = {
      apply: Control_Monad.ap(monadAff),
      Functor0: function () {
          return functorAff;
      }
  };
  var applicativeAff = {
      pure: $foreign["_pure"],
      Apply0: function () {
          return applyAff;
      }
  };
  var monadEffectAff = {
      liftEffect: $foreign["_liftEffect"],
      Monad0: function () {
          return monadAff;
      }
  };   
  var monadThrowAff = {
      throwError: $foreign["_throwError"],
      Monad0: function () {
          return monadAff;
      }
  };
  var monadErrorAff = {
      catchError: $foreign["_catchError"],
      MonadThrow0: function () {
          return monadThrowAff;
      }
  };                                                            
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)((function () {
              var $46 = Effect_Class.liftEffect(monadEffectAff);
              return function ($47) {
                  return $46(k($47));
              };
          })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var runAff_ = function (k) {
      return function (aff) {
          return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
      };
  };
  var parallelAff = {
      parallel: Unsafe_Coerce.unsafeCoerce,
      sequential: $foreign["_sequential"],
      Monad0: function () {
          return monadAff;
      },
      Applicative1: function () {
          return applicativeParAff;
      }
  };
  var applicativeParAff = {
      pure: (function () {
          var $50 = Control_Parallel_Class.parallel(parallelAff);
          var $51 = Control_Applicative.pure(applicativeAff);
          return function ($52) {
              return $50($51($52));
          };
      })(),
      Apply0: function () {
          return applyParAff;
      }
  };
  var semigroupCanceler = {
      append: function (v) {
          return function (v1) {
              return function (err) {
                  return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ v(err), v1(err) ]);
              };
          };
      }
  };
  var monadRecAff = {
      tailRecM: function (k) {
          var go = function (a) {
              return Control_Bind.bind(bindAff)(k(a))(function (res) {
                  if (res instanceof Control_Monad_Rec_Class.Done) {
                      return Control_Applicative.pure(applicativeAff)(res.value0);
                  };
                  if (res instanceof Control_Monad_Rec_Class.Loop) {
                      return go(res.value0);
                  };
                  throw new Error("Failed pattern match at Effect.Aff (line 102, column 7 - line 104, column 22): " + [ res.constructor.name ]);
              });
          };
          return go;
      },
      Monad0: function () {
          return monadAff;
      }
  };
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  var monoidCanceler = {
      mempty: nonCanceler,
      Semigroup0: function () {
          return semigroupCanceler;
      }
  };
  exports["launchAff_"] = launchAff_;
  exports["runAff_"] = runAff_;
  exports["delay"] = delay;
  exports["functorAff"] = functorAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadRecAff"] = monadRecAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["monoidCanceler"] = monoidCanceler;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var log = function (dictMonadEffect) {
      var $30 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($31) {
          return $30(Effect_Console.log($31));
      };
  };
  exports["log"] = log;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var $$throw = function ($2) {
      return $foreign.throwException($foreign.error($2));
  };
  exports["throw"] = $$throw;
  exports["error"] = $foreign.error;
})(PS);
(function(exports) {
  "use strict";

  exports.now = function () {
    return Date.now();
  };
})(PS["Effect.Now"] = PS["Effect.Now"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Now"] = $PS["Effect.Now"] || {};
  var exports = $PS["Effect.Now"];
  var $foreign = $PS["Effect.Now"];
  var Data_DateTime = $PS["Data.DateTime"];
  var Data_DateTime_Instant = $PS["Data.DateTime.Instant"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var nowTime = Data_Functor.map(Effect.functorEffect)(function ($0) {
      return Data_DateTime.time(Data_DateTime_Instant.toDateTime($0));
  })($foreign.now);
  exports["nowTime"] = nowTime;
})(PS);
(function(exports) {
  "use strict";

  exports.random = Math.random;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Random"] = $PS["Effect.Random"] || {};
  var exports = $PS["Effect.Random"];
  var $foreign = $PS["Effect.Random"];
  exports["random"] = $foreign.random;
})(PS);
(function(exports) {
  "use strict";

  exports.setGradientStrokeStyle = function(ctx) {
    return function(gradient) {
        return function() {
            ctx.strokeStyle = gradient;
        };
    };
  };

  exports.setPatternStrokeStyle = function(ctx) {
    return function(pattern) {
        return function() {
            ctx.strokeStyle = pattern;
        };
    };
  };

  exports.getTransform = function(ctx) {
    const t = ctx.getTransform()
    return function() {
      return {m11: t.a, m12: t.b, m21: t.c, m22: t.d, m31: t.e, m32: t.f}
    }
  }
})(PS["Graphics.Glapple.Data.Picture"] = PS["Graphics.Glapple.Data.Picture"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.canvasElementToImageSource = function(e) {
      return e;
  };

  exports.tryLoadImageImpl = function (src) {
    return function(e) {
          return function(f) {
              return function () {
                  var img = new Image();
                  img.src = src;
                  img.addEventListener("load", function() {
                      f(img)();
                  }, false);
                  img.addEventListener("error", function(error) {
                      e();
                  }, false);
              }
          }
      };
  };

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setCanvasWidth = function(canvas) {
      return function(width) {
          return function() {
              canvas.width = width;
          };
      };
  };

  exports.setCanvasHeight = function(canvas) {
      return function(height) {
          return function() {
              canvas.height = height;
          };
      };
  };

  exports.setLineWidth = function(ctx) {
      return function(width) {
          return function() {
              ctx.lineWidth = width;
          };
      };
  };

  exports.setFillStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.fillStyle = style;
          };
      };
  };

  exports.setStrokeStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.strokeStyle = style;
          };
      };
  };

  exports.setGlobalCompositeOperationImpl = function(ctx) {
      return function(op) {
          return function() {
              ctx.globalCompositeOperation = op;
          };
      };
  };

  exports.setGlobalAlpha = function(ctx) {
      return function(alpha) {
          return function() {
              ctx.globalAlpha = alpha;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.radius, a.start, a.end);
          };
      };
  };

  exports.rect = function(ctx) {
      return function(r) {
          return function() {
              ctx.rect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.scale = function(ctx) {
      return function(t) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
          };
      };
  };

  exports.rotate = function(ctx) {
      return function(angle) {
          return function() {
              ctx.rotate(angle);
          };
      };
  };

  exports.translate = function(ctx) {
      return function(t) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
          };
      };
  };

  exports.transform = function(ctx) {
      return function(t) {
          return function() {
              ctx.transform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);
          };
      };
  };

  exports.setTransform = function(ctx) {
      return function(t) {
          return function() {
              ctx.setTransform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);
          };
      };
  };

  exports.setTextAlignImpl = function(ctx) {
      return function(textAlign) {
          return function() {
              ctx.textAlign = textAlign;
          }
      }
  };

  exports.setTextBaselineImpl = function (ctx) {
      return function (textBaseline) {
          return function () {
              ctx.textBaseline = textBaseline;
          }
      }
  };

  exports.setFont = function(ctx) {
      return function(fontspec) {
          return function() {
              ctx.font = fontspec;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                  };
              };
          };
      };
  };

  exports.strokeText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.strokeText(text, x, y);
                  };
              };
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
      };
  };

  exports.drawImage = function(ctx) {
      return function(image_source) {
          return function(dx) {
              return function(dy) {
                  return function() {
                      ctx.drawImage(image_source, dx, dy);
                  };
              };
          };
      };
  };

  exports.createPatternImpl = function(ctx) {
      return function(img) {
          return function(repeat) {
              return function() {
                  return ctx.createPattern(img, repeat);
              };
          };
      };
  };

  exports.setPatternFillStyle = function(ctx) {
      return function(pattern) {
          return function() {
              ctx.fillStyle = pattern;
          };
      };
  };

  exports.createLinearGradient = function(ctx) {
      return function(linearGradient) {
          return function() {
              return ctx.createLinearGradient(linearGradient.x0, linearGradient.y0, linearGradient.x1, linearGradient.y1);
          };
      };
  };

  exports.createRadialGradient = function(ctx) {
      return function(radialGradient) {
          return function() {
              return ctx.createRadialGradient(radialGradient.x0, radialGradient.y0, radialGradient.r0, radialGradient.x1, radialGradient.y1, radialGradient.r1);
          };
      };
  };

  exports.addColorStop = function(gradient) {
      return function(stop) {
          return function(color) {
              return function() {
                  gradient.addColorStop(stop, color);
              };
          };
      };
  };

  exports.setGradientFillStyle = function(ctx) {
      return function(gradient) {
          return function() {
              ctx.fillStyle = gradient;
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  var Data_Maybe = $PS["Data.Maybe"];                                          
  var BaselineTop = (function () {
      function BaselineTop() {

      };
      BaselineTop.value = new BaselineTop();
      return BaselineTop;
  })();
  var BaselineHanging = (function () {
      function BaselineHanging() {

      };
      BaselineHanging.value = new BaselineHanging();
      return BaselineHanging;
  })();
  var BaselineMiddle = (function () {
      function BaselineMiddle() {

      };
      BaselineMiddle.value = new BaselineMiddle();
      return BaselineMiddle;
  })();
  var BaselineAlphabetic = (function () {
      function BaselineAlphabetic() {

      };
      BaselineAlphabetic.value = new BaselineAlphabetic();
      return BaselineAlphabetic;
  })();
  var BaselineIdeographic = (function () {
      function BaselineIdeographic() {

      };
      BaselineIdeographic.value = new BaselineIdeographic();
      return BaselineIdeographic;
  })();
  var BaselineBottom = (function () {
      function BaselineBottom() {

      };
      BaselineBottom.value = new BaselineBottom();
      return BaselineBottom;
  })();
  var AlignLeft = (function () {
      function AlignLeft() {

      };
      AlignLeft.value = new AlignLeft();
      return AlignLeft;
  })();
  var AlignRight = (function () {
      function AlignRight() {

      };
      AlignRight.value = new AlignRight();
      return AlignRight;
  })();
  var AlignCenter = (function () {
      function AlignCenter() {

      };
      AlignCenter.value = new AlignCenter();
      return AlignCenter;
  })();
  var AlignStart = (function () {
      function AlignStart() {

      };
      AlignStart.value = new AlignStart();
      return AlignStart;
  })();
  var AlignEnd = (function () {
      function AlignEnd() {

      };
      AlignEnd.value = new AlignEnd();
      return AlignEnd;
  })();
  var Repeat = (function () {
      function Repeat() {

      };
      Repeat.value = new Repeat();
      return Repeat;
  })();
  var RepeatX = (function () {
      function RepeatX() {

      };
      RepeatX.value = new RepeatX();
      return RepeatX;
  })();
  var RepeatY = (function () {
      function RepeatY() {

      };
      RepeatY.value = new RepeatY();
      return RepeatY;
  })();
  var NoRepeat = (function () {
      function NoRepeat() {

      };
      NoRepeat.value = new NoRepeat();
      return NoRepeat;
  })();
  var SourceOver = (function () {
      function SourceOver() {

      };
      SourceOver.value = new SourceOver();
      return SourceOver;
  })();
  var SourceIn = (function () {
      function SourceIn() {

      };
      SourceIn.value = new SourceIn();
      return SourceIn;
  })();
  var SourceOut = (function () {
      function SourceOut() {

      };
      SourceOut.value = new SourceOut();
      return SourceOut;
  })();
  var SourceAtop = (function () {
      function SourceAtop() {

      };
      SourceAtop.value = new SourceAtop();
      return SourceAtop;
  })();
  var DestinationOver = (function () {
      function DestinationOver() {

      };
      DestinationOver.value = new DestinationOver();
      return DestinationOver;
  })();
  var DestinationIn = (function () {
      function DestinationIn() {

      };
      DestinationIn.value = new DestinationIn();
      return DestinationIn;
  })();
  var DestinationOut = (function () {
      function DestinationOut() {

      };
      DestinationOut.value = new DestinationOut();
      return DestinationOut;
  })();
  var DestinationAtop = (function () {
      function DestinationAtop() {

      };
      DestinationAtop.value = new DestinationAtop();
      return DestinationAtop;
  })();
  var Lighter = (function () {
      function Lighter() {

      };
      Lighter.value = new Lighter();
      return Lighter;
  })();
  var Copy = (function () {
      function Copy() {

      };
      Copy.value = new Copy();
      return Copy;
  })();
  var Xor = (function () {
      function Xor() {

      };
      Xor.value = new Xor();
      return Xor;
  })();
  var Multiply = (function () {
      function Multiply() {

      };
      Multiply.value = new Multiply();
      return Multiply;
  })();
  var Screen = (function () {
      function Screen() {

      };
      Screen.value = new Screen();
      return Screen;
  })();
  var Overlay = (function () {
      function Overlay() {

      };
      Overlay.value = new Overlay();
      return Overlay;
  })();
  var Darken = (function () {
      function Darken() {

      };
      Darken.value = new Darken();
      return Darken;
  })();
  var Lighten = (function () {
      function Lighten() {

      };
      Lighten.value = new Lighten();
      return Lighten;
  })();
  var ColorDodge = (function () {
      function ColorDodge() {

      };
      ColorDodge.value = new ColorDodge();
      return ColorDodge;
  })();
  var ColorBurn = (function () {
      function ColorBurn() {

      };
      ColorBurn.value = new ColorBurn();
      return ColorBurn;
  })();
  var HardLight = (function () {
      function HardLight() {

      };
      HardLight.value = new HardLight();
      return HardLight;
  })();
  var SoftLight = (function () {
      function SoftLight() {

      };
      SoftLight.value = new SoftLight();
      return SoftLight;
  })();
  var Difference = (function () {
      function Difference() {

      };
      Difference.value = new Difference();
      return Difference;
  })();
  var Exclusion = (function () {
      function Exclusion() {

      };
      Exclusion.value = new Exclusion();
      return Exclusion;
  })();
  var Hue = (function () {
      function Hue() {

      };
      Hue.value = new Hue();
      return Hue;
  })();
  var Saturation = (function () {
      function Saturation() {

      };
      Saturation.value = new Saturation();
      return Saturation;
  })();
  var Color = (function () {
      function Color() {

      };
      Color.value = new Color();
      return Color;
  })();
  var Luminosity = (function () {
      function Luminosity() {

      };
      Luminosity.value = new Luminosity();
      return Luminosity;
  })();
  var tryLoadImage = function (path) {
      return function (k) {
          return $foreign.tryLoadImageImpl(path)(k(Data_Maybe.Nothing.value))(function ($46) {
              return k(Data_Maybe.Just.create($46));
          });
      };
  };
  var setTextBaseline = function (ctx) {
      return function (textbaseline) {
          var toString = function (v) {
              if (v instanceof BaselineTop) {
                  return "top";
              };
              if (v instanceof BaselineHanging) {
                  return "hanging";
              };
              if (v instanceof BaselineMiddle) {
                  return "middle";
              };
              if (v instanceof BaselineAlphabetic) {
                  return "alphabetic";
              };
              if (v instanceof BaselineIdeographic) {
                  return "ideographic";
              };
              if (v instanceof BaselineBottom) {
                  return "bottom";
              };
              throw new Error("Failed pattern match at Graphics.Canvas (line 573, column 5 - line 573, column 33): " + [ v.constructor.name ]);
          };
          return $foreign.setTextBaselineImpl(ctx)(toString(textbaseline));
      };
  };
  var setTextAlign = function (ctx) {
      return function (textalign) {
          var toString = function (v) {
              if (v instanceof AlignLeft) {
                  return "left";
              };
              if (v instanceof AlignRight) {
                  return "right";
              };
              if (v instanceof AlignCenter) {
                  return "center";
              };
              if (v instanceof AlignStart) {
                  return "start";
              };
              if (v instanceof AlignEnd) {
                  return "end";
              };
              throw new Error("Failed pattern match at Graphics.Canvas (line 527, column 5 - line 527, column 32): " + [ v.constructor.name ]);
          };
          return $foreign.setTextAlignImpl(ctx)(toString(textalign));
      };
  };
  var setGlobalCompositeOperation = function (ctx) {
      return function (composite) {
          var toString = function (v) {
              if (v instanceof SourceOver) {
                  return "source-over";
              };
              if (v instanceof SourceIn) {
                  return "source-in";
              };
              if (v instanceof SourceOut) {
                  return "source-out";
              };
              if (v instanceof SourceAtop) {
                  return "source-atop";
              };
              if (v instanceof DestinationOver) {
                  return "destination-over";
              };
              if (v instanceof DestinationIn) {
                  return "destination-in";
              };
              if (v instanceof DestinationOut) {
                  return "destination-out";
              };
              if (v instanceof DestinationAtop) {
                  return "destination-atop";
              };
              if (v instanceof Lighter) {
                  return "lighter";
              };
              if (v instanceof Copy) {
                  return "copy";
              };
              if (v instanceof Xor) {
                  return "xor";
              };
              if (v instanceof Multiply) {
                  return "multiply";
              };
              if (v instanceof Screen) {
                  return "screen";
              };
              if (v instanceof Overlay) {
                  return "overlay";
              };
              if (v instanceof Darken) {
                  return "darken";
              };
              if (v instanceof Lighten) {
                  return "lighten";
              };
              if (v instanceof ColorDodge) {
                  return "color-dodge";
              };
              if (v instanceof ColorBurn) {
                  return "color-burn";
              };
              if (v instanceof HardLight) {
                  return "hard-light";
              };
              if (v instanceof SoftLight) {
                  return "soft-light";
              };
              if (v instanceof Difference) {
                  return "difference";
              };
              if (v instanceof Exclusion) {
                  return "exclusion";
              };
              if (v instanceof Hue) {
                  return "hue";
              };
              if (v instanceof Saturation) {
                  return "saturation";
              };
              if (v instanceof Color) {
                  return "color";
              };
              if (v instanceof Luminosity) {
                  return "luminosity";
              };
              throw new Error("Failed pattern match at Graphics.Canvas (line 325, column 5 - line 325, column 45): " + [ v.constructor.name ]);
          };
          return $foreign.setGlobalCompositeOperationImpl(ctx)(toString(composite));
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var createPattern = function (context) {
      return function (img) {
          return function (repeat) {
              var toString = function (v) {
                  if (v instanceof Repeat) {
                      return "repeat";
                  };
                  if (v instanceof RepeatX) {
                      return "repeat-x";
                  };
                  if (v instanceof RepeatY) {
                      return "repeat-y";
                  };
                  if (v instanceof NoRepeat) {
                      return "no-repeat";
                  };
                  throw new Error("Failed pattern match at Graphics.Canvas (line 669, column 5 - line 669, column 31): " + [ v.constructor.name ]);
              };
              return $foreign.createPatternImpl(context)(img)(toString(repeat));
          };
      };
  };
  exports["SourceOver"] = SourceOver;
  exports["DestinationOver"] = DestinationOver;
  exports["Lighter"] = Lighter;
  exports["Multiply"] = Multiply;
  exports["AlignRight"] = AlignRight;
  exports["BaselineHanging"] = BaselineHanging;
  exports["Repeat"] = Repeat;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["setGlobalCompositeOperation"] = setGlobalCompositeOperation;
  exports["setTextAlign"] = setTextAlign;
  exports["setTextBaseline"] = setTextBaseline;
  exports["tryLoadImage"] = tryLoadImage;
  exports["createPattern"] = createPattern;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["setCanvasWidth"] = $foreign.setCanvasWidth;
  exports["setCanvasHeight"] = $foreign.setCanvasHeight;
  exports["setLineWidth"] = $foreign.setLineWidth;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["setGlobalAlpha"] = $foreign.setGlobalAlpha;
  exports["beginPath"] = $foreign.beginPath;
  exports["stroke"] = $foreign.stroke;
  exports["fill"] = $foreign.fill;
  exports["lineTo"] = $foreign.lineTo;
  exports["moveTo"] = $foreign.moveTo;
  exports["closePath"] = $foreign.closePath;
  exports["arc"] = $foreign.arc;
  exports["rect"] = $foreign.rect;
  exports["clearRect"] = $foreign.clearRect;
  exports["scale"] = $foreign.scale;
  exports["rotate"] = $foreign.rotate;
  exports["translate"] = $foreign.translate;
  exports["transform"] = $foreign.transform;
  exports["setTransform"] = $foreign.setTransform;
  exports["setFont"] = $foreign.setFont;
  exports["fillText"] = $foreign.fillText;
  exports["strokeText"] = $foreign.strokeText;
  exports["save"] = $foreign.save;
  exports["restore"] = $foreign.restore;
  exports["canvasElementToImageSource"] = $foreign.canvasElementToImageSource;
  exports["drawImage"] = $foreign.drawImage;
  exports["setPatternFillStyle"] = $foreign.setPatternFillStyle;
  exports["createLinearGradient"] = $foreign.createLinearGradient;
  exports["createRadialGradient"] = $foreign.createRadialGradient;
  exports["addColorStop"] = $foreign.addColorStop;
  exports["setGradientFillStyle"] = $foreign.setGradientFillStyle;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Graphics.Glapple.Data.Picture"] = $PS["Graphics.Glapple.Data.Picture"] || {};
  var exports = $PS["Graphics.Glapple.Data.Picture"];
  var $foreign = $PS["Graphics.Glapple.Data.Picture"];
  var Color = $PS["Color"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Safely = $PS["Control.Safely"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var $$Math = $PS["Math"];                
  var Fill = (function () {
      function Fill() {

      };
      Fill.value = new Fill();
      return Fill;
  })();
  var Stroke = (function () {
      function Stroke() {

      };
      Stroke.value = new Stroke();
      return Stroke;
  })();
  var FontWeightNormal = (function () {
      function FontWeightNormal() {

      };
      FontWeightNormal.value = new FontWeightNormal();
      return FontWeightNormal;
  })();
  var Bold = (function () {
      function Bold() {

      };
      Bold.value = new Bold();
      return Bold;
  })();
  var FontWeight = (function () {
      function FontWeight(value0) {
          this.value0 = value0;
      };
      FontWeight.create = function (value0) {
          return new FontWeight(value0);
      };
      return FontWeight;
  })();
  var FontStyleNormal = (function () {
      function FontStyleNormal() {

      };
      FontStyleNormal.value = new FontStyleNormal();
      return FontStyleNormal;
  })();
  var Oblique = (function () {
      function Oblique() {

      };
      Oblique.value = new Oblique();
      return Oblique;
  })();
  var Italic = (function () {
      function Italic() {

      };
      Italic.value = new Italic();
      return Italic;
  })();
  var Serif = (function () {
      function Serif() {

      };
      Serif.value = new Serif();
      return Serif;
  })();
  var SansSerif = (function () {
      function SansSerif() {

      };
      SansSerif.value = new SansSerif();
      return SansSerif;
  })();
  var Cursive = (function () {
      function Cursive() {

      };
      Cursive.value = new Cursive();
      return Cursive;
  })();
  var Fantasy = (function () {
      function Fantasy() {

      };
      Fantasy.value = new Fantasy();
      return Fantasy;
  })();
  var Monospace = (function () {
      function Monospace() {

      };
      Monospace.value = new Monospace();
      return Monospace;
  })();
  var LinearGradient = (function () {
      function LinearGradient(value0) {
          this.value0 = value0;
      };
      LinearGradient.create = function (value0) {
          return new LinearGradient(value0);
      };
      return LinearGradient;
  })();
  var RadialGradient = (function () {
      function RadialGradient(value0) {
          this.value0 = value0;
      };
      RadialGradient.create = function (value0) {
          return new RadialGradient(value0);
      };
      return RadialGradient;
  })();
  var Pattern = (function () {
      function Pattern(value0) {
          this.value0 = value0;
      };
      Pattern.create = function (value0) {
          return new Pattern(value0);
      };
      return Pattern;
  })();
  var MonoColor = (function () {
      function MonoColor(value0) {
          this.value0 = value0;
      };
      MonoColor.create = function (value0) {
          return new MonoColor(value0);
      };
      return MonoColor;
  })();
  var showFontWeight = {
      show: function (v) {
          if (v instanceof FontWeightNormal) {
              return "normal";
          };
          if (v instanceof Bold) {
              return "bold";
          };
          if (v instanceof FontWeight) {
              return Data_Show.show(Data_Show.showInt)(v.value0);
          };
          throw new Error("Failed pattern match at Graphics.Glapple.Data.Picture (line 171, column 10 - line 174, column 27): " + [ v.constructor.name ]);
      }
  };
  var showFontStyle = {
      show: function (v) {
          if (v instanceof FontStyleNormal) {
              return "normal";
          };
          if (v instanceof Oblique) {
              return "oblique";
          };
          if (v instanceof Italic) {
              return "italic";
          };
          throw new Error("Failed pattern match at Graphics.Glapple.Data.Picture (line 160, column 10 - line 163, column 23): " + [ v.constructor.name ]);
      }
  };
  var showFontFamily = {
      show: function (v) {
          if (v instanceof Serif) {
              return "serif";
          };
          if (v instanceof SansSerif) {
              return "bold";
          };
          if (v instanceof Cursive) {
              return "cursive";
          };
          if (v instanceof Fantasy) {
              return "fantasy";
          };
          if (v instanceof Monospace) {
              return "monospace";
          };
          throw new Error("Failed pattern match at Graphics.Glapple.Data.Picture (line 182, column 10 - line 187, column 29): " + [ v.constructor.name ]);
      }
  };
  var tryLoadImageAff = function (str) {
      return Effect_Aff.makeAff(function (thrower) {
          return function __do() {
              Graphics_Canvas.tryLoadImage(str)(function (v) {
                  if (v instanceof Data_Maybe.Just) {
                      return thrower(new Data_Either.Right(v.value0));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return thrower(Data_Either.Left.create(Effect_Exception.error("Image LoadingError: " + str)));
                  };
                  throw new Error("Failed pattern match at Graphics.Glapple.Data.Picture (line 87, column 22 - line 89, column 70): " + [ v.constructor.name ]);
              })();
              return Data_Monoid.mempty(Effect_Aff.monoidCanceler);
          };
      });
  };
  var translateToTransform = function (x) {
      return function (y) {
          return {
              m11: 1.0,
              m12: 0.0,
              m21: 0.0,
              m22: 1.0,
              m31: x,
              m32: y
          };
      };
  };
  var sprite = function (spr) {
      return function (ctx) {
          return function (canvasImageSources) {
              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)((function () {
                  var v = canvasImageSources(spr);
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Graphics_Canvas.drawImage(ctx)(v.value0)(0.0)(0.0);
                  };
                  throw new Error("Failed pattern match at Graphics.Glapple.Data.Picture (line 295, column 3 - line 298, column 30): " + [ v.constructor.name ]);
              })());
          };
      };
  };
  var setFont = function (ctx) {
      return function (v) {
          return Graphics_Canvas.setFont(ctx)(Data_Show.show(showFontStyle)(v.fontStyle) + (" " + (Data_Show.show(showFontWeight)(v.fontWeight) + (" " + (Data_Show.show(Data_Show.showInt)(v.fontSize) + ("px/" + (Data_Show.show(Data_Show.showInt)(v.fontHeight) + ("px " + Data_Show.show(showFontFamily)(v.fontFamily)))))))));
      };
  };
  var setDrawStyle = function (ctx) {
      return function (canvasImageSources) {
          return function (v) {
              if (v instanceof LinearGradient) {
                  return function __do() {
                      var gradient = Graphics_Canvas.createLinearGradient(ctx)({
                          x0: v.value0.x0,
                          y0: v.value0.y0,
                          x1: v.value0.x1,
                          y1: v.value0.y1
                      })();
                      Control_Safely.for_(Data_Foldable.foldableArray)(Control_Monad_Rec_Class.monadRecEffect)(v.value0.colorStops)(function (v1) {
                          return Graphics_Canvas.addColorStop(gradient)(v1.value0)(Color.cssStringRGBA(v1.value1));
                      })();
                      Graphics_Canvas.setGradientFillStyle(ctx)(gradient)();
                      return $foreign.setGradientStrokeStyle(ctx)(gradient)();
                  };
              };
              if (v instanceof RadialGradient) {
                  return function __do() {
                      var gradient = Graphics_Canvas.createRadialGradient(ctx)({
                          x0: v.value0.x0,
                          y0: v.value0.y0,
                          x1: v.value0.x1,
                          y1: v.value0.y1,
                          r0: v.value0.r0,
                          r1: v.value0.r1
                      })();
                      Control_Safely.for_(Data_Foldable.foldableArray)(Control_Monad_Rec_Class.monadRecEffect)(v.value0.colorStops)(function (v1) {
                          return Graphics_Canvas.addColorStop(gradient)(v1.value0)(Color.cssStringRGBA(v1.value1));
                      })();
                      Graphics_Canvas.setGradientFillStyle(ctx)(gradient)();
                      return $foreign.setGradientStrokeStyle(ctx)(gradient)();
                  };
              };
              if (v instanceof Pattern) {
                  var v1 = canvasImageSources(v.value0.sprite);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return function __do() {
                          var pattern = Graphics_Canvas.createPattern(ctx)(v1.value0)(v.value0.repeat)();
                          Graphics_Canvas.setPatternFillStyle(ctx)(pattern)();
                          return $foreign.setPatternStrokeStyle(ctx)(pattern)();
                      };
                  };
                  throw new Error("Failed pattern match at Graphics.Glapple.Data.Picture (line 144, column 38 - line 149, column 40): " + [ v1.constructor.name ]);
              };
              if (v instanceof MonoColor) {
                  return function __do() {
                      Graphics_Canvas.setFillStyle(ctx)(Color.cssStringRGBA(v.value0))();
                      return Graphics_Canvas.setStrokeStyle(ctx)(Color.cssStringRGBA(v.value0))();
                  };
              };
              throw new Error("Failed pattern match at Graphics.Glapple.Data.Picture (line 133, column 39 - line 152, column 43): " + [ v.constructor.name ]);
          };
      };
  };
  var saveAndRestore = function (dictMonadEffect) {
      return function (ctx) {
          return function (f) {
              return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Graphics_Canvas.save(ctx)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(f)(function () {
                      return Effect_Class.liftEffect(dictMonadEffect)(Graphics_Canvas.restore(ctx));
                  });
              });
          };
      };
  };
  var text = function (style) {
      return function (str) {
          return function (ctx) {
              return function (v) {
                  return saveAndRestore(Effect_Aff.monadEffectAff)(ctx)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                      Graphics_Canvas.save(ctx)();
                      Graphics_Canvas.beginPath(ctx)();
                      (function () {
                          if (style instanceof Fill) {
                              return Graphics_Canvas.fillText(ctx)(str)(0.0)(0.0)();
                          };
                          if (style instanceof Stroke) {
                              return Graphics_Canvas.strokeText(ctx)(str)(0.0)(0.0)();
                          };
                          throw new Error("Failed pattern match at Graphics.Glapple.Data.Picture (line 332, column 3 - line 336, column 35): " + [ style.constructor.name ]);
                      })();
                      return Graphics_Canvas.restore(ctx)();
                  }));
              };
          };
      };
  };
  var runShape = function (ctx) {
      return function (v) {
          if (v instanceof Fill) {
              return function __do() {
                  Graphics_Canvas.fill(ctx)();
                  return Graphics_Canvas.beginPath(ctx)();
              };
          };
          if (v instanceof Stroke) {
              return function __do() {
                  Graphics_Canvas.stroke(ctx)();
                  return Graphics_Canvas.beginPath(ctx)();
              };
          };
          throw new Error("Failed pattern match at Graphics.Glapple.Data.Picture (line 120, column 16 - line 126, column 18): " + [ v.constructor.name ]);
      };
  };
  var rect = function (style) {
      return function (height) {
          return function (width) {
              return function (ctx) {
                  return function (v) {
                      return saveAndRestore(Effect_Aff.monadEffectAff)(ctx)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                          Graphics_Canvas.rect(ctx)({
                              x: 0.0,
                              y: 0.0,
                              height: height,
                              width: width
                          })();
                          return runShape(ctx)(style)();
                      }));
                  };
              };
          };
      };
  };
  var polygon = function (style) {
      return function (path) {
          return function (ctx) {
              return function (v) {
                  return saveAndRestore(Effect_Aff.monadEffectAff)(ctx)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                      (function () {
                          var v1 = Data_Array.uncons(path);
                          if (v1 instanceof Data_Maybe.Just) {
                              Graphics_Canvas.moveTo(ctx)(v1.value0.head.value0)(v1.value0.head.value1)();
                              Control_Safely.for_(Data_Foldable.foldableArray)(Control_Monad_Rec_Class.monadRecEffect)(v1.value0.tail)(function (v2) {
                                  return Graphics_Canvas.lineTo(ctx)(v2.value0)(v2.value1);
                              })();
                              return Graphics_Canvas.closePath(ctx)();
                          };
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return Data_Unit.unit;
                          };
                          throw new Error("Failed pattern match at Graphics.Glapple.Data.Picture (line 345, column 3 - line 350, column 25): " + [ v1.constructor.name ]);
                      })();
                      return runShape(ctx)(style)();
                  }));
              };
          };
      };
  };
  var empty = function (v) {
      return function (v1) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
      };
  };
  var drawPicture = function (ctx) {
      return function (canvasImageSources) {
          return function (v) {
              return v(ctx)(canvasImageSources);
          };
      };
  };
  var drawWithTransform = function (f) {
      return function (ctx) {
          return function (img) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)($foreign.getTransform(ctx)))(function (t) {
                  return drawPicture(ctx)(img)(f(t));
              });
          };
      };
  };
  var operate = function (f) {
      return function (p) {
          return function (ctx) {
              return function (img) {
                  return saveAndRestore(Effect_Aff.monadEffectAff)(ctx)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(f(ctx)))(function () {
                      return drawPicture(ctx)(img)(p);
                  }));
              };
          };
      };
  };
  var font = function (f) {
      return operate(Data_Function.flip(setFont)(f));
  };
  var lineWidth = function (w) {
      return operate(Data_Function.flip(Graphics_Canvas.setLineWidth)(w));
  };
  var opacity = function (o) {
      return operate(Data_Function.flip(Graphics_Canvas.setGlobalAlpha)(o));
  };
  var rotate = function (r) {
      return operate(Data_Function.flip(Graphics_Canvas.rotate)(r));
  };
  var scale = function (sx) {
      return function (sy) {
          return operate(function (ctx) {
              return Graphics_Canvas.scale(ctx)({
                  scaleX: sx,
                  scaleY: sy
              });
          });
      };
  };
  var textAlign = function (a) {
      return operate(Data_Function.flip(Graphics_Canvas.setTextAlign)(a));
  };
  var textBaseLine = function (b) {
      return operate(Data_Function.flip(Graphics_Canvas.setTextBaseline)(b));
  };
  var transform = function (trans) {
      return operate(Data_Function.flip(Graphics_Canvas.transform)(trans));
  };
  var translate = function (x) {
      return function (y) {
          return operate(function (ctx) {
              return Graphics_Canvas.translate(ctx)({
                  translateX: x,
                  translateY: y
              });
          });
      };
  };
  var paint = function (drawStyle) {
      return function (shape) {
          return function (ctx) {
              return function (img) {
                  return saveAndRestore(Effect_Aff.monadEffectAff)(ctx)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(setDrawStyle(ctx)(img)(drawStyle)))(function () {
                      return drawPicture(ctx)(img)(shape);
                  }));
              };
          };
      };
  };
  var convertArcFormat = function (v) {
      var start$prime = v.start - $$Math.floor(v.start / (2.0 * $$Math.pi)) * 2.0 * $$Math.pi;
      var angle$prime = v.angle - $$Math.floor(v.angle / (4.0 * $$Math.pi)) * 4.0 * $$Math.pi;
      var v1 = (function () {
          if (0.0 <= angle$prime && angle$prime <= 2.0 * $$Math.pi) {
              return new Data_Tuple.Tuple(start$prime, start$prime + angle$prime);
          };
          return new Data_Tuple.Tuple((start$prime + angle$prime) - 2.0 * $$Math.pi, start$prime);
      })();
      return {
          start: v1.value0,
          end: v1.value1
      };
  };
  var fan = function (style) {
      return function (v) {
          return function (ctx) {
              return function (v1) {
                  return saveAndRestore(Effect_Aff.monadEffectAff)(ctx)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)((function () {
                      var v2 = convertArcFormat({
                          start: v.start,
                          angle: v.angle
                      });
                      return function __do() {
                          Graphics_Canvas.moveTo(ctx)(0.0)(0.0)();
                          Graphics_Canvas.arc(ctx)({
                              x: 0.0,
                              y: 0.0,
                              start: v2.start,
                              end: v2.end,
                              radius: v.radius
                          })();
                          Graphics_Canvas.closePath(ctx)();
                          return runShape(ctx)(style)();
                      };
                  })()));
              };
          };
      };
  };
  var composite = function (comp) {
      return function (pic1) {
          return function (pic2) {
              return function (ctx) {
                  return function (canvasImageSources) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(drawPicture(ctx)(canvasImageSources)(pic1))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Graphics_Canvas.setGlobalCompositeOperation(ctx)(comp)))(function () {
                              return drawPicture(ctx)(canvasImageSources)(pic2);
                          });
                      });
                  };
              };
          };
      };
  };
  var destinationOverComposite = composite(Graphics_Canvas.DestinationOver.value);
  var multiplyComposite = composite(Graphics_Canvas.Multiply.value);
  var sourceOverComposite = composite(Graphics_Canvas.SourceOver.value);
  var semigroupPicture = {
      append: composite(Graphics_Canvas.SourceOver.value)
  };
  var monoidPicture = {
      mempty: empty,
      Semigroup0: function () {
          return semigroupPicture;
      }
  };
  var color = function (c) {
      return function (s) {
          return paint(new MonoColor(c))(s);
      };
  };
  var arc = function (v) {
      return function (ctx) {
          return function (v1) {
              return saveAndRestore(Effect_Aff.monadEffectAff)(ctx)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)((function () {
                  var v2 = convertArcFormat({
                      start: v.start,
                      angle: v.angle
                  });
                  return function __do() {
                      Graphics_Canvas.arc(ctx)({
                          x: 0.0,
                          y: 0.0,
                          start: v2.start,
                          end: v2.end,
                          radius: v.radius
                      })();
                      return runShape(ctx)(Stroke.value)();
                  };
              })()));
          };
      };
  };
  var addComposite = composite(Graphics_Canvas.Lighter.value);
  var absorb$prime = function (affPic) {
      return function (ctx) {
          return function (img) {
              return Control_Bind.bind(Effect_Aff.bindAff)(affPic(ctx)(img))(function (pic) {
                  return drawPicture(ctx)(img)(pic);
              });
          };
      };
  };
  var absorb = function (affPic) {
      return function (ctx) {
          return function (img) {
              return Control_Bind.bind(Effect_Aff.bindAff)(affPic)(function (pic) {
                  return drawPicture(ctx)(img)(pic);
              });
          };
      };
  };
  var absolute = operate(Data_Function.flip(Graphics_Canvas.setTransform)({
      m11: 1.0,
      m12: 0.0,
      m21: 0.0,
      m22: 1.0,
      m31: 0.0,
      m32: 0.0
  }));
  exports["LinearGradient"] = LinearGradient;
  exports["RadialGradient"] = RadialGradient;
  exports["Pattern"] = Pattern;
  exports["Fill"] = Fill;
  exports["Stroke"] = Stroke;
  exports["FontStyleNormal"] = FontStyleNormal;
  exports["Bold"] = Bold;
  exports["Monospace"] = Monospace;
  exports["drawPicture"] = drawPicture;
  exports["tryLoadImageAff"] = tryLoadImageAff;
  exports["transform"] = transform;
  exports["absorb'"] = absorb$prime;
  exports["empty"] = empty;
  exports["rotate"] = rotate;
  exports["absolute"] = absolute;
  exports["arc"] = arc;
  exports["addComposite"] = addComposite;
  exports["color"] = color;
  exports["destinationOverComposite"] = destinationOverComposite;
  exports["drawWithTransform"] = drawWithTransform;
  exports["fan"] = fan;
  exports["font"] = font;
  exports["lineWidth"] = lineWidth;
  exports["multiplyComposite"] = multiplyComposite;
  exports["opacity"] = opacity;
  exports["polygon"] = polygon;
  exports["rect"] = rect;
  exports["scale"] = scale;
  exports["sourceOverComposite"] = sourceOverComposite;
  exports["sprite"] = sprite;
  exports["text"] = text;
  exports["textAlign"] = textAlign;
  exports["textBaseLine"] = textBaseLine;
  exports["translate"] = translate;
  exports["paint"] = paint;
  exports["absorb"] = absorb;
  exports["translateToTransform"] = translateToTransform;
  exports["monoidPicture"] = monoidPicture;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Graphics.Glapple.Data.SpriteData"] = $PS["Graphics.Glapple.Data.SpriteData"] || {};
  var exports = $PS["Graphics.Glapple.Data.SpriteData"];
  var FromImage = (function () {
      function FromImage(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FromImage.create = function (value0) {
          return function (value1) {
              return new FromImage(value0, value1);
          };
      };
      return FromImage;
  })();
  var FromPicture = (function () {
      function FromPicture(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FromPicture.create = function (value0) {
          return function (value1) {
              return new FromPicture(value0, value1);
          };
      };
      return FromPicture;
  })();
  exports["FromImage"] = FromImage;
  exports["FromPicture"] = FromPicture;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["GlappleExamples.Sprites"] = $PS["GlappleExamples.Sprites"] || {};
  var exports = $PS["GlappleExamples.Sprites"];
  var Color = $PS["Color"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Int = $PS["Data.Int"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Graphics_Glapple_Data_Picture = $PS["Graphics.Glapple.Data.Picture"];
  var Graphics_Glapple_Data_SpriteData = $PS["Graphics.Glapple.Data.SpriteData"];
  var $$Math = $PS["Math"];                
  var Apple = (function () {
      function Apple() {

      };
      Apple.value = new Apple();
      return Apple;
  })();
  var ArcTest = (function () {
      function ArcTest() {

      };
      ArcTest.value = new ArcTest();
      return ArcTest;
  })();
  var eqSprite = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Apple && y instanceof Apple) {
                  return true;
              };
              if (x instanceof ArcTest && y instanceof ArcTest) {
                  return true;
              };
              return false;
          };
      }
  };
  var ordSprite = {
      compare: function (x) {
          return function (y) {
              if (x instanceof Apple && y instanceof Apple) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Apple) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Apple) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof ArcTest && y instanceof ArcTest) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at GlappleExamples.Sprites (line 15, column 1 - line 15, column 27): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqSprite;
      }
  };
  var arcTest = Graphics_Glapple_Data_Picture.lineWidth(4.0)(Graphics_Glapple_Data_Picture.color(Color["rgb'"](1.0)(0.3)(1.0))(Data_Array.fold(Graphics_Glapple_Data_Picture.monoidPicture)(Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(0)(4))(function (i) {
      return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(0)(8))(function (j) {
          var j$prime = Data_Int.toNumber(j);
          var i$prime = Data_Int.toNumber(i);
          var start = (i$prime * $$Math.pi) / 2.0;
          var angle = (j$prime * $$Math.pi) / 2.0;
          return Control_Applicative.pure(Control_Applicative.applicativeArray)(Graphics_Glapple_Data_Picture.translate(j$prime * 32.0 + 9.0)(i$prime * 32.0 + 9.0)(Graphics_Glapple_Data_Picture.arc({
              start: start,
              angle: angle,
              radius: 12.0
          })));
      });
  }))));
  var sprites = [ new Graphics_Glapple_Data_SpriteData.FromImage(Apple.value, "./images/apple.png"), new Graphics_Glapple_Data_SpriteData.FromPicture(ArcTest.value, arcTest) ];
  exports["Apple"] = Apple;
  exports["ArcTest"] = ArcTest;
  exports["sprites"] = sprites;
  exports["ordSprite"] = ordSprite;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Graphics.Glapple.Data.Event"] = $PS["Graphics.Glapple.Data.Event"] || {};
  var exports = $PS["Graphics.Glapple.Data.Event"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];                
  var Left = (function () {
      function Left() {

      };
      Left.value = new Left();
      return Left;
  })();
  var Center = (function () {
      function Center() {

      };
      Center.value = new Center();
      return Center;
  })();
  var Right = (function () {
      function Right() {

      };
      Right.value = new Right();
      return Right;
  })();
  var KeyDown = (function () {
      function KeyDown() {

      };
      KeyDown.value = new KeyDown();
      return KeyDown;
  })();
  var KeyUp = (function () {
      function KeyUp() {

      };
      KeyUp.value = new KeyUp();
      return KeyUp;
  })();
  var Keyboard = (function () {
      function Keyboard(value0) {
          this.value0 = value0;
      };
      Keyboard.create = function (value0) {
          return new Keyboard(value0);
      };
      return Keyboard;
  })();
  var Mouse = (function () {
      function Mouse(value0) {
          this.value0 = value0;
      };
      Mouse.create = function (value0) {
          return new Mouse(value0);
      };
      return Mouse;
  })();
  var KeyEvent = (function () {
      function KeyEvent(value0) {
          this.value0 = value0;
      };
      KeyEvent.create = function (value0) {
          return new KeyEvent(value0);
      };
      return KeyEvent;
  })();
  var Update = (function () {
      function Update(value0) {
          this.value0 = value0;
      };
      Update.create = function (value0) {
          return new Update(value0);
      };
      return Update;
  })();
  var MouseMove = (function () {
      function MouseMove(value0) {
          this.value0 = value0;
      };
      MouseMove.create = function (value0) {
          return new MouseMove(value0);
      };
      return MouseMove;
  })();
  var eqMouseButton = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Left && y instanceof Left) {
                  return true;
              };
              if (x instanceof Center && y instanceof Center) {
                  return true;
              };
              if (x instanceof Right && y instanceof Right) {
                  return true;
              };
              return false;
          };
      }
  };
  var ordMouseButton = {
      compare: function (x) {
          return function (y) {
              if (x instanceof Left && y instanceof Left) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Left) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Left) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Center && y instanceof Center) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Center) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Center) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Right && y instanceof Right) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Graphics.Glapple.Data.Event (line 13, column 1 - line 13, column 32): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqMouseButton;
      }
  };
  var eqKeyCode = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Keyboard && y instanceof Keyboard) {
                  return x.value0 === y.value0;
              };
              if (x instanceof Mouse && y instanceof Mouse) {
                  return Data_Eq.eq(eqMouseButton)(x.value0)(y.value0);
              };
              return false;
          };
      }
  };
  var ordKeyCode = {
      compare: function (x) {
          return function (y) {
              if (x instanceof Keyboard && y instanceof Keyboard) {
                  return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              };
              if (x instanceof Keyboard) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Keyboard) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Mouse && y instanceof Mouse) {
                  return Data_Ord.compare(ordMouseButton)(x.value0)(y.value0);
              };
              throw new Error("Failed pattern match at Graphics.Glapple.Data.Event (line 18, column 1 - line 18, column 28): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqKeyCode;
      }
  };
  exports["KeyDown"] = KeyDown;
  exports["KeyUp"] = KeyUp;
  exports["Left"] = Left;
  exports["Center"] = Center;
  exports["Right"] = Right;
  exports["Keyboard"] = Keyboard;
  exports["Mouse"] = Mouse;
  exports["KeyEvent"] = KeyEvent;
  exports["Update"] = Update;
  exports["MouseMove"] = MouseMove;
  exports["ordKeyCode"] = ordKeyCode;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Graphics.Glapple.Data.Emitter"] = $PS["Graphics.Glapple.Data.Emitter"] || {};
  var exports = $PS["Graphics.Glapple.Data.Emitter"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Safely = $PS["Control.Safely"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Ref = $PS["Effect.Ref"];
  var RegistrationId = (function () {
      function RegistrationId(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RegistrationId.create = function (value0) {
          return function (value1) {
              return new RegistrationId(value0, value1);
          };
      };
      return RegistrationId;
  })();
  var unregister = function (dictMonadEffect) {
      return function (v) {
          return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(v.value0)))(function (v1) {
              var newE = new Data_Tuple.Tuple(v1.value0, Data_Map_Internal["delete"](Data_Ord.ordInt)(v.value1)(v1.value1));
              return Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(newE)(v.value0));
          });
      };
  };
  var register = function (dictMonadEffect) {
      return function (v) {
          return function (handler) {
              return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(v)))(function (v1) {
                  var newMaxKey = (function () {
                      var $26 = v1.value0 === Data_Bounded.top(Data_Bounded.boundedInt);
                      if ($26) {
                          return Data_Bounded.bottom(Data_Bounded.boundedInt);
                      };
                      return v1.value0 + 1 | 0;
                  })();
                  var newE = new Data_Tuple.Tuple(newMaxKey, Data_Map_Internal.insert(Data_Ord.ordInt)(v1.value0)(handler)(v1.value1));
                  return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(newE)(v)))(function () {
                      return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(new RegistrationId(v, v1.value0));
                  });
              });
          };
      };
  };
  var newEmitter = function (dictMonadEffect) {
      return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](new Data_Tuple.Tuple(Data_Bounded.bottom(Data_Bounded.boundedInt), Data_Map_Internal.empty))))(function (emitterId) {
          return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(emitterId);
      });
  };
  var fire = function (dictMonadEffect) {
      return function (dictMonadRec) {
          return function (v) {
              return function (i) {
                  return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(v)))(function (v1) {
                      return Control_Safely.for_(Data_Map_Internal.foldableMap)(dictMonadRec)(v1.value1)(function (f) {
                          return f(i);
                      });
                  });
              };
          };
      };
  };
  var emitterSize = function (dictMonadEffect) {
      return function (v) {
          return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(v)))(function (v1) {
              return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Map_Internal.size(v1.value1));
          });
      };
  };
  exports["newEmitter"] = newEmitter;
  exports["unregister"] = unregister;
  exports["register"] = register;
  exports["fire"] = fire;
  exports["emitterSize"] = emitterSize;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Graphics.Glapple.Data.InternalRegistrationIds"] = $PS["Graphics.Glapple.Data.InternalRegistrationIds"] || {};
  var exports = $PS["Graphics.Glapple.Data.InternalRegistrationIds"];
  var Control_Bind = $PS["Control.Bind"];
  var Graphics_Glapple_Data_Emitter = $PS["Graphics.Glapple.Data.Emitter"];                
  var unregisterGame = function (dictMonadEffect) {
      return function (v) {
          return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Graphics_Glapple_Data_Emitter.unregister(dictMonadEffect)(v.inputId))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Graphics_Glapple_Data_Emitter.unregister(dictMonadEffect)(v.renderId))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Graphics_Glapple_Data_Emitter.unregister(dictMonadEffect)(v.outputId))(function () {
                      return Graphics_Glapple_Data_Emitter.unregister(dictMonadEffect)(v.eventId);
                  });
              });
          });
      };
  };
  exports["unregisterGame"] = unregisterGame;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Graphics.Glapple.GlappleM"] = $PS["Graphics.Glapple.GlappleM"] || {};
  var exports = $PS["Graphics.Glapple.GlappleM"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Maybe_Trans = $PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Set = $PS["Data.Set"];
  var Data_Time = $PS["Data.Time"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Effect_Now = $PS["Effect.Now"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Graphics_Glapple_Data_Emitter = $PS["Graphics.Glapple.Data.Emitter"];
  var Graphics_Glapple_Data_Event = $PS["Graphics.Glapple.Data.Event"];
  var Graphics_Glapple_Data_InternalRegistrationIds = $PS["Graphics.Glapple.Data.InternalRegistrationIds"];                
  var GlappleM = function (x) {
      return x;
  };
  var monadGlappleM = Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Maybe_Trans.monadMaybeT(Effect.monadEffect));
  var monadEffectGlappleM = {
      liftEffect: function (e) {
          return GlappleM(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Control_Monad_Maybe_Trans.monadMaybeT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(Effect.monadEffect)(e)));
      },
      Monad0: function () {
          return monadGlappleM;
      }
  };
  var monadAskInternalStateGlap = Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Maybe_Trans.monadMaybeT(Effect.monadEffect));
  var bindGlappleM = Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Maybe_Trans.bindMaybeT(Effect.monadEffect));   
  var applicativeGlappleM = Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Maybe_Trans.applicativeMaybeT(Effect.monadEffect));
  var runGlappleM = function (v) {
      return function (f) {
          return Control_Monad_Maybe_Trans.runMaybeT(Control_Monad_Reader_Trans.runReaderT(v)(f));
      };
  };
  var toEffect = function (glappleM) {
      return Control_Bind.bind(bindGlappleM)(Control_Monad_Reader_Class.ask(monadAskInternalStateGlap))(function (internalState) {
          return Control_Applicative.pure(applicativeGlappleM)(function (x) {
              return runGlappleM(glappleM(x))(internalState);
          });
      });
  };
  var raise = function (output) {
      return Control_Bind.bind(bindGlappleM)(Control_Monad_Reader_Class.ask(monadAskInternalStateGlap))(function (v) {
          return Effect_Class.liftEffect(monadEffectGlappleM)(Graphics_Glapple_Data_Emitter.fire(Effect_Class.monadEffectEffect)(Control_Monad_Rec_Class.monadRecEffect)(v.outputEmitter)(output));
      });
  };
  var putGameState = function (x) {
      return Control_Bind.bind(bindGlappleM)(Control_Monad_Reader_Class.ask(monadAskInternalStateGlap))(function (v) {
          return Effect_Class.liftEffect(monadEffectGlappleM)(Effect_Ref.write(new Data_Maybe.Just(x))(v.gameStateRef));
      });
  };
  var modifyGameState = function (f) {
      return Control_Bind.bind(bindGlappleM)(Control_Monad_Reader_Class.ask(monadAskInternalStateGlap))(function (v) {
          return Effect_Class.liftEffect(monadEffectGlappleM)(Effect_Ref.modify_(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v.gameStateRef));
      });
  };
  var getMousePosition = Control_Bind.bind(bindGlappleM)(Control_Monad_Reader_Class.ask(monadAskInternalStateGlap))(function (v) {
      return Control_Bind.bind(bindGlappleM)(Effect_Class.liftEffect(monadEffectGlappleM)(Effect_Ref.read(v.mousePositionRef)))(function (mousePosition) {
          return Control_Applicative.pure(applicativeGlappleM)(mousePosition);
      });
  });
  var getLocalTime = Control_Bind.bind(bindGlappleM)(Control_Monad_Reader_Class.ask(monadAskInternalStateGlap))(function (v) {
      return Control_Bind.bind(bindGlappleM)(Effect_Class.liftEffect(monadEffectGlappleM)(Effect_Ref.read(v.localInitTimeRef)))(function (initTimeMaybe) {
          return Control_Bind.bind(bindGlappleM)(Effect_Class.liftEffect(monadEffectGlappleM)(Effect_Now.nowTime))(function (nowT) {
              var f = function (initTime) {
                  var v1 = Data_Time.diff(Data_Time_Duration.durationMilliseconds)(nowT)(initTime);
                  return v1 / 1000.0;
              };
              var totalTime = Data_Functor.map(Data_Maybe.functorMaybe)(f)(initTimeMaybe);
              return GlappleM(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Control_Monad_Maybe_Trans.monadMaybeT(Effect.monadEffect))(Control_Monad_Maybe_Trans.MaybeT(Control_Applicative.pure(Effect.applicativeEffect)(totalTime))));
          });
      });
  });
  var getKeyState = function (code) {
      return Control_Bind.bind(bindGlappleM)(Control_Monad_Reader_Class.ask(monadAskInternalStateGlap))(function (v) {
          return Control_Bind.bind(bindGlappleM)(Effect_Class.liftEffect(monadEffectGlappleM)(Effect_Ref.read(v.keyStateRef)))(function (keyState) {
              return Control_Applicative.pure(applicativeGlappleM)(Data_Set.member(Graphics_Glapple_Data_Event.ordKeyCode)(code)(keyState));
          });
      });
  }; 
  var getGameState = Control_Bind.bind(bindGlappleM)(Control_Monad_Reader_Class.ask(monadAskInternalStateGlap))(function (v) {
      return Control_Bind.bind(bindGlappleM)(Effect_Class.liftEffect(monadEffectGlappleM)(Effect_Ref.read(v.gameStateRef)))(function (gameState) {
          return GlappleM(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Control_Monad_Maybe_Trans.monadMaybeT(Effect.monadEffect))(Control_Monad_Maybe_Trans.MaybeT(Control_Applicative.pure(Effect.applicativeEffect)(gameState))));
      });
  });
  var destroy = Control_Bind.bind(bindGlappleM)(Control_Monad_Reader_Class.ask(monadAskInternalStateGlap))(function (v) {
      return Control_Bind.bind(bindGlappleM)(Effect_Class.liftEffect(monadEffectGlappleM)(Effect_Ref.read(v.internalRegistrationIdsRef)))(function (internalRegistrationIdsMaybe) {
          return Control_Bind.discard(Control_Bind.discardUnit)(bindGlappleM)((function () {
              if (internalRegistrationIdsMaybe instanceof Data_Maybe.Just) {
                  return Graphics_Glapple_Data_InternalRegistrationIds.unregisterGame(monadEffectGlappleM)(internalRegistrationIdsMaybe.value0);
              };
              if (internalRegistrationIdsMaybe instanceof Data_Maybe.Nothing) {
                  return Effect_Class_Console.log(monadEffectGlappleM)("Glapple Warning: \u521d\u671f\u5316\u524d\u306b destroy \u304c\u547c\u3070\u308c\u305f\u306e\u3067\uff0c\u30b2\u30fc\u30e0\u3092\u7834\u68c4\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\uff0e\u610f\u56f3\u3057\u3066\u3044\u306a\u3044\u6319\u52d5\u3067\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e");
              };
              throw new Error("Failed pattern match at Graphics.Glapple.GlappleM (line 117, column 3 - line 120, column 96): " + [ internalRegistrationIdsMaybe.constructor.name ]);
          })())(function () {
              return GlappleM(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Control_Monad_Maybe_Trans.monadMaybeT(Effect.monadEffect))(Control_Monad_Maybe_Trans.MaybeT(Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value))));
          });
      });
  });
  var $$break = GlappleM(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Control_Monad_Maybe_Trans.monadMaybeT(Effect.monadEffect))(Control_Monad_Maybe_Trans.MaybeT(Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value))));
  exports["runGlappleM"] = runGlappleM;
  exports["getGameState"] = getGameState;
  exports["putGameState"] = putGameState;
  exports["modifyGameState"] = modifyGameState;
  exports["getLocalTime"] = getLocalTime;
  exports["raise"] = raise;
  exports["destroy"] = destroy;
  exports["getKeyState"] = getKeyState;
  exports["getMousePosition"] = getMousePosition;
  exports["break"] = $$break;
  exports["toEffect"] = toEffect;
  exports["applicativeGlappleM"] = applicativeGlappleM;
  exports["bindGlappleM"] = bindGlappleM;
  exports["monadAskInternalStateGlap"] = monadAskInternalStateGlap;
  exports["monadEffectGlappleM"] = monadEffectGlappleM;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Graphics.Glapple.Data.GameSpec"] = $PS["Graphics.Glapple.Data.GameSpec"] || {};
  var exports = $PS["Graphics.Glapple.Data.GameSpec"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Graphics_Glapple_GlappleM = $PS["Graphics.Glapple.GlappleM"];
  var mkInitGameStateM = function (dictApplicative) {
      return Control_Applicative.pure(dictApplicative);
  };
  var mkHandlerM = function (f) {
      return function (e) {
          return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getGameState)(function (gameState) {
              return Graphics_Glapple_GlappleM.putGameState(f(e)(gameState));
          });
      };
  };
  exports["mkInitGameStateM"] = mkInitGameStateM;
  exports["mkHandlerM"] = mkHandlerM;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["GlappleExamples.Games.Apple"] = $PS["GlappleExamples.Games.Apple"] || {};
  var exports = $PS["GlappleExamples.Games.Apple"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Unit = $PS["Data.Unit"];
  var GlappleExamples_Sprites = $PS["GlappleExamples.Sprites"];
  var Graphics_Glapple_Data_Event = $PS["Graphics.Glapple.Data.Event"];
  var Graphics_Glapple_Data_GameSpec = $PS["Graphics.Glapple.Data.GameSpec"];
  var Graphics_Glapple_Data_Picture = $PS["Graphics.Glapple.Data.Picture"];
  var Graphics_Glapple_GlappleM = $PS["Graphics.Glapple.GlappleM"];
  var $$Math = $PS["Math"];                
  var StartRotate = (function () {
      function StartRotate() {

      };
      StartRotate.value = new StartRotate();
      return StartRotate;
  })();
  var gameSpec = (function () {
      var render = Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getLocalTime)(function (time) {
          return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getGameState)(function (v) {
              var revolution = (function () {
                  if (v.rotating) {
                      return Graphics_Glapple_Data_Picture.rotate(0.5 * $$Math.pi * time * 2.0);
                  };
                  return Control_Category.identity(Control_Category.categoryFn);
              })();
              return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(Graphics_Glapple_Data_Picture.translate(160.0)(160.0)(revolution(Graphics_Glapple_Data_Picture.translate(80.0)(80.0)(Graphics_Glapple_Data_Picture.rotate(2.0 * $$Math.pi * time * 2.0)(Graphics_Glapple_Data_Picture.scale(6.0)(6.0)(Graphics_Glapple_Data_Picture.translate(-16.0)(-16.0)(Graphics_Glapple_Data_Picture.sprite(GlappleExamples_Sprites.Apple.value))))))));
          });
      });
      var inputHandler = Graphics_Glapple_Data_GameSpec.mkHandlerM(function (v) {
          return function (v1) {
              return {
                  rotating: true
              };
          };
      });
      var eventHandler = function (v) {
          if (v instanceof Graphics_Glapple_Data_Event.KeyEvent && (v.value0.keyCode instanceof Graphics_Glapple_Data_Event.Keyboard && (v.value0.keyCode.value0 === "KeyW" && v.value0.keyState instanceof Graphics_Glapple_Data_Event.KeyDown))) {
              return Graphics_Glapple_GlappleM.modifyGameState(function (v1) {
                  return {
                      rotating: !v1.rotating
                  };
              });
          };
          return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(Data_Unit.unit);
      };
      return {
          eventHandler: eventHandler,
          inputHandler: inputHandler,
          render: render,
          initGameState: Graphics_Glapple_Data_GameSpec.mkInitGameStateM(Graphics_Glapple_GlappleM.applicativeGlappleM)({
              rotating: false
          })
      };
  })();
  exports["StartRotate"] = StartRotate;
  exports["gameSpec"] = gameSpec;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Graphics.Glapple.Data.GameSpecM"] = $PS["Graphics.Glapple.Data.GameSpecM"] || {};
  var exports = $PS["Graphics.Glapple.Data.GameSpecM"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];
  var defaultHandler = function (dictApplicative) {
      return Data_Function["const"](Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
  };
  exports["defaultHandler"] = defaultHandler;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["GlappleExamples.Games.DestroyTest"] = $PS["GlappleExamples.Games.DestroyTest"] || {};
  var exports = $PS["GlappleExamples.Games.DestroyTest"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Unit = $PS["Data.Unit"];
  var GlappleExamples_Sprites = $PS["GlappleExamples.Sprites"];
  var Graphics_Glapple_Data_Event = $PS["Graphics.Glapple.Data.Event"];
  var Graphics_Glapple_Data_GameSpecM = $PS["Graphics.Glapple.Data.GameSpecM"];
  var Graphics_Glapple_Data_Picture = $PS["Graphics.Glapple.Data.Picture"];
  var Graphics_Glapple_GlappleM = $PS["Graphics.Glapple.GlappleM"];
  var $$Math = $PS["Math"];                
  var gameSpec = (function () {
      var render = Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getGameState)(function (v) {
          return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(Graphics_Glapple_Data_Picture.translate(v.x)(20.0)(Graphics_Glapple_Data_Picture.rotate((2.0 * $$Math.pi * v.x) / 200.0)(Graphics_Glapple_Data_Picture.translate(-16.0)(-16.0)(Graphics_Glapple_Data_Picture.sprite(GlappleExamples_Sprites.Apple.value)))));
      });
      var eventHandler = function (v) {
          if (v instanceof Graphics_Glapple_Data_Event.Update) {
              return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getGameState)(function (v1) {
                  return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getKeyState(new Graphics_Glapple_Data_Event.Keyboard("KeyD")))(function (d) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_GlappleM.bindGlappleM)(Control_Applicative.when(Graphics_Glapple_GlappleM.applicativeGlappleM)(d)(Graphics_Glapple_GlappleM.putGameState({
                          x: v1.x + v.value0.deltaTime * 80.0
                      })))(function () {
                          return Control_Applicative.when(Graphics_Glapple_GlappleM.applicativeGlappleM)(v1.x > 160.0)(Graphics_Glapple_GlappleM.destroy);
                      });
                  });
              });
          };
          if (v instanceof Graphics_Glapple_Data_Event.KeyEvent && (v.value0.keyCode instanceof Graphics_Glapple_Data_Event.Keyboard && (v.value0.keyCode.value0 === "KeyS" && v.value0.keyState instanceof Graphics_Glapple_Data_Event.KeyDown))) {
              return Graphics_Glapple_GlappleM.destroy;
          };
          return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(Data_Unit.unit);
      };
      return {
          eventHandler: eventHandler,
          inputHandler: Graphics_Glapple_Data_GameSpecM.defaultHandler(Graphics_Glapple_GlappleM.applicativeGlappleM),
          render: render,
          initGameState: Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)({
              x: 0.0
          })
      };
  })();
  exports["gameSpec"] = gameSpec;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Graphics.Glapple.Data.GameId"] = $PS["Graphics.Glapple.Data.GameId"] || {};
  var exports = $PS["Graphics.Glapple.Data.GameId"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Graphics_Glapple_Data_Emitter = $PS["Graphics.Glapple.Data.Emitter"];
  var Graphics_Glapple_Data_Picture = $PS["Graphics.Glapple.Data.Picture"];                
  var GameId = (function () {
      function GameId(value0) {
          this.value0 = value0;
      };
      GameId.create = function (value0) {
          return new GameId(value0);
      };
      return GameId;
  })();
  var tell = function (dictMonadEffect) {
      return function (v) {
          return function (input) {
              return Effect_Class.liftEffect(dictMonadEffect)(Graphics_Glapple_Data_Emitter.fire(Effect_Class.monadEffectEffect)(Control_Monad_Rec_Class.monadRecEffect)(v.value0.inputEmitter)(input));
          };
      };
  };
  var renderGame = function (v) {
      return Graphics_Glapple_Data_Picture["absorb'"](function (context2D) {
          return function (canvasImageSources) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Graphics_Glapple_Data_Emitter.fire(Effect_Aff.monadEffectAff)(Effect_Aff.monadRecAff)(v.value0.renderEmitter)({
                  context2D: context2D,
                  canvasImageSources: canvasImageSources
              }))(function () {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Graphics_Glapple_Data_Picture.empty);
              });
          };
      });
  };
  var $$null = function (dictMonadEffect) {
      return function (v) {
          return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Graphics_Glapple_Data_Emitter.emitterSize(dictMonadEffect)(v.value0.inputEmitter))(function (inputS) {
              return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Graphics_Glapple_Data_Emitter.emitterSize(dictMonadEffect)(v.value0.renderEmitter))(function (renderS) {
                  return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(inputS === 0 && renderS === 0);
              });
          });
      };
  };
  var emptyGameId = function (dictBind) {
      return function (dictMonadEffect) {
          return Control_Bind.bind(dictBind)(Graphics_Glapple_Data_Emitter.newEmitter(dictMonadEffect))(function (inputEmitter) {
              return Control_Bind.bind(dictBind)(Graphics_Glapple_Data_Emitter.newEmitter(dictMonadEffect))(function (renderEmitter) {
                  return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(new GameId({
                      inputEmitter: inputEmitter,
                      renderEmitter: renderEmitter
                  }));
              });
          });
      };
  };
  exports["GameId"] = GameId;
  exports["tell"] = tell;
  exports["renderGame"] = renderGame;
  exports["emptyGameId"] = emptyGameId;
  exports["null"] = $$null;
})(PS);
(function(exports) {
  "use strict";

  exports.createCanvasElement = () => document.createElement("canvas");
})(PS["Graphics.Glapple.GameRunnerM"] = PS["Graphics.Glapple.GameRunnerM"] || {});
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Web.HTML.HTMLCanvasElement"] = $PS["Web.HTML.HTMLCanvasElement"] || {};
  var exports = $PS["Web.HTML.HTMLCanvasElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  // - CSSOM ---------------------------------------------------------------------

  exports.getBoundingClientRect = function (el) {
    return function () {
      var rect = el.getBoundingClientRect();
      return {
        top: rect.top,
        right: rect.right,
        bottom: rect.bottom,
        left: rect.left,
        width: rect.width,
        height: rect.height
      };
    };
  };
})(PS["Web.HTML.HTMLElement"] = PS["Web.HTML.HTMLElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var $foreign = $PS["Web.HTML.HTMLElement"];
  exports["getBoundingClientRect"] = $foreign.getBoundingClientRect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports.code = function (e) {
    return e.code;
  };

  exports.repeat = function (e) {
    return e.repeat;
  };
})(PS["Web.UIEvent.KeyboardEvent"] = PS["Web.UIEvent.KeyboardEvent"] || {});
(function(exports) {
  "use strict";

  exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
    if (typeof window !== "undefined") {
      var ty = window[name];
      if (ty != null && value instanceof ty) {
        return just(value);
      }
    }
    var obj = value;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name) {
        return just(value);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  };
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Web.Internal.FFI"] = $PS["Web.Internal.FFI"] || {};
  var exports = $PS["Web.Internal.FFI"];
  var $foreign = $PS["Web.Internal.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var unsafeReadProtoTagged = function (name) {
      return function (value) {
          return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
      };
  };
  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Web.UIEvent.KeyboardEvent"] = $PS["Web.UIEvent.KeyboardEvent"] || {};
  var exports = $PS["Web.UIEvent.KeyboardEvent"];
  var $foreign = $PS["Web.UIEvent.KeyboardEvent"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                           
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("KeyboardEvent");
  exports["fromEvent"] = fromEvent;
  exports["code"] = $foreign.code;
  exports["repeat"] = $foreign.repeat;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Web.UIEvent.KeyboardEvent.EventTypes"] = $PS["Web.UIEvent.KeyboardEvent.EventTypes"] || {};
  var exports = $PS["Web.UIEvent.KeyboardEvent.EventTypes"];
  var keyup = "keyup";
  var keydown = "keydown";
  exports["keydown"] = keydown;
  exports["keyup"] = keyup;
})(PS);
(function(exports) {
  "use strict";

  exports.clientX = function (e) {
    return e.clientX;
  };

  exports.clientY = function (e) {
    return e.clientY;
  };

  exports.button = function (e) {
    return e.button;
  };
})(PS["Web.UIEvent.MouseEvent"] = PS["Web.UIEvent.MouseEvent"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Web.UIEvent.MouseEvent"] = $PS["Web.UIEvent.MouseEvent"] || {};
  var exports = $PS["Web.UIEvent.MouseEvent"];
  var $foreign = $PS["Web.UIEvent.MouseEvent"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                        
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("MouseEvent");
  exports["fromEvent"] = fromEvent;
  exports["clientX"] = $foreign.clientX;
  exports["clientY"] = $foreign.clientY;
  exports["button"] = $foreign.button;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Web.UIEvent.MouseEvent.EventTypes"] = $PS["Web.UIEvent.MouseEvent.EventTypes"] || {};
  var exports = $PS["Web.UIEvent.MouseEvent.EventTypes"];
  var mouseup = "mouseup";  
  var mousemove = "mousemove";  
  var mousedown = "mousedown";
  exports["mousedown"] = mousedown;
  exports["mousemove"] = mousemove;
  exports["mouseup"] = mouseup;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Graphics.Glapple.GameRunnerM"] = $PS["Graphics.Glapple.GameRunnerM"] || {};
  var exports = $PS["Graphics.Glapple.GameRunnerM"];
  var $foreign = $PS["Graphics.Glapple.GameRunnerM"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Set = $PS["Data.Set"];
  var Data_Time = $PS["Data.Time"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Effect_Now = $PS["Effect.Now"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Graphics_Glapple_Data_Emitter = $PS["Graphics.Glapple.Data.Emitter"];
  var Graphics_Glapple_Data_Event = $PS["Graphics.Glapple.Data.Event"];
  var Graphics_Glapple_Data_GameId = $PS["Graphics.Glapple.Data.GameId"];
  var Graphics_Glapple_Data_Picture = $PS["Graphics.Glapple.Data.Picture"];
  var Graphics_Glapple_Data_SpriteData = $PS["Graphics.Glapple.Data.SpriteData"];
  var Graphics_Glapple_GlappleM = $PS["Graphics.Glapple.GlappleM"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLCanvasElement = $PS["Web.HTML.HTMLCanvasElement"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var Web_UIEvent_KeyboardEvent = $PS["Web.UIEvent.KeyboardEvent"];
  var Web_UIEvent_KeyboardEvent_EventTypes = $PS["Web.UIEvent.KeyboardEvent.EventTypes"];
  var Web_UIEvent_MouseEvent = $PS["Web.UIEvent.MouseEvent"];
  var Web_UIEvent_MouseEvent_EventTypes = $PS["Web.UIEvent.MouseEvent.EventTypes"];                
  var makeRenderHandler = function (internalState) {
      return function (render) {
          return function (v) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromMaybe(Graphics_Glapple_Data_Picture.empty))(Graphics_Glapple_GlappleM.runGlappleM(render)(internalState))))(function (pic) {
                  return Graphics_Glapple_Data_Picture.drawPicture(v.context2D)(v.canvasImageSources)(pic);
              });
          };
      };
  };
  var makeHandlerEffect = function (internalState) {
      return function (eventHandler) {
          return function (e) {
              return Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromMaybe(Data_Unit.unit))(Graphics_Glapple_GlappleM.runGlappleM(eventHandler(e))(internalState));
          };
      };
  };
  var runChildGameM = function (v) {
      return function (outputHandler) {
          return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Control_Monad_Reader_Class.ask(Graphics_Glapple_GlappleM.monadAskInternalStateGlap))(function (v1) {
              return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (gameStateRef) {
                  return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (internalRegistrationIdsRef) {
                      return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (localInitTimeRef) {
                          return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_Data_Emitter.newEmitter(Graphics_Glapple_GlappleM.monadEffectGlappleM))(function (inputEmitter) {
                              return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_Data_Emitter.newEmitter(Graphics_Glapple_GlappleM.monadEffectGlappleM))(function (outputEmitter) {
                                  return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_Data_Emitter.newEmitter(Graphics_Glapple_GlappleM.monadEffectGlappleM))(function (renderEmitter) {
                                      var childInternalState = {
                                          eventEmitter: v1.eventEmitter,
                                          outputEmitter: outputEmitter,
                                          initTimeRef: v1.initTimeRef,
                                          localInitTimeRef: localInitTimeRef,
                                          gameStateRef: gameStateRef,
                                          internalRegistrationIdsRef: internalRegistrationIdsRef,
                                          keyStateRef: v1.keyStateRef,
                                          mousePositionRef: v1.mousePositionRef
                                      };
                                      var renderHandler_ = makeRenderHandler(childInternalState)(v.render);
                                      var outputHandler_ = makeHandlerEffect(v1)(outputHandler);
                                      var inputHandler_ = makeHandlerEffect(childInternalState)(v.inputHandler);
                                      var eventHandler_ = makeHandlerEffect(childInternalState)(v.eventHandler);
                                      return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_Data_Emitter.register(Graphics_Glapple_GlappleM.monadEffectGlappleM)(inputEmitter)(inputHandler_))(function (inputId) {
                                          return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_Data_Emitter.register(Graphics_Glapple_GlappleM.monadEffectGlappleM)(outputEmitter)(outputHandler_))(function (outputId) {
                                              return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_Data_Emitter.register(Graphics_Glapple_GlappleM.monadEffectGlappleM)(renderEmitter)(renderHandler_))(function (renderId) {
                                                  return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_Data_Emitter.register(Graphics_Glapple_GlappleM.monadEffectGlappleM)(v1.eventEmitter)(eventHandler_))(function (eventId) {
                                                      var internalRegistrationIds = {
                                                          inputId: inputId,
                                                          outputId: outputId,
                                                          eventId: eventId,
                                                          renderId: renderId
                                                      };
                                                      var gameId = new Graphics_Glapple_Data_GameId.GameId({
                                                          inputEmitter: inputEmitter,
                                                          renderEmitter: renderEmitter
                                                      });
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_GlappleM.bindGlappleM)(Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Effect_Ref.write(new Data_Maybe.Just(internalRegistrationIds))(internalRegistrationIdsRef)))(function () {
                                                          return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Data_Function.flip(Graphics_Glapple_GlappleM.runGlappleM)(childInternalState)(Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(v.initGameState)(function (gameState) {
                                                              return Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Effect_Ref.write(new Data_Maybe.Just(gameState))(gameStateRef));
                                                          }))))(function (res) {
                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_GlappleM.bindGlappleM)(Control_Applicative.when(Graphics_Glapple_GlappleM.applicativeGlappleM)(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqUnit))(res)(Data_Maybe.Nothing.value))(Effect_Class_Console.log(Graphics_Glapple_GlappleM.monadEffectGlappleM)("Glapple Warning: Game initialization failed, possibly due to the use of functions such as getState in initGameState.")))(function () {
                                                                  return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Effect_Now.nowTime))(function (time) {
                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_GlappleM.bindGlappleM)(Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Effect_Ref.write(new Data_Maybe.Just(time))(localInitTimeRef)))(function () {
                                                                          return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(gameId);
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      };
  };
  var runChildGameM_ = function (gameSpecM) {
      return runChildGameM(gameSpecM)(function (v) {
          return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(Data_Unit.unit);
      });
  };
  var runGameWithM = function (v) {
      return function (v1) {
          return function (outputHandler) {
              return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Control_Monad_Reader_Class.ask(Graphics_Glapple_GlappleM.monadAskInternalStateGlap))(function (v2) {
                  return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (gameStateRef) {
                      return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (internalRegistrationIdsRef) {
                          return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (localInitTimeRef) {
                              return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_Data_Emitter.newEmitter(Graphics_Glapple_GlappleM.monadEffectGlappleM))(function (outputEmitter) {
                                  var childInternalState = {
                                      eventEmitter: v2.eventEmitter,
                                      outputEmitter: outputEmitter,
                                      initTimeRef: v2.initTimeRef,
                                      gameStateRef: gameStateRef,
                                      internalRegistrationIdsRef: internalRegistrationIdsRef,
                                      keyStateRef: v2.keyStateRef,
                                      mousePositionRef: v2.mousePositionRef,
                                      localInitTimeRef: localInitTimeRef
                                  };
                                  var renderHandler_ = makeRenderHandler(childInternalState)(v1.render);
                                  var outputHandler_ = makeHandlerEffect(v2)(outputHandler);
                                  var inputHandler_ = makeHandlerEffect(childInternalState)(v1.inputHandler);
                                  var eventHandler_ = makeHandlerEffect(childInternalState)(v1.eventHandler);
                                  return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_Data_Emitter.register(Graphics_Glapple_GlappleM.monadEffectGlappleM)(v.value0.inputEmitter)(inputHandler_))(function (inputId) {
                                      return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_Data_Emitter.register(Graphics_Glapple_GlappleM.monadEffectGlappleM)(outputEmitter)(outputHandler_))(function (outputId) {
                                          return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_Data_Emitter.register(Graphics_Glapple_GlappleM.monadEffectGlappleM)(v.value0.renderEmitter)(renderHandler_))(function (renderId) {
                                              return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_Data_Emitter.register(Graphics_Glapple_GlappleM.monadEffectGlappleM)(v2.eventEmitter)(eventHandler_))(function (eventId) {
                                                  var internalRegistrationIds = {
                                                      inputId: inputId,
                                                      outputId: outputId,
                                                      eventId: eventId,
                                                      renderId: renderId
                                                  };
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_GlappleM.bindGlappleM)(Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Effect_Ref.write(new Data_Maybe.Just(internalRegistrationIds))(internalRegistrationIdsRef)))(function () {
                                                      return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Data_Function.flip(Graphics_Glapple_GlappleM.runGlappleM)(childInternalState)(Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(v1.initGameState)(function (gameState) {
                                                          return Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Effect_Ref.write(new Data_Maybe.Just(gameState))(gameStateRef));
                                                      }))))(function (res) {
                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_GlappleM.bindGlappleM)(Control_Applicative.when(Graphics_Glapple_GlappleM.applicativeGlappleM)(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqUnit))(res)(Data_Maybe.Nothing.value))(Effect_Class_Console.log(Graphics_Glapple_GlappleM.monadEffectGlappleM)("Glapple Warning: Game initialization failed, possibly due to the use of functions such as getState in initGameState.")))(function () {
                                                              return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Effect_Now.nowTime))(function (time) {
                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_GlappleM.bindGlappleM)(Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Effect_Ref.write(new Data_Maybe.Just(time))(localInitTimeRef)))(function () {
                                                                      return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(Data_Unit.unit);
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          };
      };
  };
  var runGameWithM_ = function (gameId) {
      return function (gameSpecM) {
          return runGameWithM(gameId)(gameSpecM)(function (v) {
              return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(Data_Unit.unit);
          });
      };
  };
  var loadImages = function (dictOrd) {
      return function (sprites) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Map_Internal.fromFoldable(dictOrd)(Data_Foldable.foldableArray))(Data_Traversable["for"](Effect_Aff.applicativeAff)(Data_Traversable.traversableArray)(sprites)(function (v) {
              return Data_Functor.map(Effect_Aff.functorAff)(function (v1) {
                  return new Data_Tuple.Tuple(v.value0, v1);
              })(Graphics_Glapple_Data_Picture.tryLoadImageAff(v.value1));
          })))(function (tmp) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(tmp);
          });
      };
  };
  var runGameM = function (dictOrd) {
      return function (fps) {
          return function (canvasElement) {
              return function (v) {
                  return function (spriteData) {
                      return function (v1) {
                          return function (outputHandler) {
                              return function __do() {
                                  var gameStateRef = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                                  var initTimeRef = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                                  var internalRegistrationIdsRef = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                                  var keyStateRef = Effect_Ref["new"](Data_Monoid.mempty(Data_Set.monoidSet(Graphics_Glapple_Data_Event.ordKeyCode)))();
                                  var mousePositionRef = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                                  var localInitTimeRef = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                                  var inputEmitter = Graphics_Glapple_Data_Emitter.newEmitter(Effect_Class.monadEffectEffect)();
                                  var outputEmitter = Graphics_Glapple_Data_Emitter.newEmitter(Effect_Class.monadEffectEffect)();
                                  var renderEmitter = Graphics_Glapple_Data_Emitter.newEmitter(Effect_Class.monadEffectEffect)();
                                  var eventEmitter = Graphics_Glapple_Data_Emitter.newEmitter(Effect_Class.monadEffectEffect)();
                                  var internalState = {
                                      eventEmitter: eventEmitter,
                                      outputEmitter: outputEmitter,
                                      initTimeRef: initTimeRef,
                                      gameStateRef: gameStateRef,
                                      internalRegistrationIdsRef: internalRegistrationIdsRef,
                                      keyStateRef: keyStateRef,
                                      mousePositionRef: mousePositionRef,
                                      localInitTimeRef: localInitTimeRef
                                  };
                                  var renderHandler_ = makeRenderHandler(internalState)(v1.render);
                                  var inputHandler_ = makeHandlerEffect(internalState)(v1.inputHandler);
                                  var eventHandler_ = makeHandlerEffect(internalState)(v1.eventHandler);
                                  var inputId = Graphics_Glapple_Data_Emitter.register(Effect_Class.monadEffectEffect)(inputEmitter)(inputHandler_)();
                                  var outputId = Graphics_Glapple_Data_Emitter.register(Effect_Class.monadEffectEffect)(outputEmitter)(outputHandler)();
                                  var renderId = Graphics_Glapple_Data_Emitter.register(Effect_Class.monadEffectEffect)(renderEmitter)(renderHandler_)();
                                  var eventId = Graphics_Glapple_Data_Emitter.register(Effect_Class.monadEffectEffect)(eventEmitter)(eventHandler_)();
                                  var internalRegistrationIds = {
                                      inputId: inputId,
                                      outputId: outputId,
                                      renderId: renderId,
                                      eventId: eventId
                                  };
                                  var gameId = new Graphics_Glapple_Data_GameId.GameId({
                                      inputEmitter: inputEmitter,
                                      renderEmitter: renderEmitter
                                  });
                                  Effect_Ref.write(new Data_Maybe.Just(internalRegistrationIds))(internalRegistrationIdsRef)();
                                  var offCanvas = $foreign.createCanvasElement();
                                  var offContext2D = Graphics_Canvas.getContext2D(offCanvas)();
                                  var context2D = Graphics_Canvas.getContext2D(canvasElement)();
                                  Graphics_Canvas.setCanvasHeight(offCanvas)(v.height)();
                                  Graphics_Canvas.setCanvasWidth(offCanvas)(v.width)();
                                  Graphics_Canvas.setCanvasHeight(canvasElement)(v.height)();
                                  Graphics_Canvas.setCanvasWidth(canvasElement)(v.width)();
                                  var w = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
                                  var keyDownHandler = Web_Event_EventTarget.eventListener(function (e) {
                                      var v2 = Web_UIEvent_KeyboardEvent.fromEvent(e);
                                      if (v2 instanceof Data_Maybe.Just && !Web_UIEvent_KeyboardEvent.repeat(v2.value0)) {
                                          return function __do() {
                                              Graphics_Glapple_Data_Emitter.fire(Effect_Class.monadEffectEffect)(Control_Monad_Rec_Class.monadRecEffect)(eventEmitter)(new Graphics_Glapple_Data_Event.KeyEvent({
                                                  keyCode: Graphics_Glapple_Data_Event.Keyboard.create(Web_UIEvent_KeyboardEvent.code(v2.value0)),
                                                  keyState: Graphics_Glapple_Data_Event.KeyDown.value
                                              }))();
                                              return Effect_Ref.modify_(Data_Set.insert(Graphics_Glapple_Data_Event.ordKeyCode)(Graphics_Glapple_Data_Event.Keyboard.create(Web_UIEvent_KeyboardEvent.code(v2.value0))))(keyStateRef)();
                                          };
                                      };
                                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                                  })();
                                  Web_Event_EventTarget.addEventListener(Web_UIEvent_KeyboardEvent_EventTypes.keydown)(keyDownHandler)(false)(w)();
                                  var keyUpHandler = Web_Event_EventTarget.eventListener(function (e) {
                                      var v2 = Web_UIEvent_KeyboardEvent.fromEvent(e);
                                      if (v2 instanceof Data_Maybe.Just && !Web_UIEvent_KeyboardEvent.repeat(v2.value0)) {
                                          return function __do() {
                                              Graphics_Glapple_Data_Emitter.fire(Effect_Class.monadEffectEffect)(Control_Monad_Rec_Class.monadRecEffect)(eventEmitter)(new Graphics_Glapple_Data_Event.KeyEvent({
                                                  keyCode: Graphics_Glapple_Data_Event.Keyboard.create(Web_UIEvent_KeyboardEvent.code(v2.value0)),
                                                  keyState: Graphics_Glapple_Data_Event.KeyUp.value
                                              }))();
                                              return Effect_Ref.modify_(Data_Set["delete"](Graphics_Glapple_Data_Event.ordKeyCode)(Graphics_Glapple_Data_Event.Keyboard.create(Web_UIEvent_KeyboardEvent.code(v2.value0))))(keyStateRef)();
                                          };
                                      };
                                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                                  })();
                                  Web_Event_EventTarget.addEventListener(Web_UIEvent_KeyboardEvent_EventTypes.keyup)(keyUpHandler)(false)(w)();
                                  var cTarget = Web_HTML_HTMLCanvasElement.toEventTarget(canvasElement);
                                  var mouseDownHandler = Web_Event_EventTarget.eventListener(function (e) {
                                      var v2 = Web_UIEvent_MouseEvent.fromEvent(e);
                                      if (v2 instanceof Data_Maybe.Just) {
                                          var button = (function () {
                                              var v3 = Web_UIEvent_MouseEvent.button(v2.value0);
                                              if (v3 === 0) {
                                                  return new Data_Maybe.Just(Graphics_Glapple_Data_Event.Left.value);
                                              };
                                              if (v3 === 1) {
                                                  return new Data_Maybe.Just(Graphics_Glapple_Data_Event.Center.value);
                                              };
                                              if (v3 === 2) {
                                                  return new Data_Maybe.Just(Graphics_Glapple_Data_Event.Right.value);
                                              };
                                              return Data_Maybe.Nothing.value;
                                          })();
                                          if (button instanceof Data_Maybe.Just) {
                                              return function __do() {
                                                  Graphics_Glapple_Data_Emitter.fire(Effect_Class.monadEffectEffect)(Control_Monad_Rec_Class.monadRecEffect)(eventEmitter)(new Graphics_Glapple_Data_Event.KeyEvent({
                                                      keyCode: Graphics_Glapple_Data_Event.Mouse.create(button.value0),
                                                      keyState: Graphics_Glapple_Data_Event.KeyDown.value
                                                  }))();
                                                  return Effect_Ref.modify_(Data_Set.insert(Graphics_Glapple_Data_Event.ordKeyCode)(Graphics_Glapple_Data_Event.Mouse.create(button.value0)))(keyStateRef)();
                                              };
                                          };
                                          if (button instanceof Data_Maybe.Nothing) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                                          };
                                          throw new Error("Failed pattern match at Graphics.Glapple.GameRunnerM (line 302, column 7 - line 306, column 29): " + [ button.constructor.name ]);
                                      };
                                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                                  })();
                                  Web_Event_EventTarget.addEventListener(Web_UIEvent_MouseEvent_EventTypes.mousedown)(mouseDownHandler)(false)(cTarget)();
                                  var mouseUpHandler = Web_Event_EventTarget.eventListener(function (e) {
                                      var v2 = Web_UIEvent_MouseEvent.fromEvent(e);
                                      if (v2 instanceof Data_Maybe.Just) {
                                          var button = (function () {
                                              var v3 = Web_UIEvent_MouseEvent.button(v2.value0);
                                              if (v3 === 0) {
                                                  return new Data_Maybe.Just(Graphics_Glapple_Data_Event.Left.value);
                                              };
                                              if (v3 === 1) {
                                                  return new Data_Maybe.Just(Graphics_Glapple_Data_Event.Center.value);
                                              };
                                              if (v3 === 2) {
                                                  return new Data_Maybe.Just(Graphics_Glapple_Data_Event.Right.value);
                                              };
                                              return Data_Maybe.Nothing.value;
                                          })();
                                          if (button instanceof Data_Maybe.Just) {
                                              return function __do() {
                                                  Graphics_Glapple_Data_Emitter.fire(Effect_Class.monadEffectEffect)(Control_Monad_Rec_Class.monadRecEffect)(eventEmitter)(new Graphics_Glapple_Data_Event.KeyEvent({
                                                      keyCode: new Graphics_Glapple_Data_Event.Mouse(button.value0),
                                                      keyState: Graphics_Glapple_Data_Event.KeyUp.value
                                                  }))();
                                                  return Effect_Ref.modify_(Data_Set["delete"](Graphics_Glapple_Data_Event.ordKeyCode)(new Graphics_Glapple_Data_Event.Mouse(button.value0)))(keyStateRef)();
                                              };
                                          };
                                          if (button instanceof Data_Maybe.Nothing) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                                          };
                                          throw new Error("Failed pattern match at Graphics.Glapple.GameRunnerM (line 318, column 7 - line 322, column 29): " + [ button.constructor.name ]);
                                      };
                                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                                  })();
                                  Web_Event_EventTarget.addEventListener(Web_UIEvent_MouseEvent_EventTypes.mouseup)(mouseUpHandler)(false)(cTarget)();
                                  var mouseMoveHandler = Web_Event_EventTarget.eventListener(function (e) {
                                      var v2 = Web_UIEvent_MouseEvent.fromEvent(e);
                                      if (v2 instanceof Data_Maybe.Just) {
                                          return function __do() {
                                              var v3 = Web_HTML_HTMLElement.getBoundingClientRect(Web_HTML_HTMLCanvasElement.toHTMLElement(canvasElement))();
                                              var mouseY = Data_Int.toNumber(Web_UIEvent_MouseEvent.clientY(v2.value0)) - v3.top;
                                              var mouseX = Data_Int.toNumber(Web_UIEvent_MouseEvent.clientX(v2.value0)) - v3.left;
                                              Graphics_Glapple_Data_Emitter.fire(Effect_Class.monadEffectEffect)(Control_Monad_Rec_Class.monadRecEffect)(eventEmitter)(new Graphics_Glapple_Data_Event.MouseMove({
                                                  mouseX: mouseX,
                                                  mouseY: mouseY
                                              }))();
                                              return Effect_Ref.write(new Data_Maybe.Just({
                                                  mouseX: mouseX,
                                                  mouseY: mouseY
                                              }))(mousePositionRef)();
                                          };
                                      };
                                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                                  })();
                                  Web_Event_EventTarget.addEventListener(Web_UIEvent_MouseEvent_EventTypes.mousemove)(mouseMoveHandler)(false)(w)();
                                  var res = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Data_Function.flip(Graphics_Glapple_GlappleM.runGlappleM)(internalState)(Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(v1.initGameState)(function (gameState) {
                                      return Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Effect_Ref.write(new Data_Maybe.Just(gameState))(gameStateRef));
                                  })))();
                                  Control_Applicative.when(Effect.applicativeEffect)(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqUnit))(res)(Data_Maybe.Nothing.value))(Effect_Class_Console.log(Effect_Class.monadEffectEffect)("Glapple Warning: Game initialization failed, possibly due to the use of functions such as getState in initGameState."))();
                                  Effect_Aff.launchAff_((function () {
                                      var f = function (v2) {
                                          if (v2 instanceof Graphics_Glapple_Data_SpriteData.FromPicture) {
                                              return Data_Maybe.Nothing.value;
                                          };
                                          if (v2 instanceof Graphics_Glapple_Data_SpriteData.FromImage) {
                                              return Data_Maybe.Just.create(new Data_Tuple.Tuple(v2.value0, v2.value1));
                                          };
                                          throw new Error("Failed pattern match at Graphics.Glapple.GameRunnerM (line 347, column 11 - line 349, column 53): " + [ v2.constructor.name ]);
                                      };
                                      var sprites = Data_Array.catMaybes(Data_Functor.map(Data_Functor.functorArray)(f)(spriteData));
                                      return Control_Bind.bind(Effect_Aff.bindAff)(loadImages(dictOrd)(sprites))(function (canvasImageSourcesTemp) {
                                          var loadPic = function (v2) {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)($foreign.createCanvasElement))(function (tmpCanvas) {
                                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Graphics_Canvas.getContext2D(tmpCanvas)))(function (tmpContext2D) {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Graphics_Canvas.setCanvasHeight(tmpCanvas)(v.height)))(function () {
                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Graphics_Canvas.setCanvasWidth(tmpCanvas)(v.width)))(function () {
                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Graphics_Canvas.clearRect(tmpContext2D)({
                                                                  x: 0.0,
                                                                  y: 0.0,
                                                                  height: v.height,
                                                                  width: v.width
                                                              })))(function () {
                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Graphics_Glapple_Data_Picture.drawPicture(tmpContext2D)(function (s) {
                                                                      return Data_Map_Internal.lookup(dictOrd)(s)(canvasImageSourcesTemp);
                                                                  })(v2.value1))(function () {
                                                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(v2.value0, Graphics_Canvas.canvasElementToImageSource(tmpCanvas)));
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          };
                                          var g = function (v2) {
                                              if (v2 instanceof Graphics_Glapple_Data_SpriteData.FromPicture) {
                                                  return Data_Maybe.Just.create(new Data_Tuple.Tuple(v2.value0, v2.value1));
                                              };
                                              if (v2 instanceof Graphics_Glapple_Data_SpriteData.FromImage) {
                                                  return Data_Maybe.Nothing.value;
                                              };
                                              throw new Error("Failed pattern match at Graphics.Glapple.GameRunnerM (line 353, column 11 - line 355, column 33): " + [ v2.constructor.name ]);
                                          };
                                          var picSprites = Data_Array.catMaybes(Data_Functor.map(Data_Functor.functorArray)(g)(spriteData));
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Map_Internal.fromFoldable(dictOrd)(Data_Foldable.foldableArray))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect_Aff.applicativeAff)(loadPic)(picSprites)))(function (loadedPics) {
                                              var canvasImageSourcesMap = Data_Map_Internal.union(dictOrd)(canvasImageSourcesTemp)(loadedPics);
                                              var canvasImageSources = function (s) {
                                                  return Data_Map_Internal.lookup(dictOrd)(s)(canvasImageSourcesMap);
                                              };
                                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Now.nowTime))(function (initTime) {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write(new Data_Maybe.Just(initTime))(initTimeRef)))(function () {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write(new Data_Maybe.Just(initTime))(localInitTimeRef)))(function () {
                                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](initTime)))(function (deltaTimeRef) {
                                                              return Control_Monad_Rec_Class.forever(Effect_Aff.monadRecAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Now.nowTime))(function (procStart) {
                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Graphics_Canvas.clearRect(offContext2D)({
                                                                      x: 0.0,
                                                                      y: 0.0,
                                                                      height: v.height,
                                                                      width: v.width
                                                                  })))(function () {
                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Graphics_Glapple_Data_Emitter.fire(Effect_Aff.monadEffectAff)(Effect_Aff.monadRecAff)(renderEmitter)({
                                                                          canvasImageSources: canvasImageSources,
                                                                          context2D: offContext2D
                                                                      }))(function () {
                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Graphics_Canvas.clearRect(context2D)({
                                                                              x: 0.0,
                                                                              y: 0.0,
                                                                              height: v.height,
                                                                              width: v.width
                                                                          })))(function () {
                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Graphics_Canvas.drawImage(context2D)(Graphics_Canvas.canvasElementToImageSource(offCanvas))(0.0)(0.0)))(function () {
                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                                                                      var nowT = Effect_Now.nowTime();
                                                                                      var prevT = Effect_Ref.read(deltaTimeRef)();
                                                                                      var v2 = Data_Time.diff(Data_Time_Duration.durationMilliseconds)(nowT)(prevT);
                                                                                      Effect_Ref.write(nowT)(deltaTimeRef)();
                                                                                      return Graphics_Glapple_Data_Emitter.fire(Effect_Class.monadEffectEffect)(Control_Monad_Rec_Class.monadRecEffect)(eventEmitter)(new Graphics_Glapple_Data_Event.Update({
                                                                                          deltaTime: v2 / 1000.0
                                                                                      }))();
                                                                                  }))(function () {
                                                                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Now.nowTime))(function (procEnd) {
                                                                                          var v2 = Data_Time.diff(Data_Time_Duration.durationMilliseconds)(procEnd)(procStart);
                                                                                          return Effect_Aff.delay(Data_Time_Duration.Milliseconds(Data_Ord.max(Data_Ord.ordNumber)(0.0)(1000.0 / fps - v2)));
                                                                                      });
                                                                                  });
                                                                              });
                                                                          });
                                                                      });
                                                                  });
                                                              }));
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  })())();
                                  return gameId;
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var runGameM_ = function (dictOrd) {
      return function (fps) {
          return function (canvasElement) {
              return function (v) {
                  return function (sprites) {
                      return function (gameSpecM) {
                          return runGameM(dictOrd)(fps)(canvasElement)({
                              height: v.height,
                              width: v.width
                          })(sprites)(gameSpecM)(function (v1) {
                              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                          });
                      };
                  };
              };
          };
      };
  };
  exports["runChildGameM"] = runChildGameM;
  exports["runChildGameM_"] = runChildGameM_;
  exports["runGameM_"] = runGameM_;
  exports["runGameWithM_"] = runGameWithM_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["GlappleExamples.HOGs.Fixer"] = $PS["GlappleExamples.HOGs.Fixer"] || {};
  var exports = $PS["GlappleExamples.HOGs.Fixer"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Unit = $PS["Data.Unit"];
  var Graphics_Glapple_Data_Event = $PS["Graphics.Glapple.Data.Event"];
  var Graphics_Glapple_Data_GameId = $PS["Graphics.Glapple.Data.GameId"];
  var Graphics_Glapple_Data_Picture = $PS["Graphics.Glapple.Data.Picture"];
  var Graphics_Glapple_GameRunnerM = $PS["Graphics.Glapple.GameRunnerM"];
  var Graphics_Glapple_GlappleM = $PS["Graphics.Glapple.GlappleM"];                
  var fixer = function (trans) {
      return function (gameSpec) {
          return {
              initGameState: Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GameRunnerM.runChildGameM(gameSpec)(function (o) {
                  return Graphics_Glapple_GlappleM.raise(o);
              }))(function (gameId) {
                  return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)({
                      gameId: gameId
                  });
              }),
              eventHandler: function (v) {
                  if (v instanceof Graphics_Glapple_Data_Event.Update) {
                      return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getGameState)(function (v1) {
                          return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_Data_GameId["null"](Graphics_Glapple_GlappleM.monadEffectGlappleM)(v1.gameId))(function (frag) {
                              return Control_Applicative.when(Graphics_Glapple_GlappleM.applicativeGlappleM)(frag)(Graphics_Glapple_GlappleM.destroy);
                          });
                      });
                  };
                  return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(Data_Unit.unit);
              },
              inputHandler: function (i) {
                  return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getGameState)(function (v) {
                      return Graphics_Glapple_Data_GameId.tell(Graphics_Glapple_GlappleM.monadEffectGlappleM)(v.gameId)(i);
                  });
              },
              render: Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getGameState)(function (v) {
                  return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(Graphics_Glapple_Data_Picture.absolute(Graphics_Glapple_Data_Picture.transform(trans)(Graphics_Glapple_Data_GameId.renderGame(v.gameId))));
              })
          };
      };
  };
  exports["fixer"] = fixer;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["GlappleExamples.Utils"] = $PS["GlappleExamples.Utils"] || {};
  var exports = $PS["GlappleExamples.Utils"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Graphics_Glapple_Data_Picture = $PS["Graphics.Glapple.Data.Picture"];
  var Graphics_Glapple_GlappleM = $PS["Graphics.Glapple.GlappleM"];                
  var refTransform = function (render) {
      return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.toEffect(render))(function (renderEff) {
          return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(Graphics_Glapple_Data_Picture.drawWithTransform(function (t) {
              return Graphics_Glapple_Data_Picture.absorb(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                  var renderedMaybe = renderEff(t)();
                  return Data_Maybe.fromMaybe(Graphics_Glapple_Data_Picture.empty)(renderedMaybe);
              }));
          }));
      });
  };
  exports["refTransform"] = refTransform;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Graphics.GlappleEx.Games.Particle"] = $PS["Graphics.GlappleEx.Games.Particle"] || {};
  var exports = $PS["Graphics.GlappleEx.Games.Particle"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Random = $PS["Effect.Random"];
  var GlappleExamples_HOGs_Fixer = $PS["GlappleExamples.HOGs.Fixer"];
  var GlappleExamples_Utils = $PS["GlappleExamples.Utils"];
  var Graphics_Glapple_Data_Event = $PS["Graphics.Glapple.Data.Event"];
  var Graphics_Glapple_Data_GameId = $PS["Graphics.Glapple.Data.GameId"];
  var Graphics_Glapple_Data_GameSpecM = $PS["Graphics.Glapple.Data.GameSpecM"];
  var Graphics_Glapple_Data_Picture = $PS["Graphics.Glapple.Data.Picture"];
  var Graphics_Glapple_GameRunnerM = $PS["Graphics.Glapple.GameRunnerM"];
  var Graphics_Glapple_GlappleM = $PS["Graphics.Glapple.GlappleM"];
  var $$Math = $PS["Math"];                
  var gameSpecMonoParticle = function (v) {
      return function (pic) {
          var render = Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getGameState)(function (v1) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_GlappleM.bindGlappleM)(Control_Applicative.when(Graphics_Glapple_GlappleM.applicativeGlappleM)(v1.o < 0.0)(Graphics_Glapple_GlappleM.destroy))(function () {
                  return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(Graphics_Glapple_Data_Picture.opacity(v1.o)(Graphics_Glapple_Data_Picture.rotate(v.direction)(Graphics_Glapple_Data_Picture.translate(v1.x)(0.0)(Graphics_Glapple_Data_Picture.rotate(v.angle)(pic)))));
              });
          });
          var eventHandler = function (v1) {
              if (v1 instanceof Graphics_Glapple_Data_Event.Update) {
                  return Graphics_Glapple_GlappleM.modifyGameState(function (v2) {
                      return {
                          x: v2.x + (v1.value0.deltaTime * v.spread) / v.life,
                          o: v2.o - v1.value0.deltaTime / v.life
                      };
                  });
              };
              return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(Data_Unit.unit);
          };
          return {
              eventHandler: eventHandler,
              inputHandler: Graphics_Glapple_Data_GameSpecM.defaultHandler(Graphics_Glapple_GlappleM.applicativeGlappleM),
              render: render,
              initGameState: Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)({
                  x: 0.0,
                  o: 1.0
              })
          };
      };
  };
  var gameSpec = function (v) {
      return function (pic) {
          var render = GlappleExamples_Utils.refTransform(function (t) {
              return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getGameState)(function (v1) {
                  return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getLocalTime)(function (localTime) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_GlappleM.bindGlappleM)(Control_Applicative.when(Graphics_Glapple_GlappleM.applicativeGlappleM)(v1.waitTime > 1.0 / v.perSecond && Data_Maybe.fromMaybe(true)(Data_Functor.map(Data_Maybe.functorMaybe)(function (c) {
                          return localTime < c;
                      })(v["continue"])))(Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.modifyGameState(function (v2) {
                          return {
                              waitTime: 0.0,
                              particles: v2.particles
                          };
                      }))(function () {
                          return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Effect_Random.random))(function (r) {
                              return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Effect_Random.random))(function (r$prime) {
                                  return Graphics_Glapple_GameRunnerM.runGameWithM_(v1.particles)(GlappleExamples_HOGs_Fixer.fixer(t)(gameSpecMonoParticle({
                                      direction: r * 2.0 * $$Math.pi,
                                      angle: r$prime * 2.0 * $$Math.pi,
                                      life: v.life,
                                      spread: v.spread
                                  })(pic)));
                              });
                          });
                      })))(function () {
                          return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(Graphics_Glapple_Data_GameId.renderGame(v1.particles));
                      });
                  });
              });
          });
          var eventHandler = function (v1) {
              if (v1 instanceof Graphics_Glapple_Data_Event.Update) {
                  return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getGameState)(function (v2) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.putGameState({
                          waitTime: v2.waitTime + v1.value0.deltaTime,
                          particles: v2.particles
                      }))(function () {
                          return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getLocalTime)(function (localTime) {
                              return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_Data_GameId["null"](Graphics_Glapple_GlappleM.monadEffectGlappleM)(v2.particles))(function (frag) {
                                  return Control_Applicative.when(Graphics_Glapple_GlappleM.applicativeGlappleM)(frag && Data_Maybe.fromMaybe(false)(Data_Functor.map(Data_Maybe.functorMaybe)(function (c) {
                                      return localTime > c;
                                  })(v["continue"])))(Graphics_Glapple_GlappleM.destroy);
                              });
                          });
                      });
                  });
              };
              return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(Data_Unit.unit);
          };
          return {
              eventHandler: eventHandler,
              inputHandler: Graphics_Glapple_Data_GameSpecM.defaultHandler(Graphics_Glapple_GlappleM.applicativeGlappleM),
              render: render,
              initGameState: Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_Data_GameId.emptyGameId(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.monadEffectGlappleM))(function (particles) {
                  return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)({
                      waitTime: 0.0,
                      particles: particles
                  });
              })
          };
      };
  };
  exports["gameSpec"] = gameSpec;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["GlappleExamples.Games.Root"] = $PS["GlappleExamples.Games.Root"] || {};
  var exports = $PS["GlappleExamples.Games.Root"];
  var Color = $PS["Color"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];
  var GlappleExamples_Games_Apple = $PS["GlappleExamples.Games.Apple"];
  var GlappleExamples_Games_DestroyTest = $PS["GlappleExamples.Games.DestroyTest"];
  var GlappleExamples_HOGs_Fixer = $PS["GlappleExamples.HOGs.Fixer"];
  var GlappleExamples_Sprites = $PS["GlappleExamples.Sprites"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Graphics_Glapple_Data_Event = $PS["Graphics.Glapple.Data.Event"];
  var Graphics_Glapple_Data_GameId = $PS["Graphics.Glapple.Data.GameId"];
  var Graphics_Glapple_Data_Picture = $PS["Graphics.Glapple.Data.Picture"];
  var Graphics_Glapple_GameRunnerM = $PS["Graphics.Glapple.GameRunnerM"];
  var Graphics_Glapple_GlappleM = $PS["Graphics.Glapple.GlappleM"];
  var Graphics_GlappleEx_Games_Particle = $PS["Graphics.GlappleEx.Games.Particle"];                
  var testRect = Graphics_Glapple_Data_Picture.lineWidth(10.0)(Graphics_Glapple_Data_Picture.translate(120.0)(60.0)(Graphics_Glapple_Data_Picture.rotate(0.6)(Graphics_Glapple_Data_Picture.color(Color["rgb'"](1.0)(0.6)(0.6))(Graphics_Glapple_Data_Picture.rect(Graphics_Glapple_Data_Picture.Stroke.value)(160.0)(80.0)))));
  var testFan = Graphics_Glapple_Data_Picture.lineWidth(20.0)(Graphics_Glapple_Data_Picture.paint(new Graphics_Glapple_Data_Picture.Pattern({
      sprite: GlappleExamples_Sprites.Apple.value,
      repeat: Graphics_Canvas.Repeat.value
  }))(Graphics_Glapple_Data_Picture.translate(120.0)(120.0)(Graphics_Glapple_Data_Picture.fan(Graphics_Glapple_Data_Picture.Stroke.value)({
      start: -1.3,
      angle: 1.2,
      radius: 80.0
  }))));
  var testArc = Graphics_Glapple_Data_Picture.lineWidth(20.0)(Graphics_Glapple_Data_Picture.color(Color["rgb'"](1.0)(0.5)(1.0))(Graphics_Glapple_Data_Picture.translate(160.0)(160.0)(Graphics_Glapple_Data_Picture.arc({
      start: 0.0,
      angle: 1.6,
      radius: 80.0
  }))));
  var polyData = [ new Data_Tuple.Tuple(10.0, 5.0), new Data_Tuple.Tuple(180.0, 60.0), new Data_Tuple.Tuple(64.0, 256.0) ];
  var testPolygon = Graphics_Glapple_Data_Picture.paint(new Graphics_Glapple_Data_Picture.LinearGradient({
      x0: 0.0,
      x1: 200.0,
      y0: 0.0,
      y1: 200.0,
      colorStops: [ new Data_Tuple.Tuple(0.0, Color["rgb'"](1.0)(0.5)(0.0)), new Data_Tuple.Tuple(1.0, Color["rgb'"](0.0)(0.5)(1.0)) ]
  }))(Graphics_Glapple_Data_Picture.polygon(Graphics_Glapple_Data_Picture.Fill.value)(polyData));
  var testPolygon2 = Graphics_Glapple_Data_Picture.paint(new Graphics_Glapple_Data_Picture.RadialGradient({
      x0: 160.0,
      x1: 160.0,
      r0: 10.0,
      y0: 160.0,
      y1: 160.0,
      r1: 160.0,
      colorStops: [ new Data_Tuple.Tuple(0.0, Color["rgb'"](1.0)(0.0)(0.0)), new Data_Tuple.Tuple(1.0, Color["rgb'"](0.0)(0.0)(1.0)) ]
  }))(Graphics_Glapple_Data_Picture.translate(140.0)(0.0)(Graphics_Glapple_Data_Picture.polygon(Graphics_Glapple_Data_Picture.Fill.value)(polyData)));
  var testPolygon3 = Graphics_Glapple_Data_Picture.paint(new Graphics_Glapple_Data_Picture.Pattern({
      sprite: GlappleExamples_Sprites.Apple.value,
      repeat: Graphics_Canvas.Repeat.value
  }))(Graphics_Glapple_Data_Picture.translate(80.0)(150.0)(Graphics_Glapple_Data_Picture.polygon(Graphics_Glapple_Data_Picture.Fill.value)(polyData)));
  var testPolygon4 = Graphics_Glapple_Data_Picture.lineWidth(10.0)(Graphics_Glapple_Data_Picture.color(Color["rgb'"](0.8)(0.8)(0.8))(Graphics_Glapple_Data_Picture.translate(0.0)(160.0)(Graphics_Glapple_Data_Picture.polygon(Graphics_Glapple_Data_Picture.Stroke.value)(polyData))));
  var fontStandard = {
      fontFamily: Graphics_Glapple_Data_Picture.Monospace.value,
      fontHeight: 40,
      fontSize: 40,
      fontWeight: Graphics_Glapple_Data_Picture.Bold.value,
      fontStyle: Graphics_Glapple_Data_Picture.FontStyleNormal.value
  };
  var gameSpec = (function () {
      var render = Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getGameState)(function (v) {
          return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getMousePosition)(function (mousePos) {
              var fpsText = Graphics_Glapple_Data_Picture.lineWidth(1.0)(Graphics_Glapple_Data_Picture.color(Color["rgba'"](0.0)(0.0)(0.0)(0.5))(Graphics_Glapple_Data_Picture.translate(320.0)(5.0)(Graphics_Glapple_Data_Picture.font(fontStandard)(Graphics_Glapple_Data_Picture.textBaseLine(Graphics_Canvas.BaselineHanging.value)(Graphics_Glapple_Data_Picture.textAlign(Graphics_Canvas.AlignRight.value)(Graphics_Glapple_Data_Picture.text(Graphics_Glapple_Data_Picture.Stroke.value)(Data_Show.show(Data_Show.showInt)(Data_Int.floor(v.fps)))))))));
              var particlePic = (function () {
                  if (mousePos instanceof Data_Maybe.Just) {
                      return Graphics_Glapple_Data_Picture.translate(mousePos.value0.mouseX)(mousePos.value0.mouseY)(Graphics_Glapple_Data_GameId.renderGame(v.particle));
                  };
                  if (mousePos instanceof Data_Maybe.Nothing) {
                      return Graphics_Glapple_Data_Picture.empty;
                  };
                  throw new Error("Failed pattern match at GlappleExamples.Games.Root (line 80, column 21 - line 82, column 25): " + [ mousePos.constructor.name ]);
              })();
              return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(Graphics_Glapple_Data_Picture.sourceOverComposite(Graphics_Glapple_Data_Picture.sourceOverComposite(Graphics_Glapple_Data_Picture.sourceOverComposite(Graphics_Glapple_Data_Picture.addComposite(Graphics_Glapple_Data_Picture.addComposite(Graphics_Glapple_Data_Picture.multiplyComposite(Graphics_Glapple_Data_Picture.sourceOverComposite(Graphics_Glapple_Data_Picture.sourceOverComposite(Graphics_Glapple_Data_Picture.destinationOverComposite(Graphics_Glapple_Data_Picture.sourceOverComposite(Graphics_Glapple_Data_Picture.addComposite(fpsText)(Graphics_Glapple_Data_GameId.renderGame(v.apple)))(testPolygon))(testPolygon2))(testPolygon3))(testPolygon4))(testRect))(testArc))(testFan))(Graphics_Glapple_Data_GameId.renderGame(v.destroyTest)))(particlePic))(Graphics_Glapple_Data_Picture.sprite(GlappleExamples_Sprites.ArcTest.value)));
          });
      });
      var inputHandler = function (v) {
          return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getGameState)(function (v1) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Graphics_Glapple_GlappleM.bindGlappleM)(Effect_Class.liftEffect(Graphics_Glapple_GlappleM.monadEffectGlappleM)(Graphics_Glapple_Data_GameId.tell(Effect_Class.monadEffectEffect)(v1.apple)(GlappleExamples_Games_Apple.StartRotate.value)))(function () {
                  return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(Data_Unit.unit);
              });
          });
      };
      var initGameState = Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GameRunnerM.runChildGameM_(GlappleExamples_Games_Apple.gameSpec))(function (apple) {
          return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GameRunnerM.runChildGameM_(GlappleExamples_Games_DestroyTest.gameSpec))(function (destroyTest) {
              return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_Data_GameId.emptyGameId(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.monadEffectGlappleM))(function (particle) {
                  return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)({
                      fps: 0.0,
                      rotating: false,
                      apple: apple,
                      destroyTest: destroyTest,
                      particle: particle
                  });
              });
          });
      });
      var eventHandler = function (v) {
          if (v instanceof Graphics_Glapple_Data_Event.Update) {
              return Graphics_Glapple_GlappleM.modifyGameState(function (v1) {
                  return {
                      fps: (1.0 / v.value0.deltaTime) * 0.1 + v1.fps * 0.9,
                      particle: v1.particle,
                      apple: v1.apple,
                      destroyTest: v1.destroyTest,
                      rotating: v1.rotating
                  };
              });
          };
          if (v instanceof Graphics_Glapple_Data_Event.KeyEvent && (v.value0.keyCode instanceof Graphics_Glapple_Data_Event.Keyboard && v.value0.keyCode.value0 === "KeyX")) {
              return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(Data_Unit.unit);
          };
          if (v instanceof Graphics_Glapple_Data_Event.KeyEvent && (v.value0.keyCode instanceof Graphics_Glapple_Data_Event.Mouse && (v.value0.keyCode.value0 instanceof Graphics_Glapple_Data_Event.Left && v.value0.keyState instanceof Graphics_Glapple_Data_Event.KeyDown))) {
              return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getGameState)(function (v1) {
                  return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Graphics_Glapple_GlappleM.getMousePosition)(function (mousePosMaybe) {
                      return Control_Bind.bind(Graphics_Glapple_GlappleM.bindGlappleM)(Data_Maybe.maybe(Graphics_Glapple_GlappleM["break"])(Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM))(mousePosMaybe))(function (v2) {
                          return Graphics_Glapple_GameRunnerM.runGameWithM_(v1.particle)(GlappleExamples_HOGs_Fixer.fixer(Graphics_Glapple_Data_Picture.translateToTransform(v2.mouseX)(v2.mouseY))(Graphics_GlappleEx_Games_Particle.gameSpec({
                              perSecond: 120.0,
                              "continue": new Data_Maybe.Just(0.1),
                              life: 0.4,
                              spread: 20.0
                          })(Graphics_Glapple_Data_Picture.scale(1.0)(1.0)(Graphics_Glapple_Data_Picture.translate(-16.0)(-16.0)(Graphics_Glapple_Data_Picture.sprite(GlappleExamples_Sprites.Apple.value))))));
                      });
                  });
              });
          };
          return Control_Applicative.pure(Graphics_Glapple_GlappleM.applicativeGlappleM)(Data_Unit.unit);
      };
      return {
          eventHandler: eventHandler,
          inputHandler: inputHandler,
          initGameState: initGameState,
          render: render
      };
  })();
  exports["gameSpec"] = gameSpec;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var GlappleExamples_Games_Root = $PS["GlappleExamples.Games.Root"];
  var GlappleExamples_Sprites = $PS["GlappleExamples.Sprites"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Graphics_Glapple_Data_GameId = $PS["Graphics.Glapple.Data.GameId"];
  var Graphics_Glapple_GameRunnerM = $PS["Graphics.Glapple.GameRunnerM"];                
  var main = function __do() {
      var canvas = Control_Bind.bindFlipped(Effect.bindEffect)(Data_Maybe.maybe(Effect_Exception["throw"]("Can not find canvas element"))(Control_Applicative.pure(Effect.applicativeEffect)))(Graphics_Canvas.getCanvasElementById("canvas"))();
      var gameId = Graphics_Glapple_GameRunnerM.runGameM_(GlappleExamples_Sprites.ordSprite)(60.0)(canvas)({
          width: 320.0,
          height: 320.0
      })(GlappleExamples_Sprites.sprites)(GlappleExamples_Games_Root.gameSpec)();
      return Effect_Aff.runAff_(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(3000.0))(function () {
          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Graphics_Glapple_Data_GameId.tell(Effect_Class.monadEffectEffect)(gameId)(Data_Unit.unit));
      }))();
  };
  exports["main"] = main;
})(PS);
PS["Main"].main();